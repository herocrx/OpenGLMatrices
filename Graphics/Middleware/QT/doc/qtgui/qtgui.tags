<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QBitmap</name>
        <filename>qbitmap.html</filename>
        <base>QPixmap</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitmap</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>QBitmap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitmap</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>QBitmap-2</anchor>
            <arglist>(const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitmap</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>QBitmap-3</anchor>
            <arglist>(int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitmap</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>QBitmap-4</anchor>
            <arglist>(const QSize &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitmap</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>QBitmap-5</anchor>
            <arglist>(const QString &amp; fileName, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QBitmap</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>dtor.QBitmap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitmap &amp;</type>
            <name>operator=</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QBitmap &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QBitmap</type>
            <name>fromImage</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>fromImage</anchor>
            <arglist>(const QImage &amp; image, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QBitmap</type>
            <name>fromData</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>fromData</anchor>
            <arglist>(const QSize &amp; size, const uchar * bits, QImage::Format monoFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitmap</type>
            <name>transformed</name>
            <anchorfile>qbitmap-obsolete.html</anchorfile>
            <anchor>transformed-2</anchor>
            <arglist>(const QMatrix &amp; matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitmap</type>
            <name>transformed</name>
            <anchorfile>qbitmap.html</anchorfile>
            <anchor>transformed</anchor>
            <arglist>(const QTransform &amp; matrix) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIcon</name>
        <filename>qicon.html</filename>
        <member kind="enum">
            <name>Mode</name>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Normal">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Disabled">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Active">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Selected">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="On">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Off">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIcon</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>QIcon</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIcon</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>QIcon-2</anchor>
            <arglist>(const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIcon</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>QIcon-3</anchor>
            <arglist>(const QIcon &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIcon</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>QIcon-4</anchor>
            <arglist>(const QString &amp; fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIcon</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>QIcon-5</anchor>
            <arglist>(QIconEngine * engine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QIcon</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>dtor.QIcon</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon &amp;</type>
            <name>operator=</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QIcon &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QIcon &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>pixmap</anchor>
            <arglist>(const QSize &amp; size, Mode mode, State state) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>pixmap-2</anchor>
            <arglist>(int w, int h, Mode mode, State state) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>pixmap-3</anchor>
            <arglist>(int extent, Mode mode, State state) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>actualSize</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>actualSize</anchor>
            <arglist>(const QSize &amp; size, Mode mode, State state) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>paint</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter * painter, const QRect &amp; rect, Qt::Alignment alignment, Mode mode, State state) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>paint</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>paint-2</anchor>
            <arglist>(QPainter * painter, int x, int y, int w, int h, Qt::Alignment alignment, Mode mode, State state) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>serialNumber</name>
            <anchorfile>qicon-compat.html</anchorfile>
            <anchor>serialNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>cacheKey</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>cacheKey</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addPixmap</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>addPixmap</anchor>
            <arglist>(const QPixmap &amp; pixmap, Mode mode, State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addFile</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>addFile</anchor>
            <arglist>(const QString &amp; fileName, const QSize &amp; size, Mode mode, State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSize&gt;</type>
            <name>availableSizes</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>availableSizes</anchor>
            <arglist>(Mode mode, State state) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QIcon</type>
            <name>fromTheme</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>fromTheme</anchor>
            <arglist>(const QString &amp; name, const QIcon &amp; fallback)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasThemeIcon</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>hasThemeIcon</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>themeSearchPaths</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>themeSearchPaths</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setThemeSearchPaths</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>setThemeSearchPaths</anchor>
            <arglist>(const QStringList &amp; paths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>themeName</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>themeName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setThemeName</name>
            <anchorfile>qicon.html</anchorfile>
            <anchor>setThemeName</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIconEngine</name>
        <filename>qiconengine.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QIconEngine</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>dtor.QIconEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>paint</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter * painter, const QRect &amp; rect, QIcon::Mode mode, QIcon::State state) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>actualSize</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>actualSize</anchor>
            <arglist>(const QSize &amp; size, QIcon::Mode mode, QIcon::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>pixmap</anchor>
            <arglist>(const QSize &amp; size, QIcon::Mode mode, QIcon::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>addPixmap</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>addPixmap</anchor>
            <arglist>(const QPixmap &amp; pixmap, QIcon::Mode mode, QIcon::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>addFile</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>addFile</anchor>
            <arglist>(const QString &amp; fileName, const QSize &amp; size, QIcon::Mode mode, QIcon::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>key</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QIconEngine *</type>
            <name>clone</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>read</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(QDataStream &amp; in)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>write</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(QDataStream &amp; out) const</arglist>
        </member>
        <member kind="enum">
            <name>IconEngineHook</name>
            <anchor>IconEngineHook-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AvailableSizesHook">
            <anchor>IconEngineHook-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IconNameHook">
            <anchor>IconEngineHook-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QIconEngine::AvailableSizesArgument</class>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QSize&gt;</type>
            <name>availableSizes</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>availableSizes</anchor>
            <arglist>(QIcon::Mode mode, QIcon::State state) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>iconName</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>iconName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>virtual_hook</name>
            <anchorfile>qiconengine.html</anchorfile>
            <anchor>virtual_hook</anchor>
            <arglist>(int id, void * data)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIconEngine::AvailableSizesArgument</name>
        <filename>qiconengine-availablesizesargument.html</filename>
    </compound>
    <compound kind="class">
        <name>QIconEnginePlugin</name>
        <filename>qiconengineplugin.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIconEnginePlugin</name>
            <anchorfile>qiconengineplugin.html</anchorfile>
            <anchor>QIconEnginePlugin</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QIconEnginePlugin</name>
            <anchorfile>qiconengineplugin.html</anchorfile>
            <anchor>dtor.QIconEnginePlugin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QIconEngine *</type>
            <name>create</name>
            <anchorfile>qiconengineplugin.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const QString &amp; filename) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QImage</name>
        <filename>qimage.html</filename>
        <base>QPaintDevice</base>
        <member kind="enum">
            <name>InvertMode</name>
            <anchor>InvertMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvertRgb">
            <anchor>InvertMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvertRgba">
            <anchor>InvertMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Format</name>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_Invalid">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_Mono">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_MonoLSB">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_Indexed8">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_RGB32">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_ARGB32">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_ARGB32_Premultiplied">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_RGB16">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_ARGB8565_Premultiplied">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_RGB666">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_ARGB6666_Premultiplied">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_RGB555">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_ARGB8555_Premultiplied">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_RGB888">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_RGB444">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_ARGB4444_Premultiplied">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-2</anchor>
            <arglist>(const QSize &amp; size, Format format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-3</anchor>
            <arglist>(int width, int height, Format format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-4</anchor>
            <arglist>(uchar * data, int width, int height, Format format, QImageCleanupFunction cleanupFunction, void * cleanupInfo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-5</anchor>
            <arglist>(const uchar * data, int width, int height, Format format, QImageCleanupFunction cleanupFunction, void * cleanupInfo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-6</anchor>
            <arglist>(uchar * data, int width, int height, int bytesPerLine, Format format, QImageCleanupFunction cleanupFunction, void * cleanupInfo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-7</anchor>
            <arglist>(const uchar * data, int width, int height, int bytesPerLine, Format format, QImageCleanupFunction cleanupFunction, void * cleanupInfo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-8</anchor>
            <arglist>(const char * const[] xpm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-9</anchor>
            <arglist>(const QString &amp; fileName, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>QImage-10</anchor>
            <arglist>(const QImage &amp; image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QImage</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>dtor.QImage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage &amp;</type>
            <name>operator=</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QImage &amp; image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QImage &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QImage &amp; image) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QImage &amp; image) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>copy</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QRect &amp; rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>copy</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>copy-2</anchor>
            <arglist>(int x, int y, int width, int height) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Format</type>
            <name>format</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>convertToFormat</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>convertToFormat</anchor>
            <arglist>(Format format, Qt::ImageConversionFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>convertToFormat</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>convertToFormat-2</anchor>
            <arglist>(Format format, const QVector&lt;QRgb&gt; &amp; colorTable, Qt::ImageConversionFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>rect</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>colorCount</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>colorCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bitPlaneCount</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>bitPlaneCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgb</type>
            <name>color</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>color</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setColor</anchor>
            <arglist>(int index, QRgb colorValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColorCount</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setColorCount</anchor>
            <arglist>(int colorCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>allGray</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>allGray</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isGrayscale</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>isGrayscale</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar *</type>
            <name>bits</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>bits</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const uchar *</type>
            <name>bits</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>bits-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const uchar *</type>
            <name>constBits</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>constBits</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>byteCount</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>byteCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar *</type>
            <name>scanLine</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>scanLine</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const uchar *</type>
            <name>scanLine</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>scanLine-2</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const uchar *</type>
            <name>constScanLine</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>constScanLine</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bytesPerLine</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>bytesPerLine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>valid</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>valid-2</anchor>
            <arglist>(int x, int y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>valid</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>valid</anchor>
            <arglist>(const QPoint &amp; pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pixelIndex</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>pixelIndex-2</anchor>
            <arglist>(int x, int y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pixelIndex</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>pixelIndex</anchor>
            <arglist>(const QPoint &amp; position) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgb</type>
            <name>pixel</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>pixel-2</anchor>
            <arglist>(int x, int y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgb</type>
            <name>pixel</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>pixel</anchor>
            <arglist>(const QPoint &amp; position) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixel</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setPixel-2</anchor>
            <arglist>(int x, int y, uint index_or_rgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixel</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setPixel</anchor>
            <arglist>(const QPoint &amp; position, uint index_or_rgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRgb&gt;</type>
            <name>colorTable</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>colorTable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColorTable</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setColorTable</anchor>
            <arglist>(const QVector&lt;QRgb&gt; colors)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>devicePixelRatio</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>devicePixelRatio</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevicePixelRatio</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setDevicePixelRatio</anchor>
            <arglist>(qreal scaleFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(uint pixelValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>fill-3</anchor>
            <arglist>(const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>fill-2</anchor>
            <arglist>(Qt::GlobalColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAlphaChannel</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>hasAlphaChannel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlphaChannel</name>
            <anchorfile>qimage-obsolete.html</anchorfile>
            <anchor>setAlphaChannel</anchor>
            <arglist>(const QImage &amp; alphaChannel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>alphaChannel</name>
            <anchorfile>qimage-obsolete.html</anchorfile>
            <anchor>alphaChannel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>createAlphaMask</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>createAlphaMask</anchor>
            <arglist>(Qt::ImageConversionFlags flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>createHeuristicMask</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>createHeuristicMask</anchor>
            <arglist>(bool clipTight) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>createMaskFromColor</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>createMaskFromColor</anchor>
            <arglist>(QRgb color, Qt::MaskMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>scaled</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>scaled-2</anchor>
            <arglist>(int width, int height, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>scaled</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>scaled</anchor>
            <arglist>(const QSize &amp; size, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>scaledToWidth</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>scaledToWidth</anchor>
            <arglist>(int width, Qt::TransformationMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>scaledToHeight</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>scaledToHeight</anchor>
            <arglist>(int height, Qt::TransformationMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>transformed</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>transformed</anchor>
            <arglist>(const QMatrix &amp; matrix, Qt::TransformationMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMatrix</type>
            <name>trueMatrix</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>trueMatrix</anchor>
            <arglist>(const QMatrix &amp; matrix, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>transformed</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>transformed-2</anchor>
            <arglist>(const QTransform &amp; matrix, Qt::TransformationMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTransform</type>
            <name>trueMatrix</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>trueMatrix-2</anchor>
            <arglist>(const QTransform &amp; matrix, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>mirrored</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>mirrored</anchor>
            <arglist>(bool horizontal, bool vertical) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>rgbSwapped</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>rgbSwapped</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>invertPixels</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>invertPixels</anchor>
            <arglist>(InvertMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>load-2</anchor>
            <arglist>(QIODevice * device, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(const QString &amp; fileName, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>loadFromData</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>loadFromData</anchor>
            <arglist>(const uchar * data, int len, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>loadFromData</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>loadFromData-2</anchor>
            <arglist>(const QByteArray &amp; data, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>save</anchor>
            <arglist>(const QString &amp; fileName, const char * format, int quality) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>save-2</anchor>
            <arglist>(QIODevice * device, const char * format, int quality) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QImage</type>
            <name>fromData</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>fromData</anchor>
            <arglist>(const uchar * data, int size, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QImage</type>
            <name>fromData</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>fromData-2</anchor>
            <arglist>(const QByteArray &amp; data, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>serialNumber</name>
            <anchorfile>qimage-compat.html</anchorfile>
            <anchor>serialNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>cacheKey</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>cacheKey</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dotsPerMeterX</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>dotsPerMeterX</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dotsPerMeterY</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>dotsPerMeterY</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDotsPerMeterX</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setDotsPerMeterX</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDotsPerMeterY</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setDotsPerMeterY</anchor>
            <arglist>(int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>offset</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>offset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOffset</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setOffset</anchor>
            <arglist>(const QPoint &amp; offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>textKeys</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>textKeys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>text</anchor>
            <arglist>(const QString &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qimage.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp; key, const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qimage-compat.html</anchorfile>
            <anchor>text-2</anchor>
            <arglist>(const char * key, const char * language) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QImageTextKeyLang&gt;</type>
            <name>textList</name>
            <anchorfile>qimage-compat.html</anchorfile>
            <anchor>textList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>textLanguages</name>
            <anchorfile>qimage-compat.html</anchorfile>
            <anchor>textLanguages</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qimage-compat.html</anchorfile>
            <anchor>text-3</anchor>
            <arglist>(const QImageTextKeyLang &amp; keywordAndLanguage) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qimage-compat.html</anchorfile>
            <anchor>setText-2</anchor>
            <arglist>(const char * key, const char * language, const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>numColors</name>
            <anchorfile>qimage-compat.html</anchorfile>
            <anchor>numColors</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumColors</name>
            <anchorfile>qimage-compat.html</anchorfile>
            <anchor>setNumColors</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>numBytes</name>
            <anchorfile>qimage-compat.html</anchorfile>
            <anchor>numBytes</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QImageIOHandler</name>
        <filename>qimageiohandler.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageIOHandler</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>QImageIOHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QImageIOHandler</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>dtor.QImageIOHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QByteArray &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>setFormat-2</anchor>
            <arglist>(const QByteArray &amp; format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>format</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QByteArray</type>
            <name>name</name>
            <anchorfile>qimageiohandler-obsolete.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>canRead</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>canRead</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>read</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(QImage * image) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>write</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(const QImage &amp; image)</arglist>
        </member>
        <member kind="enum">
            <name>ImageOption</name>
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Size">
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClipRect">
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Description">
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScaledClipRect">
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScaledSize">
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompressionRatio">
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Gamma">
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Quality">
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Name">
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SubType">
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IncrementalReading">
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Endianness">
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Animation">
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackgroundColor">
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormat">
            <anchor>ImageOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>option</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>option</anchor>
            <arglist>(ImageOption option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setOption</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>setOption</anchor>
            <arglist>(ImageOption option, const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>supportsOption</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>supportsOption</anchor>
            <arglist>(ImageOption option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>jumpToNextImage</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>jumpToNextImage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>jumpToImage</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>jumpToImage</anchor>
            <arglist>(int imageNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>loopCount</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>loopCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>imageCount</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>imageCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>nextImageDelay</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>nextImageDelay</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>currentImageNumber</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>currentImageNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRect</type>
            <name>currentImageRect</name>
            <anchorfile>qimageiohandler.html</anchorfile>
            <anchor>currentImageRect</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QImageIOPlugin</name>
        <filename>qimageioplugin.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageIOPlugin</name>
            <anchorfile>qimageioplugin.html</anchorfile>
            <anchor>QImageIOPlugin</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QImageIOPlugin</name>
            <anchorfile>qimageioplugin.html</anchorfile>
            <anchor>dtor.QImageIOPlugin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>Capability</name>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CanRead">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CanWrite">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CanReadIncremental">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QImageIOPlugin::Capability">
            <name>Capabilities</name>
            <anchorfile>qimageioplugin.html</anchorfile>
            <anchor>Capabilities-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual Capabilities</type>
            <name>capabilities</name>
            <anchorfile>qimageioplugin.html</anchorfile>
            <anchor>capabilities</anchor>
            <arglist>(QIODevice * device, const QByteArray &amp; format) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QImageIOHandler *</type>
            <name>create</name>
            <anchorfile>qimageioplugin.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(QIODevice * device, const QByteArray &amp; format) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QImageReader</name>
        <filename>qimagereader.html</filename>
        <member kind="enum">
            <name>ImageReaderError</name>
            <anchor>ImageReaderError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>ImageReaderError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FileNotFoundError">
            <anchor>ImageReaderError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeviceError">
            <anchor>ImageReaderError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsupportedFormatError">
            <anchor>ImageReaderError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidDataError">
            <anchor>ImageReaderError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageReader</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>QImageReader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageReader</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>QImageReader-2</anchor>
            <arglist>(QIODevice * device, const QByteArray &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageReader</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>QImageReader-3</anchor>
            <arglist>(const QString &amp; fileName, const QByteArray &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QImageReader</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>dtor.QImageReader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QByteArray &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>format</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoDetectImageFormat</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setAutoDetectImageFormat</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoDetectImageFormat</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>autoDetectImageFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDecideFormatFromContent</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setDecideFormatFromContent</anchor>
            <arglist>(bool ignored)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>decideFormatFromContent</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>decideFormatFromContent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp; fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage::Format</type>
            <name>imageFormat</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>imageFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>textKeys</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>textKeys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>text</anchor>
            <arglist>(const QString &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipRect</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setClipRect</anchor>
            <arglist>(const QRect &amp; rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>clipRect</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>clipRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScaledSize</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setScaledSize</anchor>
            <arglist>(const QSize &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>scaledSize</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>scaledSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuality</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setQuality</anchor>
            <arglist>(int quality)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>quality</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>quality</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScaledClipRect</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setScaledClipRect</anchor>
            <arglist>(const QRect &amp; rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>scaledClipRect</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>scaledClipRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackgroundColor</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>setBackgroundColor</anchor>
            <arglist>(const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>backgroundColor</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>backgroundColor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsAnimation</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>supportsAnimation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canRead</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>canRead</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>read</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>read</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>read</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>read-2</anchor>
            <arglist>(QImage * image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>jumpToNextImage</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>jumpToNextImage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>jumpToImage</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>jumpToImage</anchor>
            <arglist>(int imageNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>loopCount</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>loopCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>imageCount</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>imageCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>nextImageDelay</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>nextImageDelay</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentImageNumber</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>currentImageNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>currentImageRect</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>currentImageRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ImageReaderError</type>
            <name>error</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsOption</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>supportsOption</anchor>
            <arglist>(QImageIOHandler::ImageOption option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>imageFormat</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>imageFormat-2</anchor>
            <arglist>(const QString &amp; fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>imageFormat</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>imageFormat-3</anchor>
            <arglist>(QIODevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>supportedImageFormats</name>
            <anchorfile>qimagereader.html</anchorfile>
            <anchor>supportedImageFormats</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QImageWriter</name>
        <filename>qimagewriter.html</filename>
        <member kind="enum">
            <name>ImageWriterError</name>
            <anchor>ImageWriterError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>ImageWriterError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeviceError">
            <anchor>ImageWriterError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsupportedFormatError">
            <anchor>ImageWriterError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageWriter</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>QImageWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageWriter</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>QImageWriter-2</anchor>
            <arglist>(QIODevice * device, const QByteArray &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageWriter</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>QImageWriter-3</anchor>
            <arglist>(const QString &amp; fileName, const QByteArray &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QImageWriter</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>dtor.QImageWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QByteArray &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>format</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp; fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuality</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setQuality</anchor>
            <arglist>(int quality)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>quality</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>quality</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompression</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setCompression</anchor>
            <arglist>(int compression)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compression</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>compression</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGamma</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setGamma</anchor>
            <arglist>(float gamma)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>gamma</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>gamma</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescription</name>
            <anchorfile>qimagewriter-obsolete.html</anchorfile>
            <anchor>setDescription</anchor>
            <arglist>(const QString &amp; description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qimagewriter-obsolete.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp; key, const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canWrite</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>canWrite</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>write</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(const QImage &amp; image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ImageWriterError</type>
            <name>error</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsOption</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>supportsOption</anchor>
            <arglist>(QImageIOHandler::ImageOption option) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>supportedImageFormats</name>
            <anchorfile>qimagewriter.html</anchorfile>
            <anchor>supportedImageFormats</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMovie</name>
        <filename>qmovie.html</filename>
        <base>QObject</base>
        <member kind="property" type="int">
            <name>speed</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>speed-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="CacheMode">
            <name>cacheMode</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>cacheMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>MovieState</name>
            <anchor>MovieState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotRunning">
            <anchor>MovieState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Paused">
            <anchor>MovieState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Running">
            <anchor>MovieState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CacheMode</name>
            <anchor>CacheMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CacheNone">
            <anchor>CacheMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CacheAll">
            <anchor>CacheMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMovie</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>QMovie</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMovie</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>QMovie-2</anchor>
            <arglist>(QIODevice * device, const QByteArray &amp; format, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMovie</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>QMovie-3</anchor>
            <arglist>(const QString &amp; fileName, const QByteArray &amp; format, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMovie</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>dtor.QMovie</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>supportedFormats</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>supportedFormats</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp; fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QByteArray &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>format</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackgroundColor</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>setBackgroundColor</anchor>
            <arglist>(const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>backgroundColor</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>backgroundColor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>MovieState</type>
            <name>state</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>frameRect</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>frameRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>currentImage</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>currentImage</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>currentPixmap</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>currentPixmap</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>jumpToFrame</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>jumpToFrame</anchor>
            <arglist>(int frameNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>loopCount</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>loopCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>frameCount</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>frameCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>nextFrameDelay</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>nextFrameDelay</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentFrameNumber</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>currentFrameNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>speed</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>speed-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>scaledSize</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>scaledSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScaledSize</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>setScaledSize</anchor>
            <arglist>(const QSize &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CacheMode</type>
            <name>cacheMode</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>cacheMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCacheMode</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>cacheMode-prop</anchor>
            <arglist>(CacheMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>started</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>started</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resized</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>resized</anchor>
            <arglist>(const QSize &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updated</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>updated</anchor>
            <arglist>(const QRect &amp; rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QMovie::MovieState state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(QImageReader::ImageReaderError error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frameChanged</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>frameChanged</anchor>
            <arglist>(int frameNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>jumpToNextFrame</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>jumpToNextFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPaused</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>setPaused</anchor>
            <arglist>(bool paused)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpeed</name>
            <anchorfile>qmovie.html</anchorfile>
            <anchor>speed-prop</anchor>
            <arglist>(int percentSpeed)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPicture</name>
        <filename>qpicture.html</filename>
        <base>QPaintDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPicture</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>QPicture</anchor>
            <arglist>(int formatVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPicture</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>QPicture-2</anchor>
            <arglist>(const QPicture &amp; pic)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPicture</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>dtor.QPicture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>size</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>data</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setData</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const char * data, uint size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>play</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>play</anchor>
            <arglist>(QPainter * painter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>load-2</anchor>
            <arglist>(QIODevice * dev, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(const QString &amp; fileName, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>save-2</anchor>
            <arglist>(QIODevice * dev, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>save</anchor>
            <arglist>(const QString &amp; fileName, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBoundingRect</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>setBoundingRect</anchor>
            <arglist>(const QRect &amp; r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPicture &amp;</type>
            <name>operator=</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QPicture &amp; p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpicture.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPicture &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const char *</type>
            <name>pictureFormat</name>
            <anchorfile>qpicture-obsolete.html</anchorfile>
            <anchor>pictureFormat</anchor>
            <arglist>(const QString &amp; fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>inputFormats</name>
            <anchorfile>qpicture-obsolete.html</anchorfile>
            <anchor>inputFormats</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>outputFormats</name>
            <anchorfile>qpicture-obsolete.html</anchorfile>
            <anchor>outputFormats</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>inputFormatList</name>
            <anchorfile>qpicture-obsolete.html</anchorfile>
            <anchor>inputFormatList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>outputFormatList</name>
            <anchorfile>qpicture-obsolete.html</anchorfile>
            <anchor>outputFormatList</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPictureIO</name>
        <filename>qpictureio.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPictureIO</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>QPictureIO</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPictureIO</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>QPictureIO-2</anchor>
            <arglist>(QIODevice * ioDevice, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPictureIO</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>QPictureIO-3</anchor>
            <arglist>(const QString &amp; fileName, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPictureIO</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>dtor.QPictureIO</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPicture &amp;</type>
            <name>picture</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>picture</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>status</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>format</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>ioDevice</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>ioDevice</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>quality</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>quality</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>parameters</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>gamma</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>gamma</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPicture</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setPicture</anchor>
            <arglist>(const QPicture &amp; picture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatus</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setStatus</anchor>
            <arglist>(int status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIODevice</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setIODevice</anchor>
            <arglist>(QIODevice * ioDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp; fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuality</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setQuality</anchor>
            <arglist>(int q)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescription</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setDescription</anchor>
            <arglist>(const QString &amp; description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParameters</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setParameters</anchor>
            <arglist>(const char * parameters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGamma</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>setGamma</anchor>
            <arglist>(float gamma)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>read</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>read</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>write</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>write</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>pictureFormat</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>pictureFormat</anchor>
            <arglist>(const QString &amp; fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>pictureFormat</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>pictureFormat-2</anchor>
            <arglist>(QIODevice * d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>inputFormats</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>inputFormats</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>outputFormats</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>outputFormats</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>defineIOHandler</name>
            <anchorfile>qpictureio.html</anchorfile>
            <anchor>defineIOHandler</anchor>
            <arglist>(const char * format, const char * header, const char * flags, picture_io_handler readPicture, picture_io_handler writePicture)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPictureFormatPlugin</name>
        <filename>qpictureformatplugin.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPictureFormatPlugin</name>
            <anchorfile>qpictureformatplugin.html</anchorfile>
            <anchor>QPictureFormatPlugin</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPictureFormatPlugin</name>
            <anchorfile>qpictureformatplugin.html</anchorfile>
            <anchor>dtor.QPictureFormatPlugin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>loadPicture</name>
            <anchorfile>qpictureformatplugin.html</anchorfile>
            <anchor>loadPicture</anchor>
            <arglist>(const QString &amp; format, const QString &amp; fileName, QPicture * picture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>savePicture</name>
            <anchorfile>qpictureformatplugin.html</anchorfile>
            <anchor>savePicture</anchor>
            <arglist>(const QString &amp; format, const QString &amp; fileName, const QPicture &amp; picture)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>installIOHandler</name>
            <anchorfile>qpictureformatplugin.html</anchorfile>
            <anchor>installIOHandler</anchor>
            <arglist>(const QString &amp; format) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPixmap</name>
        <filename>qpixmap.html</filename>
        <base>QPaintDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPixmap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>QPixmap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPixmap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>QPixmap-3</anchor>
            <arglist>(int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPixmap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>QPixmap-8</anchor>
            <arglist>(const QSize &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPixmap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>QPixmap-4</anchor>
            <arglist>(const QString &amp; fileName, const char * format, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPixmap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>QPixmap-5</anchor>
            <arglist>(const char * const[] xpm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPixmap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>QPixmap-6</anchor>
            <arglist>(const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPixmap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>dtor.QPixmap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap &amp;</type>
            <name>operator=</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPixmap &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>rect</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>defaultDepth</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>defaultDepth</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qpixmap-obsolete.html</anchorfile>
            <anchor>fill-2</anchor>
            <arglist>(const QPaintDevice * device, const QPoint &amp; p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qpixmap-obsolete.html</anchorfile>
            <anchor>fill-3</anchor>
            <arglist>(const QPaintDevice * device, int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitmap</type>
            <name>mask</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>mask</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMask</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>setMask</anchor>
            <arglist>(const QBitmap &amp; mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>devicePixelRatio</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>devicePixelRatio</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevicePixelRatio</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>setDevicePixelRatio</anchor>
            <arglist>(qreal scaleFactor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAlpha</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>hasAlpha</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAlphaChannel</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>hasAlphaChannel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitmap</type>
            <name>createHeuristicMask</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>createHeuristicMask</anchor>
            <arglist>(bool clipTight) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitmap</type>
            <name>createMaskFromColor</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>createMaskFromColor</anchor>
            <arglist>(const QColor &amp; maskColor, Qt::MaskMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPixmap</type>
            <name>grabWindow</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>grabWindow</anchor>
            <arglist>(WId window, int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPixmap</type>
            <name>grabWidget</name>
            <anchorfile>qpixmap-obsolete.html</anchorfile>
            <anchor>grabWidget</anchor>
            <arglist>(QObject * widget, const QRect &amp; rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPixmap</type>
            <name>grabWidget</name>
            <anchorfile>qpixmap-obsolete.html</anchorfile>
            <anchor>grabWidget-2</anchor>
            <arglist>(QObject * widget, int x, int y, int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>scaled</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>scaled-2</anchor>
            <arglist>(int width, int height, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>scaled</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>scaled</anchor>
            <arglist>(const QSize &amp; size, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>scaledToWidth</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>scaledToWidth</anchor>
            <arglist>(int width, Qt::TransformationMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>scaledToHeight</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>scaledToHeight</anchor>
            <arglist>(int height, Qt::TransformationMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>transformed</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>transformed-2</anchor>
            <arglist>(const QMatrix &amp; matrix, Qt::TransformationMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMatrix</type>
            <name>trueMatrix</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>trueMatrix-2</anchor>
            <arglist>(const QMatrix &amp; m, int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>transformed</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>transformed</anchor>
            <arglist>(const QTransform &amp; transform, Qt::TransformationMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTransform</type>
            <name>trueMatrix</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>trueMatrix</anchor>
            <arglist>(const QTransform &amp; matrix, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>toImage</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>toImage</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPixmap</type>
            <name>fromImage</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>fromImage</anchor>
            <arglist>(const QImage &amp; image, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPixmap</type>
            <name>fromImageReader</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>fromImageReader</anchor>
            <arglist>(QImageReader * imageReader, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(const QString &amp; fileName, const char * format, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>loadFromData</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>loadFromData</anchor>
            <arglist>(const uchar * data, uint len, const char * format, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>loadFromData</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>loadFromData-2</anchor>
            <arglist>(const QByteArray &amp; data, const char * format, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>save</anchor>
            <arglist>(const QString &amp; fileName, const char * format, int quality) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>save-2</anchor>
            <arglist>(QIODevice * device, const char * format, int quality) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>convertFromImage</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>convertFromImage</anchor>
            <arglist>(const QImage &amp; image, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>copy</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>copy-2</anchor>
            <arglist>(int x, int y, int width, int height) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>copy</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QRect &amp; rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scroll</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>scroll</anchor>
            <arglist>(int dx, int dy, int x, int y, int width, int height, QRegion * exposed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scroll</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>scroll-2</anchor>
            <arglist>(int dx, int dy, const QRect &amp; rect, QRegion * exposed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>serialNumber</name>
            <anchorfile>qpixmap-compat.html</anchorfile>
            <anchor>serialNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>cacheKey</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>cacheKey</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>detach</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>detach</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isQBitmap</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>isQBitmap</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!</name>
            <anchorfile>qpixmap.html</anchorfile>
            <anchor>operator!</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>alphaChannel</name>
            <anchorfile>qpixmap-compat.html</anchorfile>
            <anchor>alphaChannel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlphaChannel</name>
            <anchorfile>qpixmap-compat.html</anchorfile>
            <anchor>setAlphaChannel</anchor>
            <arglist>(const QPixmap &amp; p)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPixmapCache</name>
        <filename>qpixmapcache.html</filename>
        <class>QPixmapCache::Key</class>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>cacheLimit</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>cacheLimit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setCacheLimit</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>setCacheLimit</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPixmap *</type>
            <name>find</name>
            <anchorfile>qpixmapcache-obsolete.html</anchorfile>
            <anchor>find-4</anchor>
            <arglist>(const QString &amp; key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>find</name>
            <anchorfile>qpixmapcache-obsolete.html</anchorfile>
            <anchor>find-2</anchor>
            <arglist>(const QString &amp; key, QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>find</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const QString &amp; key, QPixmap * pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>find</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>find-3</anchor>
            <arglist>(const Key &amp; key, QPixmap * pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>insert</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const QString &amp; key, const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Key</type>
            <name>insert</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>replace</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(const Key &amp; key, const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QString &amp; key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>remove-2</anchor>
            <arglist>(const Key &amp; key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qpixmapcache.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPixmapCache::Key</name>
        <filename>qpixmapcache-key.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Key</name>
            <anchorfile>qpixmapcache-key.html</anchorfile>
            <anchor>Key</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~Key</name>
            <anchorfile>qpixmapcache-key.html</anchorfile>
            <anchor>dtor.Key</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStandardItem</name>
        <filename>qstandarditem.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStandardItem</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>QStandardItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStandardItem</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>QStandardItem-2</anchor>
            <arglist>(const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStandardItem</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>QStandardItem-3</anchor>
            <arglist>(const QIcon &amp; icon, const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStandardItem</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>QStandardItem-4</anchor>
            <arglist>(int rows, int columns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QStandardItem</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>dtor.QStandardItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setData</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QVariant &amp; value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>icon</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>icon</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIcon</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setIcon</anchor>
            <arglist>(const QIcon &amp; icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toolTip</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>toolTip</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToolTip</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setToolTip</anchor>
            <arglist>(const QString &amp; toolTip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>statusTip</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>statusTip</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatusTip</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setStatusTip</anchor>
            <arglist>(const QString &amp; statusTip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>whatsThis</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>whatsThis</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWhatsThis</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setWhatsThis</anchor>
            <arglist>(const QString &amp; whatsThis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>sizeHint</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizeHint</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setSizeHint</anchor>
            <arglist>(const QSize &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>font</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(const QFont &amp; font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>textAlignment</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>textAlignment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextAlignment</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setTextAlignment</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>background</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>background</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackground</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setBackground</anchor>
            <arglist>(const QBrush &amp; brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>foreground</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>foreground</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setForeground</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setForeground</anchor>
            <arglist>(const QBrush &amp; brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CheckState</type>
            <name>checkState</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>checkState</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCheckState</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setCheckState</anchor>
            <arglist>(Qt::CheckState state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>accessibleText</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>accessibleText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccessibleText</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setAccessibleText</anchor>
            <arglist>(const QString &amp; accessibleText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>accessibleDescription</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>accessibleDescription</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccessibleDescription</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setAccessibleDescription</anchor>
            <arglist>(const QString &amp; accessibleDescription)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(Qt::ItemFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>isEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEditable</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>isEditable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEditable</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setEditable</anchor>
            <arglist>(bool editable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSelectable</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>isSelectable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelectable</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setSelectable</anchor>
            <arglist>(bool selectable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCheckable</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>isCheckable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCheckable</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setCheckable</anchor>
            <arglist>(bool checkable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTristate</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>isTristate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTristate</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setTristate</anchor>
            <arglist>(bool tristate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDragEnabled</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>isDragEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDragEnabled</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setDragEnabled</anchor>
            <arglist>(bool dragEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDropEnabled</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>isDropEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDropEnabled</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setDropEnabled</anchor>
            <arglist>(bool dropEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>parent</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>row</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>row</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>column</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>column</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>index</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>index</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItemModel *</type>
            <name>model</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>model</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowCount</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowCount</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setRowCount</anchor>
            <arglist>(int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnCount</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnCount</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setColumnCount</anchor>
            <arglist>(int columns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasChildren</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>hasChildren</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>child</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>child</anchor>
            <arglist>(int row, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChild</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setChild</anchor>
            <arglist>(int row, int column, QStandardItem * item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChild</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>setChild-2</anchor>
            <arglist>(int row, QStandardItem * item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRow</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>insertRow</anchor>
            <arglist>(int row, const QList&lt;QStandardItem *&gt; &amp; items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertColumn</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>insertColumn</anchor>
            <arglist>(int column, const QList&lt;QStandardItem *&gt; &amp; items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRows</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>insertRows</anchor>
            <arglist>(int row, const QList&lt;QStandardItem *&gt; &amp; items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRows</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>insertRows-2</anchor>
            <arglist>(int row, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertColumns</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>insertColumns</anchor>
            <arglist>(int column, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeRow</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>removeRow</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeColumn</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>removeColumn</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeRows</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>removeRows</anchor>
            <arglist>(int row, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeColumns</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>removeColumns</anchor>
            <arglist>(int column, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendRow</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>appendRow</anchor>
            <arglist>(const QList&lt;QStandardItem *&gt; &amp; items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendRows</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>appendRows</anchor>
            <arglist>(const QList&lt;QStandardItem *&gt; &amp; items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendColumn</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>appendColumn</anchor>
            <arglist>(const QList&lt;QStandardItem *&gt; &amp; items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRow</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>insertRow-2</anchor>
            <arglist>(int row, QStandardItem * item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendRow</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>appendRow-2</anchor>
            <arglist>(QStandardItem * item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>takeChild</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>takeChild</anchor>
            <arglist>(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QStandardItem *&gt;</type>
            <name>takeRow</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>takeRow</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QStandardItem *&gt;</type>
            <name>takeColumn</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>takeColumn</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortChildren</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>sortChildren</anchor>
            <arglist>(int column, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStandardItem *</type>
            <name>clone</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>ItemType</name>
            <anchor>ItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Type">
            <anchor>ItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserType">
            <anchor>ItemType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>type</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>read</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(QDataStream &amp; in)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>write</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(QDataStream &amp; out) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>operator&lt;</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>operator&lt;</anchor>
            <arglist>(const QStandardItem &amp; other) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QStandardItem</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>QStandardItem-5</anchor>
            <arglist>(const QStandardItem &amp; other)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QStandardItem &amp;</type>
            <name>operator=</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QStandardItem &amp; other)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>emitDataChanged</name>
            <anchorfile>qstandarditem.html</anchorfile>
            <anchor>emitDataChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStandardItemModel</name>
        <filename>qstandarditemmodel.html</filename>
        <base>QAbstractItemModel</base>
        <member kind="property" type="int">
            <name>sortRole</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>sortRole-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStandardItemModel</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>QStandardItemModel</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStandardItemModel</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>QStandardItemModel-2</anchor>
            <arglist>(int rows, int columns, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStandardItemModel</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>dtor.QStandardItemModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemRoleNames</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setItemRoleNames</anchor>
            <arglist>(const QHash&lt;int, QByteArray&gt; &amp; roleNames)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>index</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp; parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>parent</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>(const QModelIndex &amp; child) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>rowCount</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>(const QModelIndex &amp; parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>columnCount</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>(const QModelIndex &amp; parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasChildren</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>hasChildren</anchor>
            <arglist>(const QModelIndex &amp; parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column, const QModelIndex &amp; idx) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QModelIndex &amp; index, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setData</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QModelIndex &amp; index, const QVariant &amp; value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>headerData</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>headerData</anchor>
            <arglist>(int section, Qt::Orientation orientation, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setHeaderData</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setHeaderData</anchor>
            <arglist>(int section, Qt::Orientation orientation, const QVariant &amp; value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertRows</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>insertRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp; parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertColumns</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>insertColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp; parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeRows</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>removeRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp; parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeColumns</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>removeColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp; parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp; index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDropActions</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>supportedDropActions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMap&lt;int, QVariant&gt;</type>
            <name>itemData</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>itemData</anchor>
            <arglist>(const QModelIndex &amp; index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setItemData</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setItemData</anchor>
            <arglist>(const QModelIndex &amp; index, const QMap&lt;int, QVariant&gt; &amp; roles)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sort</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>sort</anchor>
            <arglist>(int column, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>itemFromIndex</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>itemFromIndex</anchor>
            <arglist>(const QModelIndex &amp; index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>indexFromItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>indexFromItem</anchor>
            <arglist>(const QStandardItem * item) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>item</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>item</anchor>
            <arglist>(int row, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setItem</anchor>
            <arglist>(int row, int column, QStandardItem * item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setItem-2</anchor>
            <arglist>(int row, QStandardItem * item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>invisibleRootItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>invisibleRootItem</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>horizontalHeaderItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>horizontalHeaderItem</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalHeaderItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setHorizontalHeaderItem</anchor>
            <arglist>(int column, QStandardItem * item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>verticalHeaderItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>verticalHeaderItem</anchor>
            <arglist>(int row) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalHeaderItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setVerticalHeaderItem</anchor>
            <arglist>(int row, QStandardItem * item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHorizontalHeaderLabels</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setHorizontalHeaderLabels</anchor>
            <arglist>(const QStringList &amp; labels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalHeaderLabels</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setVerticalHeaderLabels</anchor>
            <arglist>(const QStringList &amp; labels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRowCount</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setRowCount</anchor>
            <arglist>(int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnCount</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setColumnCount</anchor>
            <arglist>(int columns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendRow</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>appendRow</anchor>
            <arglist>(const QList&lt;QStandardItem *&gt; &amp; items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendColumn</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>appendColumn</anchor>
            <arglist>(const QList&lt;QStandardItem *&gt; &amp; items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendRow</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>appendRow-2</anchor>
            <arglist>(QStandardItem * item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRow</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>insertRow</anchor>
            <arglist>(int row, const QList&lt;QStandardItem *&gt; &amp; items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertColumn</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>insertColumn</anchor>
            <arglist>(int column, const QList&lt;QStandardItem *&gt; &amp; items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRow</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>insertRow-3</anchor>
            <arglist>(int row, QStandardItem * item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>insertRow</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>insertRow-2</anchor>
            <arglist>(int row, const QModelIndex &amp; parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>insertColumn</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>insertColumn-2</anchor>
            <arglist>(int column, const QModelIndex &amp; parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>takeItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>takeItem</anchor>
            <arglist>(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QStandardItem *&gt;</type>
            <name>takeRow</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>takeRow</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QStandardItem *&gt;</type>
            <name>takeColumn</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>takeColumn</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>takeHorizontalHeaderItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>takeHorizontalHeaderItem</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStandardItem *</type>
            <name>takeVerticalHeaderItem</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>takeVerticalHeaderItem</anchor>
            <arglist>(int row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QStandardItem *</type>
            <name>itemPrototype</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>itemPrototype</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemPrototype</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>setItemPrototype</anchor>
            <arglist>(const QStandardItem * item)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QStandardItem *&gt;</type>
            <name>findItems</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>findItems</anchor>
            <arglist>(const QString &amp; text, Qt::MatchFlags flags, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sortRole</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>sortRole-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortRole</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>sortRole-prop</anchor>
            <arglist>(int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>mimeTypes</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>mimeTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>(const QModelIndexList &amp; indexes) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData * data, Qt::DropAction action, int row, int column, const QModelIndex &amp; parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemChanged</name>
            <anchorfile>qstandarditemmodel.html</anchorfile>
            <anchor>itemChanged</anchor>
            <arglist>(QStandardItem * item)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QClipboard</name>
        <filename>qclipboard.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>Mode</name>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Clipboard">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Selection">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FindBuffer">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LastMode">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>(Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsSelection</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>supportsSelection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsFindBuffer</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>supportsFindBuffer</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>ownsSelection</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>ownsSelection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>ownsClipboard</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>ownsClipboard</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>ownsFindBuffer</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>ownsFindBuffer</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>text</anchor>
            <arglist>(Mode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>text-2</anchor>
            <arglist>(QString &amp; subtype, Mode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp; text, Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>(Mode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMimeData</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>setMimeData</anchor>
            <arglist>(QMimeData * src, Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>image</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>image</anchor>
            <arglist>(Mode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>pixmap</anchor>
            <arglist>(Mode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImage</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>setImage</anchor>
            <arglist>(const QImage &amp; image, Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixmap</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>setPixmap</anchor>
            <arglist>(const QPixmap &amp; pixmap, Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>changed</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>changed</anchor>
            <arglist>(QClipboard::Mode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectionChanged</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>selectionChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>findBufferChanged</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>findBufferChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataChanged</name>
            <anchorfile>qclipboard.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCursor</name>
        <filename>qcursor.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCursor</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>QCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCursor</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>QCursor-2</anchor>
            <arglist>(Qt::CursorShape shape)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCursor</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>QCursor-3</anchor>
            <arglist>(const QBitmap &amp; bitmap, const QBitmap &amp; mask, int hotX, int hotY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCursor</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>QCursor-4</anchor>
            <arglist>(const QPixmap &amp; pixmap, int hotX, int hotY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCursor</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>QCursor-5</anchor>
            <arglist>(const QCursor &amp; c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCursor</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>dtor.QCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCursor &amp;</type>
            <name>operator=</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QCursor &amp; c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CursorShape</type>
            <name>shape</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>shape</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShape</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>setShape</anchor>
            <arglist>(Qt::CursorShape shape)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBitmap *</type>
            <name>bitmap</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>bitmap</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBitmap *</type>
            <name>mask</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>mask</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>pixmap</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>hotSpot</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>hotSpot</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>pos-2</anchor>
            <arglist>(const QScreen * screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setPos</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>setPos</anchor>
            <arglist>(int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setPos</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>setPos-2</anchor>
            <arglist>(QScreen * screen, int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setPos</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>setPos-3</anchor>
            <arglist>(const QPoint &amp; p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setPos</name>
            <anchorfile>qcursor.html</anchorfile>
            <anchor>setPos-4</anchor>
            <arglist>(QScreen * screen, const QPoint &amp; p)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDrag</name>
        <filename>qdrag.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDrag</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>QDrag</anchor>
            <arglist>(QObject * dragSource)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDrag</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>dtor.QDrag</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMimeData</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>setMimeData</anchor>
            <arglist>(QMimeData * data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixmap</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>setPixmap</anchor>
            <arglist>(const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>pixmap</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>pixmap</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHotSpot</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>setHotSpot</anchor>
            <arglist>(const QPoint &amp; hotspot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>hotSpot</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>hotSpot</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>source</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>target</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>target</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropAction</type>
            <name>start</name>
            <anchorfile>qdrag-obsolete.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(Qt::DropActions request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropAction</type>
            <name>exec</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>exec</anchor>
            <arglist>(Qt::DropActions supportedActions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropAction</type>
            <name>exec</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>exec-2</anchor>
            <arglist>(Qt::DropActions supportedActions, Qt::DropAction defaultDropAction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDragCursor</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>setDragCursor</anchor>
            <arglist>(const QPixmap &amp; cursor, Qt::DropAction action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>dragCursor</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>dragCursor</anchor>
            <arglist>(Qt::DropAction action) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropActions</type>
            <name>supportedActions</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>supportedActions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropAction</type>
            <name>defaultAction</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>defaultAction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>actionChanged</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>actionChanged</anchor>
            <arglist>(Qt::DropAction action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>targetChanged</name>
            <anchorfile>qdrag.html</anchorfile>
            <anchor>targetChanged</anchor>
            <arglist>(QObject * newTarget)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QInputEvent</name>
        <filename>qinputevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::KeyboardModifiers</type>
            <name>modifiers</name>
            <anchorfile>qinputevent.html</anchorfile>
            <anchor>modifiers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ulong</type>
            <name>timestamp</name>
            <anchorfile>qinputevent.html</anchorfile>
            <anchor>timestamp</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QEnterEvent</name>
        <filename>qenterevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEnterEvent</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>QEnterEvent</anchor>
            <arglist>(const QPointF &amp; localPos, const QPointF &amp; windowPos, const QPointF &amp; screenPos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>globalPos</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>globalPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalX</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>globalX</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalY</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>globalY</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>localPos</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>localPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>windowPos</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>windowPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>screenPos</name>
            <anchorfile>qenterevent.html</anchorfile>
            <anchor>screenPos</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMouseEvent</name>
        <filename>qmouseevent.html</filename>
        <base>QInputEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseEvent</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>QMouseEvent</anchor>
            <arglist>(Type type, const QPointF &amp; localPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseEvent</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>QMouseEvent-2</anchor>
            <arglist>(Type type, const QPointF &amp; localPos, const QPointF &amp; screenPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMouseEvent</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>QMouseEvent-3</anchor>
            <arglist>(Type type, const QPointF &amp; localPos, const QPointF &amp; windowPos, const QPointF &amp; screenPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>globalPos</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>globalPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalX</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>globalX</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalY</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>globalY</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>localPos</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>localPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>windowPos</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>windowPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>screenPos</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>screenPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButton</type>
            <name>button</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>button</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButtons</type>
            <name>buttons</name>
            <anchorfile>qmouseevent.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>posF</name>
            <anchorfile>qmouseevent-compat.html</anchorfile>
            <anchor>posF</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHoverEvent</name>
        <filename>qhoverevent.html</filename>
        <base>QInputEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHoverEvent</name>
            <anchorfile>qhoverevent.html</anchorfile>
            <anchor>QHoverEvent</anchor>
            <arglist>(Type type, const QPointF &amp; pos, const QPointF &amp; oldPos, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qhoverevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>oldPos</name>
            <anchorfile>qhoverevent.html</anchorfile>
            <anchor>oldPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>posF</name>
            <anchorfile>qhoverevent.html</anchorfile>
            <anchor>posF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>oldPosF</name>
            <anchorfile>qhoverevent.html</anchorfile>
            <anchor>oldPosF</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWheelEvent</name>
        <filename>qwheelevent.html</filename>
        <base>QInputEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWheelEvent</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>QWheelEvent-3</anchor>
            <arglist>(const QPointF &amp; pos, int delta, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::Orientation orient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWheelEvent</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>QWheelEvent-2</anchor>
            <arglist>(const QPointF &amp; pos, const QPointF &amp; globalPos, int delta, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::Orientation orient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWheelEvent</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>QWheelEvent</anchor>
            <arglist>(const QPointF &amp; pos, const QPointF &amp; globalPos, QPoint pixelDelta, QPoint angleDelta, int qt4Delta, Qt::Orientation qt4Orientation, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>pixelDelta</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>pixelDelta</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>angleDelta</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>angleDelta</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>delta</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>delta</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Orientation</type>
            <name>orientation</name>
            <anchorfile>qwheelevent-obsolete.html</anchorfile>
            <anchor>orientation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>globalPos</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>globalPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalX</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>globalX</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalY</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>globalY</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>posF</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>posF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>globalPosF</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>globalPosF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButtons</type>
            <name>buttons</name>
            <anchorfile>qwheelevent.html</anchorfile>
            <anchor>buttons</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTabletEvent</name>
        <filename>qtabletevent.html</filename>
        <base>QInputEvent</base>
        <member kind="enum">
            <name>TabletDevice</name>
            <anchor>TabletDevice-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoDevice">
            <anchor>TabletDevice-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Puck">
            <anchor>TabletDevice-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Stylus">
            <anchor>TabletDevice-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Airbrush">
            <anchor>TabletDevice-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FourDMouse">
            <anchor>TabletDevice-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="XFreeEraser">
            <anchor>TabletDevice-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RotationStylus">
            <anchor>TabletDevice-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PointerType</name>
            <anchor>PointerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownPointer">
            <anchor>PointerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Pen">
            <anchor>PointerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cursor">
            <anchor>PointerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Eraser">
            <anchor>PointerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTabletEvent</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>QTabletEvent</anchor>
            <arglist>(Type type, const QPointF &amp; pos, const QPointF &amp; globalPos, int device, int pointerType, qreal pressure, int xTilt, int yTilt, qreal tangentialPressure, qreal rotation, int z, Qt::KeyboardModifiers keyState, qint64 uniqueID)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>globalPos</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>globalPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>hiResGlobalPos</name>
            <anchorfile>qtabletevent-compat.html</anchorfile>
            <anchor>hiResGlobalPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>posF</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>posF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>globalPosF</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>globalPosF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalX</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>globalX</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalY</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>globalY</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>hiResGlobalX</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>hiResGlobalX</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>hiResGlobalY</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>hiResGlobalY</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TabletDevice</type>
            <name>device</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PointerType</type>
            <name>pointerType</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>pointerType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>uniqueId</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>uniqueId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>pressure</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>pressure</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>z</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>z</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>tangentialPressure</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>tangentialPressure</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rotation</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>rotation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>xTilt</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>xTilt</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>yTilt</name>
            <anchorfile>qtabletevent.html</anchorfile>
            <anchor>yTilt</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QKeyEvent</name>
        <filename>qkeyevent.html</filename>
        <base>QInputEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyEvent</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>QKeyEvent</anchor>
            <arglist>(Type type, int key, Qt::KeyboardModifiers modifiers, const QString &amp; text, bool autorep, ushort count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyEvent</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>QKeyEvent-2</anchor>
            <arglist>(Type type, int key, Qt::KeyboardModifiers modifiers, quint32 nativeScanCode, quint32 nativeVirtualKey, quint32 nativeModifiers, const QString &amp; text, bool autorep, ushort count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>key</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>matches</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>matches</anchor>
            <arglist>(QKeySequence::StandardKey key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::KeyboardModifiers</type>
            <name>modifiers</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>modifiers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAutoRepeat</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>isAutoRepeat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>nativeScanCode</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>nativeScanCode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>nativeVirtualKey</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>nativeVirtualKey</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>nativeModifiers</name>
            <anchorfile>qkeyevent.html</anchorfile>
            <anchor>nativeModifiers</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFocusEvent</name>
        <filename>qfocusevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFocusEvent</name>
            <anchorfile>qfocusevent.html</anchorfile>
            <anchor>QFocusEvent</anchor>
            <arglist>(Type type, Qt::FocusReason reason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>gotFocus</name>
            <anchorfile>qfocusevent.html</anchorfile>
            <anchor>gotFocus</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>lostFocus</name>
            <anchorfile>qfocusevent.html</anchorfile>
            <anchor>lostFocus</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::FocusReason</type>
            <name>reason</name>
            <anchorfile>qfocusevent.html</anchorfile>
            <anchor>reason</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPaintEvent</name>
        <filename>qpaintevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPaintEvent</name>
            <anchorfile>qpaintevent.html</anchorfile>
            <anchor>QPaintEvent</anchor>
            <arglist>(const QRegion &amp; paintRegion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPaintEvent</name>
            <anchorfile>qpaintevent.html</anchorfile>
            <anchor>QPaintEvent-2</anchor>
            <arglist>(const QRect &amp; paintRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRect &amp;</type>
            <name>rect</name>
            <anchorfile>qpaintevent.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion &amp;</type>
            <name>region</name>
            <anchorfile>qpaintevent.html</anchorfile>
            <anchor>region</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMoveEvent</name>
        <filename>qmoveevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMoveEvent</name>
            <anchorfile>qmoveevent.html</anchorfile>
            <anchor>QMoveEvent</anchor>
            <arglist>(const QPoint &amp; pos, const QPoint &amp; oldPos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPoint &amp;</type>
            <name>pos</name>
            <anchorfile>qmoveevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPoint &amp;</type>
            <name>oldPos</name>
            <anchorfile>qmoveevent.html</anchorfile>
            <anchor>oldPos</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QExposeEvent</name>
        <filename>qexposeevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QExposeEvent</name>
            <anchorfile>qexposeevent.html</anchorfile>
            <anchor>QExposeEvent</anchor>
            <arglist>(const QRegion &amp; exposeRegion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion &amp;</type>
            <name>region</name>
            <anchorfile>qexposeevent.html</anchorfile>
            <anchor>region</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QResizeEvent</name>
        <filename>qresizeevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QResizeEvent</name>
            <anchorfile>qresizeevent.html</anchorfile>
            <anchor>QResizeEvent</anchor>
            <arglist>(const QSize &amp; size, const QSize &amp; oldSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QSize &amp;</type>
            <name>size</name>
            <anchorfile>qresizeevent.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QSize &amp;</type>
            <name>oldSize</name>
            <anchorfile>qresizeevent.html</anchorfile>
            <anchor>oldSize</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCloseEvent</name>
        <filename>qcloseevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCloseEvent</name>
            <anchorfile>qcloseevent.html</anchorfile>
            <anchor>QCloseEvent</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIconDragEvent</name>
        <filename>qicondragevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIconDragEvent</name>
            <anchorfile>qicondragevent.html</anchorfile>
            <anchor>QIconDragEvent</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QShowEvent</name>
        <filename>qshowevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShowEvent</name>
            <anchorfile>qshowevent.html</anchorfile>
            <anchor>QShowEvent</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHideEvent</name>
        <filename>qhideevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHideEvent</name>
            <anchorfile>qhideevent.html</anchorfile>
            <anchor>QHideEvent</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContextMenuEvent</name>
        <filename>qcontextmenuevent.html</filename>
        <base>QInputEvent</base>
        <member kind="enum">
            <name>Reason</name>
            <anchor>Reason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mouse">
            <anchor>Reason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Keyboard">
            <anchor>Reason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Other">
            <anchor>Reason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContextMenuEvent</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>QContextMenuEvent</anchor>
            <arglist>(Reason reason, const QPoint &amp; pos, const QPoint &amp; globalPos, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContextMenuEvent</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>QContextMenuEvent-2</anchor>
            <arglist>(Reason reason, const QPoint &amp; pos, const QPoint &amp; globalPos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContextMenuEvent</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>QContextMenuEvent-3</anchor>
            <arglist>(Reason reason, const QPoint &amp; pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalX</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>globalX</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalY</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>globalY</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPoint &amp;</type>
            <name>pos</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPoint &amp;</type>
            <name>globalPos</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>globalPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Reason</type>
            <name>reason</name>
            <anchorfile>qcontextmenuevent.html</anchorfile>
            <anchor>reason</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QInputMethodEvent</name>
        <filename>qinputmethodevent.html</filename>
        <base>QEvent</base>
        <member kind="enum">
            <name>AttributeType</name>
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextFormat">
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cursor">
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Language">
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ruby">
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Selection">
            <anchor>AttributeType-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QInputMethodEvent::Attribute</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputMethodEvent</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>QInputMethodEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputMethodEvent</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>QInputMethodEvent-2</anchor>
            <arglist>(const QString &amp; preeditText, const QList&lt;Attribute&gt; &amp; attributes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCommitString</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>setCommitString</anchor>
            <arglist>(const QString &amp; commitString, int replaceFrom, int replaceLength)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QList&lt;Attribute&gt; &amp;</type>
            <name>attributes</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QString &amp;</type>
            <name>preeditString</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>preeditString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QString &amp;</type>
            <name>commitString</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>commitString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>replacementStart</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>replacementStart</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>replacementLength</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>replacementLength</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputMethodEvent</name>
            <anchorfile>qinputmethodevent.html</anchorfile>
            <anchor>QInputMethodEvent-3</anchor>
            <arglist>(const QInputMethodEvent &amp; other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QInputMethodEvent::Attribute</name>
        <filename>qinputmethodevent-attribute.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Attribute</name>
            <anchorfile>qinputmethodevent-attribute.html</anchorfile>
            <anchor>Attribute</anchor>
            <arglist>(AttributeType type, int start, int length, QVariant value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QInputMethodQueryEvent</name>
        <filename>qinputmethodqueryevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QInputMethodQueryEvent</name>
            <anchorfile>qinputmethodqueryevent.html</anchorfile>
            <anchor>QInputMethodQueryEvent</anchor>
            <arglist>(Qt::InputMethodQueries queries)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::InputMethodQueries</type>
            <name>queries</name>
            <anchorfile>qinputmethodqueryevent.html</anchorfile>
            <anchor>queries</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qinputmethodqueryevent.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(Qt::InputMethodQuery query, const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qinputmethodqueryevent.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(Qt::InputMethodQuery query) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDropEvent</name>
        <filename>qdropevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDropEvent</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>QDropEvent</anchor>
            <arglist>(const QPointF &amp; pos, Qt::DropActions actions, const QMimeData * data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>pos</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPointF &amp;</type>
            <name>posF</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>posF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::MouseButtons</type>
            <name>mouseButtons</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>mouseButtons</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::KeyboardModifiers</type>
            <name>keyboardModifiers</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>keyboardModifiers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropActions</type>
            <name>possibleActions</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>possibleActions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropAction</type>
            <name>proposedAction</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>proposedAction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>acceptProposedAction</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>acceptProposedAction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DropAction</type>
            <name>dropAction</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>dropAction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDropAction</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>setDropAction</anchor>
            <arglist>(Qt::DropAction action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>source</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qdropevent.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDragMoveEvent</name>
        <filename>qdragmoveevent.html</filename>
        <base>QDropEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDragMoveEvent</name>
            <anchorfile>qdragmoveevent.html</anchorfile>
            <anchor>QDragMoveEvent</anchor>
            <arglist>(const QPoint &amp; pos, Qt::DropActions actions, const QMimeData * data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDragMoveEvent</name>
            <anchorfile>qdragmoveevent.html</anchorfile>
            <anchor>dtor.QDragMoveEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>answerRect</name>
            <anchorfile>qdragmoveevent.html</anchorfile>
            <anchor>answerRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accept</name>
            <anchorfile>qdragmoveevent.html</anchorfile>
            <anchor>accept-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignore</name>
            <anchorfile>qdragmoveevent.html</anchorfile>
            <anchor>ignore-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accept</name>
            <anchorfile>qdragmoveevent.html</anchorfile>
            <anchor>accept</anchor>
            <arglist>(const QRect &amp; rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignore</name>
            <anchorfile>qdragmoveevent.html</anchorfile>
            <anchor>ignore</anchor>
            <arglist>(const QRect &amp; rectangle)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDragEnterEvent</name>
        <filename>qdragenterevent.html</filename>
        <base>QDragMoveEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDragEnterEvent</name>
            <anchorfile>qdragenterevent.html</anchorfile>
            <anchor>QDragEnterEvent</anchor>
            <arglist>(const QPoint &amp; point, Qt::DropActions actions, const QMimeData * data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDragLeaveEvent</name>
        <filename>qdragleaveevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDragLeaveEvent</name>
            <anchorfile>qdragleaveevent.html</anchorfile>
            <anchor>QDragLeaveEvent</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHelpEvent</name>
        <filename>qhelpevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHelpEvent</name>
            <anchorfile>qhelpevent.html</anchorfile>
            <anchor>QHelpEvent</anchor>
            <arglist>(Type type, const QPoint &amp; pos, const QPoint &amp; globalPos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qhelpevent.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qhelpevent.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalX</name>
            <anchorfile>qhelpevent.html</anchorfile>
            <anchor>globalX</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>globalY</name>
            <anchorfile>qhelpevent.html</anchorfile>
            <anchor>globalY</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPoint &amp;</type>
            <name>pos</name>
            <anchorfile>qhelpevent.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPoint &amp;</type>
            <name>globalPos</name>
            <anchorfile>qhelpevent.html</anchorfile>
            <anchor>globalPos</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStatusTipEvent</name>
        <filename>qstatustipevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStatusTipEvent</name>
            <anchorfile>qstatustipevent.html</anchorfile>
            <anchor>QStatusTipEvent</anchor>
            <arglist>(const QString &amp; tip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>tip</name>
            <anchorfile>qstatustipevent.html</anchorfile>
            <anchor>tip</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWhatsThisClickedEvent</name>
        <filename>qwhatsthisclickedevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWhatsThisClickedEvent</name>
            <anchorfile>qwhatsthisclickedevent.html</anchorfile>
            <anchor>QWhatsThisClickedEvent</anchor>
            <arglist>(const QString &amp; href)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>href</name>
            <anchorfile>qwhatsthisclickedevent.html</anchorfile>
            <anchor>href</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QActionEvent</name>
        <filename>qactionevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QActionEvent</name>
            <anchorfile>qactionevent.html</anchorfile>
            <anchor>QActionEvent</anchor>
            <arglist>(int type, QAction * action, QAction * before)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>action</name>
            <anchorfile>qactionevent.html</anchorfile>
            <anchor>action</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAction *</type>
            <name>before</name>
            <anchorfile>qactionevent.html</anchorfile>
            <anchor>before</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFileOpenEvent</name>
        <filename>qfileopenevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>file</name>
            <anchorfile>qfileopenevent.html</anchorfile>
            <anchor>file</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qfileopenevent.html</anchorfile>
            <anchor>url</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>openFile</name>
            <anchorfile>qfileopenevent.html</anchorfile>
            <anchor>openFile</anchor>
            <arglist>(QFile &amp; file, QIODevice::OpenMode flags) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QShortcutEvent</name>
        <filename>qshortcutevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShortcutEvent</name>
            <anchorfile>qshortcutevent.html</anchorfile>
            <anchor>QShortcutEvent</anchor>
            <arglist>(const QKeySequence &amp; key, int id, bool ambiguous)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QShortcutEvent</name>
            <anchorfile>qshortcutevent.html</anchorfile>
            <anchor>dtor.QShortcutEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QKeySequence &amp;</type>
            <name>key</name>
            <anchorfile>qshortcutevent.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>shortcutId</name>
            <anchorfile>qshortcutevent.html</anchorfile>
            <anchor>shortcutId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAmbiguous</name>
            <anchorfile>qshortcutevent.html</anchorfile>
            <anchor>isAmbiguous</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWindowStateChangeEvent</name>
        <filename>qwindowstatechangeevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowStates</type>
            <name>oldState</name>
            <anchorfile>qwindowstatechangeevent.html</anchorfile>
            <anchor>oldState</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTouchEvent</name>
        <filename>qtouchevent.html</filename>
        <base>QInputEvent</base>
        <class>QTouchEvent::TouchPoint</class>
        <member kind="enum">
            <name>DeviceType</name>
            <anchor>DeviceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TouchScreen">
            <anchor>DeviceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TouchPad">
            <anchor>DeviceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTouchEvent</name>
            <anchorfile>qtouchevent.html</anchorfile>
            <anchor>QTouchEvent</anchor>
            <arglist>(QEvent::Type eventType, QTouchDevice * device, Qt::KeyboardModifiers modifiers, Qt::TouchPointStates touchPointStates, const QList&lt;QTouchEvent::TouchPoint&gt; &amp; touchPoints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTouchEvent</name>
            <anchorfile>qtouchevent.html</anchorfile>
            <anchor>dtor.QTouchEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWindow *</type>
            <name>window</name>
            <anchorfile>qtouchevent.html</anchorfile>
            <anchor>window</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>target</name>
            <anchorfile>qtouchevent.html</anchorfile>
            <anchor>target</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTouchEvent::DeviceType</type>
            <name>deviceType</name>
            <anchorfile>qtouchevent-compat.html</anchorfile>
            <anchor>deviceType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TouchPointStates</type>
            <name>touchPointStates</name>
            <anchorfile>qtouchevent.html</anchorfile>
            <anchor>touchPointStates</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QList&lt;QTouchEvent::TouchPoint&gt; &amp;</type>
            <name>touchPoints</name>
            <anchorfile>qtouchevent.html</anchorfile>
            <anchor>touchPoints</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTouchDevice *</type>
            <name>device</name>
            <anchorfile>qtouchevent.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTouchEvent::TouchPoint</name>
        <filename>qtouchevent-touchpoint.html</filename>
        <member kind="enum">
            <name>InfoFlag</name>
            <anchor>InfoFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Pen">
            <anchor>InfoFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTouchEvent::TouchPoint::InfoFlag">
            <name>InfoFlags</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>InfoFlags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>id</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TouchPointState</type>
            <name>state</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>pos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>startPos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>startPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>lastPos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>lastPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>scenePos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>scenePos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>startScenePos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>startScenePos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>lastScenePos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>lastScenePos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>screenPos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>screenPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>startScreenPos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>startScreenPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>lastScreenPos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>lastScreenPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>normalizedPos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>normalizedPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>startNormalizedPos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>startNormalizedPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>lastNormalizedPos</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>lastNormalizedPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>rect</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>sceneRect</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>sceneRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>screenRect</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>screenRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>pressure</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>pressure</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>velocity</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>velocity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>InfoFlags</type>
            <name>flags</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QPointF&gt;</type>
            <name>rawScreenPositions</name>
            <anchorfile>qtouchevent-touchpoint.html</anchorfile>
            <anchor>rawScreenPositions</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScrollPrepareEvent</name>
        <filename>qscrollprepareevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScrollPrepareEvent</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>QScrollPrepareEvent</anchor>
            <arglist>(const QPointF &amp; startPos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScrollPrepareEvent</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>dtor.QScrollPrepareEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>startPos</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>startPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>viewportSize</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>viewportSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>contentPosRange</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>contentPosRange</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>contentPos</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>contentPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewportSize</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>setViewportSize</anchor>
            <arglist>(const QSizeF &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentPosRange</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>setContentPosRange</anchor>
            <arglist>(const QRectF &amp; rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContentPos</name>
            <anchorfile>qscrollprepareevent.html</anchorfile>
            <anchor>setContentPos</anchor>
            <arglist>(const QPointF &amp; pos)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScrollEvent</name>
        <filename>qscrollevent.html</filename>
        <base>QEvent</base>
        <member kind="enum">
            <name>ScrollState</name>
            <anchor>ScrollState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScrollStarted">
            <anchor>ScrollState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScrollUpdated">
            <anchor>ScrollState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScrollFinished">
            <anchor>ScrollState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScrollEvent</name>
            <anchorfile>qscrollevent.html</anchorfile>
            <anchor>QScrollEvent</anchor>
            <arglist>(const QPointF &amp; contentPos, const QPointF &amp; overshootDistance, ScrollState scrollState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScrollEvent</name>
            <anchorfile>qscrollevent.html</anchorfile>
            <anchor>dtor.QScrollEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>contentPos</name>
            <anchorfile>qscrollevent.html</anchorfile>
            <anchor>contentPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>overshootDistance</name>
            <anchorfile>qscrollevent.html</anchorfile>
            <anchor>overshootDistance</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ScrollState</type>
            <name>scrollState</name>
            <anchorfile>qscrollevent.html</anchorfile>
            <anchor>scrollState</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGenericPlugin</name>
        <filename>qgenericplugin.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGenericPlugin</name>
            <anchorfile>qgenericplugin.html</anchorfile>
            <anchor>QGenericPlugin</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGenericPlugin</name>
            <anchorfile>qgenericplugin.html</anchorfile>
            <anchor>dtor.QGenericPlugin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QObject *</type>
            <name>create</name>
            <anchorfile>qgenericplugin.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const QString &amp; key, const QString &amp; specification) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGenericPluginFactory</name>
        <filename>qgenericpluginfactory.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>keys</name>
            <anchorfile>qgenericpluginfactory.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QObject *</type>
            <name>create</name>
            <anchorfile>qgenericpluginfactory.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const QString &amp; key, const QString &amp; specification)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGuiApplication</name>
        <filename>qguiapplication.html</filename>
        <base>QCoreApplication</base>
        <member kind="property" type="QString">
            <name>applicationDisplayName</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>applicationDisplayName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::LayoutDirection">
            <name>layoutDirection</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>layoutDirection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>platformName</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>platformName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>quitOnLastWindowClosed</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>quitOnLastWindowClosed-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGuiApplication</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>QGuiApplication</anchor>
            <arglist>(int &amp; argc, char ** argv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGuiApplication</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>dtor.QGuiApplication</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setApplicationDisplayName</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>applicationDisplayName-prop</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>applicationDisplayName</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>applicationDisplayName-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWindowList</type>
            <name>allWindows</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>allWindows</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWindowList</type>
            <name>topLevelWindows</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>topLevelWindows</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWindow *</type>
            <name>topLevelAt</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>topLevelAt</anchor>
            <arglist>(const QPoint &amp; pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>platformName</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>platformName-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWindow *</type>
            <name>modalWindow</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>modalWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QWindow *</type>
            <name>focusWindow</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>focusWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QObject *</type>
            <name>focusObject</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>focusObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QScreen *</type>
            <name>primaryScreen</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>primaryScreen</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QScreen *&gt;</type>
            <name>screens</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>screens</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>devicePixelRatio</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>devicePixelRatio</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCursor *</type>
            <name>overrideCursor</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>overrideCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setOverrideCursor</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>setOverrideCursor</anchor>
            <arglist>(const QCursor &amp; cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>changeOverrideCursor</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>changeOverrideCursor</anchor>
            <arglist>(const QCursor &amp; cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>restoreOverrideCursor</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>restoreOverrideCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>font</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(const QFont &amp; font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QClipboard *</type>
            <name>clipboard</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>clipboard</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPalette</type>
            <name>palette</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>palette</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setPalette</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>setPalette</anchor>
            <arglist>(const QPalette &amp; pal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::KeyboardModifiers</type>
            <name>keyboardModifiers</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>keyboardModifiers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::KeyboardModifiers</type>
            <name>queryKeyboardModifiers</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>queryKeyboardModifiers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::MouseButtons</type>
            <name>mouseButtons</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>mouseButtons</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setLayoutDirection</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>layoutDirection-prop</anchor>
            <arglist>(Qt::LayoutDirection direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::LayoutDirection</type>
            <name>layoutDirection</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>layoutDirection-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isRightToLeft</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>isRightToLeft</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isLeftToRight</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>isLeftToRight</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStyleHints *</type>
            <name>styleHints</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>styleHints</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDesktopSettingsAware</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>setDesktopSettingsAware</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>desktopSettingsAware</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>desktopSettingsAware</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QInputMethod *</type>
            <name>inputMethod</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>inputMethod</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPlatformNativeInterface *</type>
            <name>platformNativeInterface</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>platformNativeInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setQuitOnLastWindowClosed</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>quitOnLastWindowClosed-prop</anchor>
            <arglist>(bool quit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>quitOnLastWindowClosed</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>quitOnLastWindowClosed-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>exec</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>exec</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>notify</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>notify</anchor>
            <arglist>(QObject * object, QEvent * event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSessionRestored</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>isSessionRestored</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sessionId</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>sessionId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sessionKey</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>sessionKey</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSavingSession</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>isSavingSession</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fontDatabaseChanged</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>fontDatabaseChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>screenAdded</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>screenAdded</anchor>
            <arglist>(QScreen * screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lastWindowClosed</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>lastWindowClosed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>focusObjectChanged</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>focusObjectChanged</anchor>
            <arglist>(QObject * focusObject)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>focusWindowChanged</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>focusWindowChanged</anchor>
            <arglist>(QWindow * focusWindow)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>commitDataRequest</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>commitDataRequest</anchor>
            <arglist>(QSessionManager &amp; manager)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>saveStateRequest</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>saveStateRequest</anchor>
            <arglist>(QSessionManager &amp; manager)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qguiapplication.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent * e)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QInputMethod</name>
        <filename>qinputmethod.html</filename>
        <base>QObject</base>
        <member kind="property" type="QRectF">
            <name>cursorRectangle</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>cursorRectangle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRectF">
            <name>keyboardRectangle</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>keyboardRectangle-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>visible</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>animating</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>animating-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QLocale">
            <name>locale</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>locale-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::LayoutDirection">
            <name>inputDirection</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>inputDirection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>inputItemTransform</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>inputItemTransform</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputItemTransform</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>setInputItemTransform</anchor>
            <arglist>(const QTransform &amp; transform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>cursorRectangle</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>cursorRectangle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>keyboardRectangle</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>keyboardRectangle-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>Action</name>
            <anchor>Action-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Click">
            <anchor>Action-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContextMenu">
            <anchor>Action-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVisible</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisible</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>setVisible</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAnimating</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>animating-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>locale</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>locale-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::LayoutDirection</type>
            <name>inputDirection</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>inputDirection-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>show</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>show</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hide</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>hide</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(Qt::InputMethodQueries queries)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>commit</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>commit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>invokeAction</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>invokeAction</anchor>
            <arglist>(Action a, int cursorPosition)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cursorRectangleChanged</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>cursorRectangle-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>keyboardRectangleChanged</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>keyboardRectangle-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>visibleChanged</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>animatingChanged</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>animating-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>localeChanged</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>locale-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>inputDirectionChanged</name>
            <anchorfile>qinputmethod.html</anchorfile>
            <anchor>inputDirection-prop</anchor>
            <arglist>(Qt::LayoutDirection newDirection)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QKeySequence</name>
        <filename>qkeysequence.html</filename>
        <member kind="enum">
            <name>StandardKey</name>
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownKey">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HelpContents">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhatsThis">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Open">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Close">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Save">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="New">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Delete">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cut">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Copy">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Paste">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Undo">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Redo">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Back">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Forward">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Refresh">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ZoomIn">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ZoomOut">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Print">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AddTab">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NextChild">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreviousChild">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Find">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FindNext">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FindPrevious">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Replace">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectAll">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bold">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Italic">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Underline">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveToNextChar">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveToPreviousChar">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveToNextWord">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveToPreviousWord">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveToNextLine">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveToPreviousLine">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveToNextPage">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveToPreviousPage">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveToStartOfLine">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveToEndOfLine">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveToStartOfBlock">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveToEndOfBlock">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveToStartOfDocument">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveToEndOfDocument">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectNextChar">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectPreviousChar">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectNextWord">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectPreviousWord">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectNextLine">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectPreviousLine">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectNextPage">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectPreviousPage">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectStartOfLine">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectEndOfLine">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectStartOfBlock">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectEndOfBlock">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectStartOfDocument">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectEndOfDocument">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeleteStartOfWord">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeleteEndOfWord">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeleteEndOfLine">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InsertParagraphSeparator">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InsertLineSeparator">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SaveAs">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Preferences">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Quit">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FullScreen">
            <anchor>StandardKey-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SequenceFormat</name>
            <anchor>SequenceFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NativeText">
            <anchor>SequenceFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PortableText">
            <anchor>SequenceFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeySequence</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>QKeySequence</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeySequence</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>QKeySequence-2</anchor>
            <arglist>(const QString &amp; key, SequenceFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeySequence</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>QKeySequence-3</anchor>
            <arglist>(int k1, int k2, int k3, int k4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeySequence</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>QKeySequence-4</anchor>
            <arglist>(const QKeySequence &amp; keysequence)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeySequence</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>QKeySequence-5</anchor>
            <arglist>(StandardKey key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QKeySequence</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>dtor.QKeySequence</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>SequenceMatch</name>
            <anchor>SequenceMatch-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoMatch">
            <anchor>SequenceMatch-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PartialMatch">
            <anchor>SequenceMatch-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExactMatch">
            <anchor>SequenceMatch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(SequenceFormat format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QKeySequence</type>
            <name>fromString</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>fromString</anchor>
            <arglist>(const QString &amp; str, SequenceFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SequenceMatch</type>
            <name>matches</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>matches</anchor>
            <arglist>(const QKeySequence &amp; seq) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QKeySequence</type>
            <name>mnemonic</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>mnemonic</anchor>
            <arglist>(const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QKeySequence&gt;</type>
            <name>keyBindings</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>keyBindings</anchor>
            <arglist>(StandardKey key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QString</name>
            <anchorfile>qkeysequence-compat.html</anchorfile>
            <anchor>operator QString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator int</name>
            <anchorfile>qkeysequence-compat.html</anchorfile>
            <anchor>operator int</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>operator[]</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator[]</anchor>
            <arglist>(uint index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeySequence &amp;</type>
            <name>operator=</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QKeySequence &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QKeySequence &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QKeySequence &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QKeySequence &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator&lt;</anchor>
            <arglist>(const QKeySequence &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator&gt;</anchor>
            <arglist>(const QKeySequence &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator&lt;=</anchor>
            <arglist>(const QKeySequence &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qkeysequence.html</anchorfile>
            <anchor>operator&gt;=</anchor>
            <arglist>(const QKeySequence &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLContextGroup</name>
        <filename>qopenglcontextgroup.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOpenGLContext *&gt;</type>
            <name>shares</name>
            <anchorfile>qopenglcontextgroup.html</anchorfile>
            <anchor>shares</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QOpenGLContextGroup *</type>
            <name>currentContextGroup</name>
            <anchorfile>qopenglcontextgroup.html</anchorfile>
            <anchor>currentContextGroup</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLContext</name>
        <filename>qopenglcontext.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLContext</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>QOpenGLContext</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLContext</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>dtor.QOpenGLContext</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QSurfaceFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShareContext</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>setShareContext</anchor>
            <arglist>(QOpenGLContext * shareContext)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScreen</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>setScreen</anchor>
            <arglist>(QScreen * screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat</type>
            <name>format</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContext *</type>
            <name>shareContext</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>shareContext</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContextGroup *</type>
            <name>shareGroup</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>shareGroup</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScreen *</type>
            <name>screen</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>screen</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>defaultFramebufferObject</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>defaultFramebufferObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>makeCurrent</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>makeCurrent</anchor>
            <arglist>(QSurface * surface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>doneCurrent</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>doneCurrent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swapBuffers</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>swapBuffers</anchor>
            <arglist>(QSurface * surface)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFunctionPointer</type>
            <name>getProcAddress</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>getProcAddress</anchor>
            <arglist>(const QByteArray &amp; procName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurface *</type>
            <name>surface</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>surface</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QOpenGLContext *</type>
            <name>currentContext</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>currentContext</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>areSharing</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>areSharing</anchor>
            <arglist>(QOpenGLContext * first, QOpenGLContext * second)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFunctions *</type>
            <name>functions</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>functions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;QByteArray&gt;</type>
            <name>extensions</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>extensions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasExtension</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>hasExtension</anchor>
            <arglist>(const QByteArray &amp; extension) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aboutToBeDestroyed</name>
            <anchorfile>qopenglcontext.html</anchorfile>
            <anchor>aboutToBeDestroyed</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPalette</name>
        <filename>qpalette.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPalette</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>QPalette</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPalette</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>QPalette-2</anchor>
            <arglist>(const QColor &amp; button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPalette</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>QPalette-3</anchor>
            <arglist>(Qt::GlobalColor button)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPalette</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>QPalette-4</anchor>
            <arglist>(const QColor &amp; button, const QColor &amp; window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPalette</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>QPalette-5</anchor>
            <arglist>(const QBrush &amp; windowText, const QBrush &amp; button, const QBrush &amp; light, const QBrush &amp; dark, const QBrush &amp; mid, const QBrush &amp; text, const QBrush &amp; bright_text, const QBrush &amp; base, const QBrush &amp; window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPalette</name>
            <anchorfile>qpalette-obsolete.html</anchorfile>
            <anchor>QPalette-6</anchor>
            <arglist>(const QColor &amp; windowText, const QColor &amp; window, const QColor &amp; light, const QColor &amp; dark, const QColor &amp; mid, const QColor &amp; text, const QColor &amp; base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPalette</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>QPalette-7</anchor>
            <arglist>(const QPalette &amp; p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPalette</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>dtor.QPalette</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPalette &amp;</type>
            <name>operator=</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QPalette &amp; p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPalette &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>ColorGroup</name>
            <anchor>ColorGroup-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Active">
            <anchor>ColorGroup-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Disabled">
            <anchor>ColorGroup-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Inactive">
            <anchor>ColorGroup-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NColorGroups">
            <anchor>ColorGroup-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Current">
            <anchor>ColorGroup-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="All">
            <anchor>ColorGroup-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Normal">
            <anchor>ColorGroup-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ColorRole</name>
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindowText">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Button">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Light">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Midlight">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dark">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mid">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Text">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BrightText">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ButtonText">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Base">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Window">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Shadow">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Highlight">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HighlightedText">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Link">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinkVisited">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlternateBase">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoRole">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ToolTipBase">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ToolTipText">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NColorRoles">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Foreground">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Background">
            <anchor>ColorRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ColorGroup</type>
            <name>currentColorGroup</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>currentColorGroup</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentColorGroup</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>setCurrentColorGroup</anchor>
            <arglist>(ColorGroup cg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QColor &amp;</type>
            <name>color</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>color</anchor>
            <arglist>(ColorGroup group, ColorRole role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>brush</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>brush</anchor>
            <arglist>(ColorGroup group, ColorRole role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>setColor</anchor>
            <arglist>(ColorGroup group, ColorRole role, const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>setColor-2</anchor>
            <arglist>(ColorRole role, const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrush</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>setBrush</anchor>
            <arglist>(ColorRole role, const QBrush &amp; brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBrushSet</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>isBrushSet</anchor>
            <arglist>(ColorGroup cg, ColorRole cr) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrush</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>setBrush-2</anchor>
            <arglist>(ColorGroup group, ColorRole role, const QBrush &amp; brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColorGroup</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>setColorGroup</anchor>
            <arglist>(ColorGroup cg, const QBrush &amp; windowText, const QBrush &amp; button, const QBrush &amp; light, const QBrush &amp; dark, const QBrush &amp; mid, const QBrush &amp; text, const QBrush &amp; bright_text, const QBrush &amp; base, const QBrush &amp; window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEqual</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>isEqual</anchor>
            <arglist>(ColorGroup cg1, ColorGroup cg2) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QColor &amp;</type>
            <name>color</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>color-2</anchor>
            <arglist>(ColorRole role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>brush</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>brush-2</anchor>
            <arglist>(ColorRole role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>foreground</name>
            <anchorfile>qpalette-obsolete.html</anchorfile>
            <anchor>foreground</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>windowText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>windowText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>button</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>button</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>light</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>light</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>dark</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>dark</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>mid</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>mid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>text</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>base</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>base</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>alternateBase</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>alternateBase</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>toolTipBase</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>toolTipBase</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>toolTipText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>toolTipText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>background</name>
            <anchorfile>qpalette-obsolete.html</anchorfile>
            <anchor>background</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>window</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>window</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>midlight</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>midlight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>brightText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>brightText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>buttonText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>buttonText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>shadow</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>shadow</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>highlight</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>highlight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>highlightedText</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>highlightedText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>link</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>link</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>linkVisited</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>linkVisited</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QPalette &amp; p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QPalette &amp; p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCopyOf</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>isCopyOf</anchor>
            <arglist>(const QPalette &amp; p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>serialNumber</name>
            <anchorfile>qpalette-compat.html</anchorfile>
            <anchor>serialNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>cacheKey</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>cacheKey</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPalette</type>
            <name>resolve</name>
            <anchorfile>qpalette.html</anchorfile>
            <anchor>resolve</anchor>
            <arglist>(const QPalette &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPlatformSystemTrayIcon</name>
        <filename>qplatformsystemtrayicon.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>ActivationReason</name>
            <anchor>ActivationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unknown">
            <anchor>ActivationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Context">
            <anchor>ActivationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DoubleClick">
            <anchor>ActivationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Trigger">
            <anchor>ActivationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MiddleClick">
            <anchor>ActivationReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>MessageIcon</name>
            <anchor>MessageIcon-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoIcon">
            <anchor>MessageIcon-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Information">
            <anchor>MessageIcon-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Warning">
            <anchor>MessageIcon-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Critical">
            <anchor>MessageIcon-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>init</name>
            <anchorfile>qplatformsystemtrayicon.html</anchorfile>
            <anchor>init</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>cleanup</name>
            <anchorfile>qplatformsystemtrayicon.html</anchorfile>
            <anchor>cleanup</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>updateIcon</name>
            <anchorfile>qplatformsystemtrayicon.html</anchorfile>
            <anchor>updateIcon</anchor>
            <arglist>(const QIcon &amp; icon) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>updateToolTip</name>
            <anchorfile>qplatformsystemtrayicon.html</anchorfile>
            <anchor>updateToolTip</anchor>
            <arglist>(const QString &amp; tooltip) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>updateMenu</name>
            <anchorfile>qplatformsystemtrayicon.html</anchorfile>
            <anchor>updateMenu</anchor>
            <arglist>(QPlatformMenu * menu) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QRect</type>
            <name>geometry</name>
            <anchorfile>qplatformsystemtrayicon.html</anchorfile>
            <anchor>geometry</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>showMessage</name>
            <anchorfile>qplatformsystemtrayicon.html</anchorfile>
            <anchor>showMessage</anchor>
            <arglist>(const QString &amp; msg, const QString &amp; title, const QIcon &amp; icon, MessageIcon iconType, int secs) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isSystemTrayAvailable</name>
            <anchorfile>qplatformsystemtrayicon.html</anchorfile>
            <anchor>isSystemTrayAvailable</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>supportsMessages</name>
            <anchorfile>qplatformsystemtrayicon.html</anchorfile>
            <anchor>supportsMessages</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activated</name>
            <anchorfile>qplatformsystemtrayicon.html</anchorfile>
            <anchor>activated</anchor>
            <arglist>(QPlatformSystemTrayIcon::ActivationReason reason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>messageClicked</name>
            <anchorfile>qplatformsystemtrayicon.html</anchorfile>
            <anchor>messageClicked</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScreen</name>
        <filename>qscreen.html</filename>
        <base>QObject</base>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>depth</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>size</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>availableSize</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>virtualSize</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>virtualSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSize">
            <name>availableVirtualSize</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableVirtualSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRect">
            <name>geometry</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRect">
            <name>availableGeometry</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableGeometry-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRect">
            <name>virtualGeometry</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>virtualGeometry-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRect">
            <name>availableVirtualGeometry</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableVirtualGeometry-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSizeF">
            <name>physicalSize</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>physicalDotsPerInchX</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalDotsPerInchX-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>physicalDotsPerInchY</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalDotsPerInchY-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>physicalDotsPerInch</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalDotsPerInch-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>logicalDotsPerInchX</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>logicalDotsPerInchX-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>logicalDotsPerInchY</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>logicalDotsPerInchY-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>logicalDotsPerInch</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>logicalDotsPerInch-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ScreenOrientation">
            <name>primaryOrientation</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>primaryOrientation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ScreenOrientation">
            <name>orientation</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>refreshRate</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>refreshRate-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlatformScreen *</type>
            <name>handle</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>depth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>geometry</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>physicalSize</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>physicalDotsPerInchX</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalDotsPerInchX-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>physicalDotsPerInchY</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalDotsPerInchY-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>physicalDotsPerInch</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalDotsPerInch-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>logicalDotsPerInchX</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>logicalDotsPerInchX-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>logicalDotsPerInchY</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>logicalDotsPerInchY-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>logicalDotsPerInch</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>logicalDotsPerInch-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>devicePixelRatio</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>devicePixelRatio</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>availableSize</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>availableGeometry</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableGeometry-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QScreen *&gt;</type>
            <name>virtualSiblings</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>virtualSiblings</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>virtualSize</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>virtualSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>virtualGeometry</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>virtualGeometry-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>availableVirtualSize</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableVirtualSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>availableVirtualGeometry</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableVirtualGeometry-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ScreenOrientation</type>
            <name>primaryOrientation</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>primaryOrientation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ScreenOrientation</type>
            <name>orientation</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ScreenOrientations</type>
            <name>orientationUpdateMask</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>orientationUpdateMask</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrientationUpdateMask</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>setOrientationUpdateMask</anchor>
            <arglist>(Qt::ScreenOrientations mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>angleBetween</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>angleBetween</anchor>
            <arglist>(Qt::ScreenOrientation a, Qt::ScreenOrientation b) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>transformBetween</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>transformBetween</anchor>
            <arglist>(Qt::ScreenOrientation a, Qt::ScreenOrientation b, const QRect &amp; target) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>mapBetween</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>mapBetween</anchor>
            <arglist>(Qt::ScreenOrientation a, Qt::ScreenOrientation b, const QRect &amp; rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPortrait</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>isPortrait</anchor>
            <arglist>(Qt::ScreenOrientation o) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLandscape</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>isLandscape</anchor>
            <arglist>(Qt::ScreenOrientation o) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>grabWindow</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>grabWindow</anchor>
            <arglist>(WId window, int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>refreshRate</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>refreshRate-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>geometryChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>geometry-prop</anchor>
            <arglist>(const QRect &amp; geometry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>physicalSizeChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalSize-prop</anchor>
            <arglist>(const QSizeF &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>physicalDotsPerInchChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>physicalDotsPerInchY-prop</anchor>
            <arglist>(qreal dpi)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>logicalDotsPerInchChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>logicalDotsPerInchX-prop</anchor>
            <arglist>(qreal dpi)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>virtualGeometryChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>availableVirtualSize-prop</anchor>
            <arglist>(const QRect &amp; rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>primaryOrientationChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>primaryOrientation-prop</anchor>
            <arglist>(Qt::ScreenOrientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>orientationChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>(Qt::ScreenOrientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>refreshRateChanged</name>
            <anchorfile>qscreen.html</anchorfile>
            <anchor>refreshRate-prop</anchor>
            <arglist>(qreal refreshRate)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSessionManager</name>
        <filename>qsessionmanager.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sessionId</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>sessionId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sessionKey</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>sessionKey</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>allowsInteraction</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>allowsInteraction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>allowsErrorInteraction</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>allowsErrorInteraction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancel</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>RestartHint</name>
            <anchor>RestartHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RestartIfRunning">
            <anchor>RestartHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RestartAnyway">
            <anchor>RestartHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RestartImmediately">
            <anchor>RestartHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RestartNever">
            <anchor>RestartHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRestartHint</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>setRestartHint</anchor>
            <arglist>(RestartHint hint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RestartHint</type>
            <name>restartHint</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>restartHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRestartCommand</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>setRestartCommand</anchor>
            <arglist>(const QStringList &amp; command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>restartCommand</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>restartCommand</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDiscardCommand</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>setDiscardCommand</anchor>
            <arglist>(const QStringList &amp; command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>discardCommand</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>discardCommand</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManagerProperty</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>setManagerProperty-2</anchor>
            <arglist>(const QString &amp; name, const QString &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManagerProperty</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>setManagerProperty</anchor>
            <arglist>(const QString &amp; name, const QStringList &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPhase2</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>isPhase2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>requestPhase2</name>
            <anchorfile>qsessionmanager.html</anchorfile>
            <anchor>requestPhase2</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStyleHints</name>
        <filename>qstylehints.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mouseDoubleClickInterval</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>mouseDoubleClickInterval</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>startDragDistance</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>startDragDistance</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>startDragTime</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>startDragTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>startDragVelocity</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>startDragVelocity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>keyboardInputInterval</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>keyboardInputInterval</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>keyboardAutoRepeatRate</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>keyboardAutoRepeatRate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>cursorFlashTime</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>cursorFlashTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>showIsFullScreen</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>showIsFullScreen</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>passwordMaskDelay</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>passwordMaskDelay</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>fontSmoothingGamma</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>fontSmoothingGamma</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>useRtlExtensions</name>
            <anchorfile>qstylehints.html</anchorfile>
            <anchor>useRtlExtensions</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSurface</name>
        <filename>qsurface.html</filename>
        <member kind="enum">
            <name>SurfaceClass</name>
            <anchor>SurfaceClass-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Window">
            <anchor>SurfaceClass-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SurfaceType</name>
            <anchor>SurfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RasterSurface">
            <anchor>SurfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenGLSurface">
            <anchor>SurfaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSurface</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>dtor.QSurface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SurfaceClass</type>
            <name>surfaceClass</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>surfaceClass</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSurfaceFormat</type>
            <name>format</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QPlatformSurface *</type>
            <name>surfaceHandle</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>surfaceHandle</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual SurfaceType</type>
            <name>surfaceType</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>surfaceType</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSize</type>
            <name>size</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QSurface</name>
            <anchorfile>qsurface.html</anchorfile>
            <anchor>QSurface</anchor>
            <arglist>(SurfaceClass type)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSurfaceFormat</name>
        <filename>qsurfaceformat.html</filename>
        <member kind="enum">
            <name>FormatOption</name>
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StereoBuffers">
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DebugContext">
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeprecatedFunctions">
            <anchor>FormatOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSurfaceFormat::FormatOption">
            <name>FormatOptions</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>FormatOptions-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SwapBehavior</name>
            <anchor>SwapBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultSwapBehavior">
            <anchor>SwapBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SingleBuffer">
            <anchor>SwapBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DoubleBuffer">
            <anchor>SwapBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TripleBuffer">
            <anchor>SwapBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>RenderableType</name>
            <anchor>RenderableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultRenderableType">
            <anchor>RenderableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenGL">
            <anchor>RenderableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenGLES">
            <anchor>RenderableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenVG">
            <anchor>RenderableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>OpenGLContextProfile</name>
            <anchor>OpenGLContextProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoProfile">
            <anchor>OpenGLContextProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CoreProfile">
            <anchor>OpenGLContextProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompatibilityProfile">
            <anchor>OpenGLContextProfile-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSurfaceFormat</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>QSurfaceFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSurfaceFormat</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>QSurfaceFormat-2</anchor>
            <arglist>(QFlags&lt;QSurfaceFormat::FormatOption&gt; options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSurfaceFormat</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>QSurfaceFormat-3</anchor>
            <arglist>(const QSurfaceFormat &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat &amp;</type>
            <name>operator=</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QSurfaceFormat &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSurfaceFormat</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>dtor.QSurfaceFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setDepthBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depthBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>depthBufferSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencilBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setStencilBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>stencilBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>stencilBufferSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRedBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setRedBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>redBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>redBufferSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGreenBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setGreenBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>greenBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>greenBufferSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlueBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setBlueBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>blueBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>blueBufferSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlphaBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setAlphaBufferSize</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>alphaBufferSize</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>alphaBufferSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSamples</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setSamples</anchor>
            <arglist>(int numSamples)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>samples</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>samples</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSwapBehavior</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setSwapBehavior</anchor>
            <arglist>(SwapBehavior behavior)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SwapBehavior</type>
            <name>swapBehavior</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>swapBehavior</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAlpha</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>hasAlpha</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProfile</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setProfile</anchor>
            <arglist>(OpenGLContextProfile profile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>OpenGLContextProfile</type>
            <name>profile</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>profile</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderableType</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setRenderableType</anchor>
            <arglist>(RenderableType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RenderableType</type>
            <name>renderableType</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>renderableType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMajorVersion</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setMajorVersion</anchor>
            <arglist>(int major)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>majorVersion</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>majorVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinorVersion</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setMinorVersion</anchor>
            <arglist>(int minor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minorVersion</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>minorVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>stereo</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>stereo</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStereo</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setStereo</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOption</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>setOption</anchor>
            <arglist>(QFlags&lt;QSurfaceFormat::FormatOption&gt; opt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testOption</name>
            <anchorfile>qsurfaceformat.html</anchorfile>
            <anchor>testOption</anchor>
            <arglist>(QFlags&lt;QSurfaceFormat::FormatOption&gt; opt) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTouchDevice</name>
        <filename>qtouchdevice.html</filename>
        <member kind="enum">
            <name>DeviceType</name>
            <anchor>DeviceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TouchScreen">
            <anchor>DeviceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TouchPad">
            <anchor>DeviceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CapabilityFlag</name>
            <anchor>CapabilityFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Position">
            <anchor>CapabilityFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Area">
            <anchor>CapabilityFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Pressure">
            <anchor>CapabilityFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Velocity">
            <anchor>CapabilityFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RawPositions">
            <anchor>CapabilityFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalizedPosition">
            <anchor>CapabilityFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTouchDevice::CapabilityFlag">
            <name>Capabilities</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>Capabilities-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTouchDevice</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>QTouchDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTouchDevice</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>dtor.QTouchDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;const QTouchDevice *&gt;</type>
            <name>devices</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>devices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>DeviceType</type>
            <name>type</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Capabilities</type>
            <name>capabilities</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>capabilities</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>setType</anchor>
            <arglist>(DeviceType devType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCapabilities</name>
            <anchorfile>qtouchdevice.html</anchorfile>
            <anchor>setCapabilities</anchor>
            <arglist>(QFlags&lt;QTouchDevice::CapabilityFlag&gt; caps)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWindow</name>
        <filename>qwindow.html</filename>
        <base>QObject</base>
        <base>QSurface</base>
        <member kind="property" type="QString">
            <name>title</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>title-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::WindowModality">
            <name>modality</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>modality-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::WindowFlags">
            <name>flags</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>flags-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>x</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>y</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>width</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>height</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minimumWidth</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minimumHeight</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumHeight-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maximumWidth</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maximumHeight</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumHeight-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>visible</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::ScreenOrientation">
            <name>contentOrientation</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>contentOrientation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWindow</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>QWindow</anchor>
            <arglist>(QScreen * targetScreen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWindow</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>QWindow-2</anchor>
            <arglist>(QWindow * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QWindow</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>dtor.QWindow</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSurfaceType</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setSurfaceType</anchor>
            <arglist>(SurfaceType surfaceType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual SurfaceType</type>
            <name>surfaceType</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>surfaceType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVisible</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>create</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>WId</type>
            <name>winId</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>winId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWindow *</type>
            <name>parent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setParent</anchor>
            <arglist>(QWindow * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTopLevel</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>isTopLevel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isModal</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>isModal</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowModality</type>
            <name>modality</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>modality-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModality</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>modality-prop</anchor>
            <arglist>(Qt::WindowModality modality)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QSurfaceFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSurfaceFormat</type>
            <name>format</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSurfaceFormat</type>
            <name>requestedFormat</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>requestedFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>flags-prop</anchor>
            <arglist>(Qt::WindowFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowFlags</type>
            <name>flags</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>flags-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowType</type>
            <name>type</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>title</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>title-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpacity</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setOpacity</anchor>
            <arglist>(qreal level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>requestActivate</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>requestActivate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reportContentOrientationChange</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>contentOrientation-prop</anchor>
            <arglist>(Qt::ScreenOrientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ScreenOrientation</type>
            <name>contentOrientation</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>contentOrientation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>devicePixelRatio</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>devicePixelRatio</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::WindowState</type>
            <name>windowState</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>windowState</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindowState</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setWindowState</anchor>
            <arglist>(Qt::WindowState state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransientParent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setTransientParent</anchor>
            <arglist>(QWindow * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWindow *</type>
            <name>transientParent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>transientParent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>AncestorMode</name>
            <anchor>AncestorMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExcludeTransients">
            <anchor>AncestorMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IncludeTransients">
            <anchor>AncestorMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAncestorOf</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>isAncestorOf</anchor>
            <arglist>(const QWindow * child, AncestorMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isExposed</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>isExposed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minimumWidth</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minimumHeight</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumHeight-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumWidth</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumHeight</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumHeight-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>minimumSize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>maximumSize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>baseSize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>baseSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>sizeIncrement</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>sizeIncrement</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumSize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setMinimumSize</anchor>
            <arglist>(const QSize &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumSize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setMaximumSize</anchor>
            <arglist>(const QSize &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBaseSize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setBaseSize</anchor>
            <arglist>(const QSize &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSizeIncrement</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setSizeIncrement</anchor>
            <arglist>(const QSize &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometry</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setGeometry</anchor>
            <arglist>(int posx, int posy, int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeometry</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setGeometry-2</anchor>
            <arglist>(const QRect &amp; rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>geometry</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>geometry</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>frameMargins</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>frameMargins</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>frameGeometry</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>frameGeometry</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>framePosition</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>framePosition</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFramePosition</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setFramePosition</anchor>
            <arglist>(const QPoint &amp; point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>size</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>position</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(const QPoint &amp; pt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setPosition-2</anchor>
            <arglist>(int posx, int posy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(const QSize &amp; newSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>resize-2</anchor>
            <arglist>(int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilePath</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setFilePath</anchor>
            <arglist>(const QString &amp; filePath)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>filePath</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>filePath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIcon</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setIcon</anchor>
            <arglist>(const QIcon &amp; icon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIcon</type>
            <name>icon</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>icon</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setKeyboardGrabEnabled</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setKeyboardGrabEnabled</anchor>
            <arglist>(bool grab)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setMouseGrabEnabled</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setMouseGrabEnabled</anchor>
            <arglist>(bool grab)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScreen *</type>
            <name>screen</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>screen</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScreen</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setScreen</anchor>
            <arglist>(QScreen * newScreen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QObject *</type>
            <name>focusObject</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>focusObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>mapToGlobal</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>mapToGlobal</anchor>
            <arglist>(const QPoint &amp; pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>mapFromGlobal</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>mapFromGlobal</anchor>
            <arglist>(const QPoint &amp; pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCursor</type>
            <name>cursor</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>cursor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCursor</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>setCursor</anchor>
            <arglist>(const QCursor &amp; cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unsetCursor</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>unsetCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisible</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>show</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>show</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hide</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>hide</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showMinimized</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>showMinimized</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showMaximized</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>showMaximized</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showFullScreen</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>showFullScreen</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showNormal</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>showNormal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>close</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>raise</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>raise</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lower</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>lower</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTitle</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>title-prop</anchor>
            <arglist>(const QString &amp; )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumWidth</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumWidth-prop</anchor>
            <arglist>(int w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumHeight</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumHeight-prop</anchor>
            <arglist>(int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumWidth</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumWidth-prop</anchor>
            <arglist>(int w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumHeight</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumHeight-prop</anchor>
            <arglist>(int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>screenChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>screenChanged</anchor>
            <arglist>(QScreen * screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modalityChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>modality-prop</anchor>
            <arglist>(Qt::WindowModality modality)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>windowStateChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>windowStateChanged</anchor>
            <arglist>(Qt::WindowState windowState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>xChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>yChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>widthChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>width-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>heightChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>height-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minimumWidthChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumWidth-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>minimumHeightChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>minimumHeight-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>maximumWidthChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumWidth-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>maximumHeightChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>maximumHeight-prop</anchor>
            <arglist>(int arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>visibleChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>visible-prop</anchor>
            <arglist>(bool arg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contentOrientationChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>contentOrientation-prop</anchor>
            <arglist>(Qt::ScreenOrientation orientation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>focusObjectChanged</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>focusObjectChanged</anchor>
            <arglist>(QObject * focusObject)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>exposeEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>exposeEvent</anchor>
            <arglist>(QExposeEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>moveEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>moveEvent</anchor>
            <arglist>(QMoveEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusInEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>focusInEvent</anchor>
            <arglist>(QFocusEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>focusOutEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>focusOutEvent</anchor>
            <arglist>(QFocusEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>showEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>hideEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyPressEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>keyPressEvent</anchor>
            <arglist>(QKeyEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>keyReleaseEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>keyReleaseEvent</anchor>
            <arglist>(QKeyEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mousePressEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>mousePressEvent</anchor>
            <arglist>(QMouseEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseReleaseEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>mouseReleaseEvent</anchor>
            <arglist>(QMouseEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseDoubleClickEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>mouseDoubleClickEvent</anchor>
            <arglist>(QMouseEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>mouseMoveEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>mouseMoveEvent</anchor>
            <arglist>(QMouseEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>wheelEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>wheelEvent</anchor>
            <arglist>(QWheelEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>touchEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>touchEvent</anchor>
            <arglist>(QTouchEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>tabletEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>tabletEvent</anchor>
            <arglist>(QTabletEvent * ev)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>nativeEvent</name>
            <anchorfile>qwindow.html</anchorfile>
            <anchor>nativeEvent</anchor>
            <arglist>(const QByteArray &amp; eventType, void * message, long * result)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGenericMatrix</name>
        <filename>qgenericmatrix.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGenericMatrix</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>QGenericMatrix</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGenericMatrix</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>QGenericMatrix-2</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, T&gt; &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGenericMatrix</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>QGenericMatrix-3</anchor>
            <arglist>(const T * values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator()</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator()</anchor>
            <arglist>(int row, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator()</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator()-2</anchor>
            <arglist>(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isIdentity</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>isIdentity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToIdentity</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>setToIdentity</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;M, N, T&gt;</type>
            <name>transposed</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>transposed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator+=</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, T&gt; &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, T&gt; &amp;</type>
            <name>operator-=</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator-=</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, T&gt; &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, T&gt; &amp;</type>
            <name>operator*=</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator*=</anchor>
            <arglist>(T factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, T&gt; &amp;</type>
            <name>operator/=</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator/=</anchor>
            <arglist>(T divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, T&gt; &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, T&gt; &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>copyDataTo</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>copyDataTo</anchor>
            <arglist>(T * values) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>data</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>data-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>constData</name>
            <anchorfile>qgenericmatrix.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMatrix4x4</name>
        <filename>qmatrix4x4.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix4x4</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>QMatrix4x4</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix4x4</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>QMatrix4x4-2</anchor>
            <arglist>(const float * values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix4x4</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>QMatrix4x4-3</anchor>
            <arglist>(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix4x4</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>QMatrix4x4-4</anchor>
            <arglist>(const QGenericMatrix&lt;N, M, float&gt; &amp; matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix4x4</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>QMatrix4x4-6</anchor>
            <arglist>(const QTransform &amp; transform)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix4x4</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>QMatrix4x4-7</anchor>
            <arglist>(const QMatrix &amp; matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const float &amp;</type>
            <name>operator()</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator()</anchor>
            <arglist>(int row, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float &amp;</type>
            <name>operator()</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator()-2</anchor>
            <arglist>(int row, int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>column</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>column</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumn</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>setColumn</anchor>
            <arglist>(int index, const QVector4D &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>row</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>row</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRow</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>setRow</anchor>
            <arglist>(int index, const QVector4D &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isIdentity</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>isIdentity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToIdentity</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>setToIdentity</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(float value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>determinant</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>determinant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>inverted</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>inverted</anchor>
            <arglist>(bool * invertible) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>transposed</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>transposed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix3x3</type>
            <name>normalMatrix</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>normalMatrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4 &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator+=</anchor>
            <arglist>(const QMatrix4x4 &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4 &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator-=</anchor>
            <arglist>(const QMatrix4x4 &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4 &amp;</type>
            <name>operator*=</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator*=</anchor>
            <arglist>(const QMatrix4x4 &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4 &amp;</type>
            <name>operator*=</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator*=-2</anchor>
            <arglist>(float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4 &amp;</type>
            <name>operator/=</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator/=</anchor>
            <arglist>(float divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QMatrix4x4 &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QMatrix4x4 &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>scale</anchor>
            <arglist>(const QVector3D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const QVector3D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotate</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>rotate</anchor>
            <arglist>(float angle, const QVector3D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>scale-2</anchor>
            <arglist>(float x, float y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>scale-3</anchor>
            <arglist>(float x, float y, float z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>scale-4</anchor>
            <arglist>(float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>translate-2</anchor>
            <arglist>(float x, float y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>translate-3</anchor>
            <arglist>(float x, float y, float z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotate</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>rotate-3</anchor>
            <arglist>(float angle, float x, float y, float z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotate</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>rotate-2</anchor>
            <arglist>(const QQuaternion &amp; quaternion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ortho</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>ortho-2</anchor>
            <arglist>(const QRect &amp; rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ortho</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>ortho-3</anchor>
            <arglist>(const QRectF &amp; rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ortho</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>ortho</anchor>
            <arglist>(float left, float right, float bottom, float top, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frustum</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>frustum</anchor>
            <arglist>(float left, float right, float bottom, float top, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>perspective</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>perspective</anchor>
            <arglist>(float verticalAngle, float aspectRatio, float nearPlane, float farPlane)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lookAt</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>lookAt</anchor>
            <arglist>(const QVector3D &amp; eye, const QVector3D &amp; center, const QVector3D &amp; up)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>flipCoordinates</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>flipCoordinates</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>copyDataTo</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>copyDataTo</anchor>
            <arglist>(float * values) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix</type>
            <name>toAffine</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>toAffine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>toTransform</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>toTransform</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>toTransform</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>toTransform-2</anchor>
            <arglist>(float distanceToPlane) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>map</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>map</anchor>
            <arglist>(const QPoint &amp; point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>map</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>map-2</anchor>
            <arglist>(const QPointF &amp; point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>map</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>map-3</anchor>
            <arglist>(const QVector3D &amp; point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>mapVector</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>mapVector</anchor>
            <arglist>(const QVector3D &amp; vector) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>map</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>map-4</anchor>
            <arglist>(const QVector4D &amp; point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>mapRect</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>mapRect</anchor>
            <arglist>(const QRect &amp; rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRect</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>mapRect-2</anchor>
            <arglist>(const QRectF &amp; rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGenericMatrix&lt;N, M, float&gt;</type>
            <name>toGenericMatrix</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>toGenericMatrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float *</type>
            <name>data</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const float *</type>
            <name>data</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>data-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const float *</type>
            <name>constData</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>optimize</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>optimize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qmatrix4x4.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QQuaternion</name>
        <filename>qquaternion.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuaternion</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>QQuaternion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuaternion</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>QQuaternion-2</anchor>
            <arglist>(float scalar, float xpos, float ypos, float zpos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuaternion</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>QQuaternion-3</anchor>
            <arglist>(float scalar, const QVector3D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QQuaternion</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>QQuaternion-4</anchor>
            <arglist>(const QVector4D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isIdentity</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>isIdentity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>vector</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>vector</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVector</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>setVector</anchor>
            <arglist>(const QVector3D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVector</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>setVector-2</anchor>
            <arglist>(float x, float y, float z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>x</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>y</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>z</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>z</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>scalar</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>scalar</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(float x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(float y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>setZ</anchor>
            <arglist>(float z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScalar</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>setScalar</anchor>
            <arglist>(float scalar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>lengthSquared</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>lengthSquared</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>normalized</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalize</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>normalize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion</type>
            <name>conjugate</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>conjugate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>rotatedVector</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>rotatedVector</anchor>
            <arglist>(const QVector3D &amp; vector) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion &amp;</type>
            <name>operator+=</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator+=</anchor>
            <arglist>(const QQuaternion &amp; quaternion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion &amp;</type>
            <name>operator-=</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator-=</anchor>
            <arglist>(const QQuaternion &amp; quaternion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion &amp;</type>
            <name>operator*=</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator*=</anchor>
            <arglist>(float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion &amp;</type>
            <name>operator*=</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator*=-2</anchor>
            <arglist>(const QQuaternion &amp; quaternion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QQuaternion &amp;</type>
            <name>operator/=</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator/=</anchor>
            <arglist>(float divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>toVector4D</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>toVector4D</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxisAndAngle</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>fromAxisAndAngle</anchor>
            <arglist>(const QVector3D &amp; axis, float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>fromAxisAndAngle</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>fromAxisAndAngle-2</anchor>
            <arglist>(float x, float y, float z, float angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>slerp</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>slerp</anchor>
            <arglist>(const QQuaternion &amp; q1, const QQuaternion &amp; q2, float t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QQuaternion</type>
            <name>nlerp</name>
            <anchorfile>qquaternion.html</anchorfile>
            <anchor>nlerp</anchor>
            <arglist>(const QQuaternion &amp; q1, const QQuaternion &amp; q2, float t)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVector2D</name>
        <filename>qvector2d.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector2D</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>QVector2D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector2D</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>QVector2D-2</anchor>
            <arglist>(float xpos, float ypos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector2D</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>QVector2D-3</anchor>
            <arglist>(const QPoint &amp; point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector2D</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>QVector2D-4</anchor>
            <arglist>(const QPointF &amp; point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector2D</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>QVector2D-5</anchor>
            <arglist>(const QVector3D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector2D</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>QVector2D-6</anchor>
            <arglist>(const QVector4D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>x</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>y</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(float x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(float y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>lengthSquared</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>lengthSquared</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>normalized</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalize</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>normalize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D &amp;</type>
            <name>operator+=</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator+=</anchor>
            <arglist>(const QVector2D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D &amp;</type>
            <name>operator-=</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator-=</anchor>
            <arglist>(const QVector2D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D &amp;</type>
            <name>operator*=</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator*=</anchor>
            <arglist>(float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D &amp;</type>
            <name>operator*=</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator*=-2</anchor>
            <arglist>(const QVector2D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D &amp;</type>
            <name>operator/=</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator/=</anchor>
            <arglist>(float divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>float</type>
            <name>dotProduct</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>dotProduct</anchor>
            <arglist>(const QVector2D &amp; v1, const QVector2D &amp; v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>toVector3D</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>toVector3D</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>toVector4D</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>toVector4D</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>toPoint</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>toPoint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>toPointF</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>toPointF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qvector2d.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVector3D</name>
        <filename>qvector3d.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector3D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>QVector3D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector3D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>QVector3D-2</anchor>
            <arglist>(float xpos, float ypos, float zpos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector3D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>QVector3D-3</anchor>
            <arglist>(const QPoint &amp; point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector3D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>QVector3D-4</anchor>
            <arglist>(const QPointF &amp; point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector3D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>QVector3D-5</anchor>
            <arglist>(const QVector2D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector3D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>QVector3D-6</anchor>
            <arglist>(const QVector2D &amp; vector, float zpos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector3D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>QVector3D-7</anchor>
            <arglist>(const QVector4D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>x</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>y</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>z</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>z</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(float x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(float y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>setZ</anchor>
            <arglist>(float z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>lengthSquared</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>lengthSquared</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>normalized</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalize</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>normalize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D &amp;</type>
            <name>operator+=</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator+=</anchor>
            <arglist>(const QVector3D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D &amp;</type>
            <name>operator-=</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator-=</anchor>
            <arglist>(const QVector3D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D &amp;</type>
            <name>operator*=</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator*=</anchor>
            <arglist>(float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D &amp;</type>
            <name>operator*=</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator*=-2</anchor>
            <arglist>(const QVector3D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D &amp;</type>
            <name>operator/=</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator/=</anchor>
            <arglist>(float divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>float</type>
            <name>dotProduct</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>dotProduct</anchor>
            <arglist>(const QVector3D &amp; v1, const QVector3D &amp; v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVector3D</type>
            <name>crossProduct</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>crossProduct</anchor>
            <arglist>(const QVector3D &amp; v1, const QVector3D &amp; v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVector3D</type>
            <name>normal</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>normal</anchor>
            <arglist>(const QVector3D &amp; v1, const QVector3D &amp; v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVector3D</type>
            <name>normal</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>normal-2</anchor>
            <arglist>(const QVector3D &amp; v1, const QVector3D &amp; v2, const QVector3D &amp; v3)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distanceToPlane</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>distanceToPlane</anchor>
            <arglist>(const QVector3D &amp; plane, const QVector3D &amp; normal) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distanceToPlane</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>distanceToPlane-2</anchor>
            <arglist>(const QVector3D &amp; plane1, const QVector3D &amp; plane2, const QVector3D &amp; plane3) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>distanceToLine</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>distanceToLine</anchor>
            <arglist>(const QVector3D &amp; point, const QVector3D &amp; direction) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>toVector2D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>toVector2D</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>toVector4D</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>toVector4D</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>toPoint</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>toPoint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>toPointF</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>toPointF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qvector3d.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVector4D</name>
        <filename>qvector4d.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector4D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>QVector4D</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector4D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>QVector4D-2</anchor>
            <arglist>(float xpos, float ypos, float zpos, float wpos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector4D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>QVector4D-3</anchor>
            <arglist>(const QPoint &amp; point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector4D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>QVector4D-4</anchor>
            <arglist>(const QPointF &amp; point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector4D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>QVector4D-5</anchor>
            <arglist>(const QVector2D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector4D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>QVector4D-6</anchor>
            <arglist>(const QVector2D &amp; vector, float zpos, float wpos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector4D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>QVector4D-7</anchor>
            <arglist>(const QVector3D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVector4D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>QVector4D-8</anchor>
            <arglist>(const QVector3D &amp; vector, float wpos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>x</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>y</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>z</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>z</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>w</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>w</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(float x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(float y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>setZ</anchor>
            <arglist>(float z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setW</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>setW</anchor>
            <arglist>(float w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>length</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>lengthSquared</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>lengthSquared</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D</type>
            <name>normalized</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalize</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>normalize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D &amp;</type>
            <name>operator+=</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator+=</anchor>
            <arglist>(const QVector4D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D &amp;</type>
            <name>operator-=</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator-=</anchor>
            <arglist>(const QVector4D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D &amp;</type>
            <name>operator*=</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator*=</anchor>
            <arglist>(float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D &amp;</type>
            <name>operator*=</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator*=-2</anchor>
            <arglist>(const QVector4D &amp; vector)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector4D &amp;</type>
            <name>operator/=</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator/=</anchor>
            <arglist>(float divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>float</type>
            <name>dotProduct</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>dotProduct</anchor>
            <arglist>(const QVector4D &amp; v1, const QVector4D &amp; v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>toVector2D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>toVector2D</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector2D</type>
            <name>toVector2DAffine</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>toVector2DAffine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>toVector3D</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>toVector3D</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector3D</type>
            <name>toVector3DAffine</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>toVector3DAffine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>toPoint</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>toPoint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>toPointF</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>toPointF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qvector4d.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLBuffer</name>
        <filename>qopenglbuffer.html</filename>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VertexBuffer">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IndexBuffer">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PixelPackBuffer">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PixelUnpackBuffer">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>QOpenGLBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>QOpenGLBuffer-2</anchor>
            <arglist>(QOpenGLBuffer::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>QOpenGLBuffer-3</anchor>
            <arglist>(const QOpenGLBuffer &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLBuffer</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>dtor.QOpenGLBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLBuffer &amp;</type>
            <name>operator=</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QOpenGLBuffer &amp; other)</arglist>
        </member>
        <member kind="enum">
            <name>UsagePattern</name>
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StreamDraw">
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StreamRead">
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StreamCopy">
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StaticDraw">
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StaticRead">
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StaticCopy">
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DynamicDraw">
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DynamicRead">
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DynamicCopy">
            <anchor>UsagePattern-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Access</name>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadOnly">
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteOnly">
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadWrite">
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLBuffer::Type</type>
            <name>type</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLBuffer::UsagePattern</type>
            <name>usagePattern</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>usagePattern</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUsagePattern</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>setUsagePattern</anchor>
            <arglist>(QOpenGLBuffer::UsagePattern value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>create</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCreated</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>isCreated</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bind</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>release-2</anchor>
            <arglist>(QOpenGLBuffer::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>bufferId</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>bufferId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>read</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(int offset, void * data, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>write</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(int offset, const void * data, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allocate</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>allocate</anchor>
            <arglist>(const void * data, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>allocate</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>allocate-2</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>map</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>map</anchor>
            <arglist>(QOpenGLBuffer::Access access)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>unmap</name>
            <anchorfile>qopenglbuffer.html</anchorfile>
            <anchor>unmap</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLFramebufferObject</name>
        <filename>qopenglframebufferobject.html</filename>
        <member kind="enum">
            <name>Attachment</name>
            <anchor>Attachment-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoAttachment">
            <anchor>Attachment-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CombinedDepthStencil">
            <anchor>Attachment-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Depth">
            <anchor>Attachment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject</anchor>
            <arglist>(const QSize &amp; size, GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject-2</anchor>
            <arglist>(int width, int height, GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject-6</anchor>
            <arglist>(const QSize &amp; size, Attachment attachment, GLenum target, GLenum internal_format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject-5</anchor>
            <arglist>(int width, int height, Attachment attachment, GLenum target, GLenum internal_format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject-3</anchor>
            <arglist>(const QSize &amp; size, const QOpenGLFramebufferObjectFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>QOpenGLFramebufferObject-4</anchor>
            <arglist>(int width, int height, const QOpenGLFramebufferObjectFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLFramebufferObject</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>dtor.QOpenGLFramebufferObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFramebufferObjectFormat</type>
            <name>format</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBound</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>isBound</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bind</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>release</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>texture</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>texture</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>toImage</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>toImage</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Attachment</type>
            <name>attachment</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>attachment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttachment</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>setAttachment</anchor>
            <arglist>(Attachment attachment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>handle</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLFramebufferObjects</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>hasOpenGLFramebufferObjects</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLFramebufferBlit</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>hasOpenGLFramebufferBlit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>blitFramebuffer</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>blitFramebuffer</anchor>
            <arglist>(QOpenGLFramebufferObject * target, const QRect &amp; targetRect, QOpenGLFramebufferObject * source, const QRect &amp; sourceRect, GLbitfield buffers, GLenum filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>blitFramebuffer</name>
            <anchorfile>qopenglframebufferobject.html</anchorfile>
            <anchor>blitFramebuffer-2</anchor>
            <arglist>(QOpenGLFramebufferObject * target, QOpenGLFramebufferObject * source, GLbitfield buffers, GLenum filter)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLFramebufferObjectFormat</name>
        <filename>qopenglframebufferobjectformat.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObjectFormat</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>QOpenGLFramebufferObjectFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFramebufferObjectFormat</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>QOpenGLFramebufferObjectFormat-2</anchor>
            <arglist>(const QOpenGLFramebufferObjectFormat &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFramebufferObjectFormat &amp;</type>
            <name>operator=</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QOpenGLFramebufferObjectFormat &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLFramebufferObjectFormat</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>dtor.QOpenGLFramebufferObjectFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSamples</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>setSamples</anchor>
            <arglist>(int samples)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>samples</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>samples</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipmap</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>setMipmap</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mipmap</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>mipmap</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttachment</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>setAttachment</anchor>
            <arglist>(QOpenGLFramebufferObject::Attachment attachment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFramebufferObject::Attachment</type>
            <name>attachment</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>attachment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureTarget</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>setTextureTarget</anchor>
            <arglist>(GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>textureTarget</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>textureTarget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInternalTextureFormat</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>setInternalTextureFormat</anchor>
            <arglist>(GLenum internalTextureFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>internalTextureFormat</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>internalTextureFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QOpenGLFramebufferObjectFormat &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qopenglframebufferobjectformat.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QOpenGLFramebufferObjectFormat &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLFunctions</name>
        <filename>qopenglfunctions.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFunctions</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>QOpenGLFunctions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLFunctions</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>QOpenGLFunctions-2</anchor>
            <arglist>(QOpenGLContext * context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOpenGLFunctions</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>dtor.QOpenGLFunctions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>OpenGLFeature</name>
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Multitexture">
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Shaders">
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Buffers">
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Framebuffers">
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlendColor">
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlendEquation">
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlendEquationSeparate">
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlendFuncSeparate">
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlendSubtract">
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompressedTextures">
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Multisample">
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StencilSeparate">
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NPOTTextures">
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NPOTTextureRepeat">
            <anchor>OpenGLFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QOpenGLFunctions::OpenGLFeature">
            <name>OpenGLFeatures</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>OpenGLFeatures-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLFunctions::OpenGLFeatures</type>
            <name>openGLFeatures</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>openGLFeatures</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasOpenGLFeature</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>hasOpenGLFeature</anchor>
            <arglist>(QOpenGLFunctions::OpenGLFeature feature) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initializeOpenGLFunctions</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>initializeOpenGLFunctions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initializeGLFunctions</name>
            <anchorfile>qopenglfunctions-compat.html</anchorfile>
            <anchor>initializeGLFunctions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glActiveTexture</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glActiveTexture</anchor>
            <arglist>(GLenum texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glAttachShader</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glAttachShader</anchor>
            <arglist>(GLuint program, GLuint shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindAttribLocation</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBindAttribLocation</anchor>
            <arglist>(GLuint program, GLuint index, const char * name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindBuffer</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBindBuffer</anchor>
            <arglist>(GLenum target, GLuint buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindFramebuffer</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBindFramebuffer</anchor>
            <arglist>(GLenum target, GLuint framebuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBindRenderbuffer</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBindRenderbuffer</anchor>
            <arglist>(GLenum target, GLuint renderbuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendColor</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBlendColor</anchor>
            <arglist>(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendEquation</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBlendEquation</anchor>
            <arglist>(GLenum mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendEquationSeparate</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBlendEquationSeparate</anchor>
            <arglist>(GLenum modeRGB, GLenum modeAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBlendFuncSeparate</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBlendFuncSeparate</anchor>
            <arglist>(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBufferData</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBufferData</anchor>
            <arglist>(GLenum target, qopengl_GLsizeiptr size, const void * data, GLenum usage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glBufferSubData</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glBufferSubData</anchor>
            <arglist>(GLenum target, qopengl_GLintptr offset, qopengl_GLsizeiptr size, const void * data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLenum</type>
            <name>glCheckFramebufferStatus</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glCheckFramebufferStatus</anchor>
            <arglist>(GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glClearDepthf</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glClearDepthf</anchor>
            <arglist>(GLclampf depth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCompileShader</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glCompileShader</anchor>
            <arglist>(GLuint shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCompressedTexImage2D</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glCompressedTexImage2D</anchor>
            <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glCompressedTexSubImage2D</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glCompressedTexSubImage2D</anchor>
            <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>glCreateProgram</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glCreateProgram</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>glCreateShader</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glCreateShader</anchor>
            <arglist>(GLenum type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteBuffers</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDeleteBuffers</anchor>
            <arglist>(GLsizei n, const GLuint * buffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteFramebuffers</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDeleteFramebuffers</anchor>
            <arglist>(GLsizei n, const GLuint * framebuffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteProgram</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDeleteProgram</anchor>
            <arglist>(GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteRenderbuffers</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDeleteRenderbuffers</anchor>
            <arglist>(GLsizei n, const GLuint * renderbuffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDeleteShader</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDeleteShader</anchor>
            <arglist>(GLuint shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDepthRangef</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDepthRangef</anchor>
            <arglist>(GLclampf zNear, GLclampf zFar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDetachShader</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDetachShader</anchor>
            <arglist>(GLuint program, GLuint shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glDisableVertexAttribArray</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glDisableVertexAttribArray</anchor>
            <arglist>(GLuint index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glEnableVertexAttribArray</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glEnableVertexAttribArray</anchor>
            <arglist>(GLuint index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glFramebufferRenderbuffer</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glFramebufferRenderbuffer</anchor>
            <arglist>(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glFramebufferTexture2D</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glFramebufferTexture2D</anchor>
            <arglist>(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenBuffers</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGenBuffers</anchor>
            <arglist>(GLsizei n, GLuint * buffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenerateMipmap</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGenerateMipmap</anchor>
            <arglist>(GLenum target)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenFramebuffers</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGenFramebuffers</anchor>
            <arglist>(GLsizei n, GLuint * framebuffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGenRenderbuffers</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGenRenderbuffers</anchor>
            <arglist>(GLsizei n, GLuint * renderbuffers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetActiveAttrib</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetActiveAttrib</anchor>
            <arglist>(GLuint program, GLuint index, GLsizei bufsize, GLsizei * length, GLint * size, GLenum * type, char * name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetActiveUniform</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetActiveUniform</anchor>
            <arglist>(GLuint program, GLuint index, GLsizei bufsize, GLsizei * length, GLint * size, GLenum * type, char * name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetAttachedShaders</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetAttachedShaders</anchor>
            <arglist>(GLuint program, GLsizei maxcount, GLsizei * count, GLuint * shaders)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLint</type>
            <name>glGetAttribLocation</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetAttribLocation</anchor>
            <arglist>(GLuint program, const char * name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetBufferParameteriv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetBufferParameteriv</anchor>
            <arglist>(GLenum target, GLenum pname, GLint * params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetFramebufferAttachmentParameteriv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetFramebufferAttachmentParameteriv</anchor>
            <arglist>(GLenum target, GLenum attachment, GLenum pname, GLint * params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetProgramiv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetProgramiv</anchor>
            <arglist>(GLuint program, GLenum pname, GLint * params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetProgramInfoLog</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetProgramInfoLog</anchor>
            <arglist>(GLuint program, GLsizei bufsize, GLsizei * length, char * infolog)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetRenderbufferParameteriv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetRenderbufferParameteriv</anchor>
            <arglist>(GLenum target, GLenum pname, GLint * params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetShaderiv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetShaderiv</anchor>
            <arglist>(GLuint shader, GLenum pname, GLint * params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetShaderInfoLog</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetShaderInfoLog</anchor>
            <arglist>(GLuint shader, GLsizei bufsize, GLsizei * length, char * infolog)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetShaderPrecisionFormat</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetShaderPrecisionFormat</anchor>
            <arglist>(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetShaderSource</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetShaderSource</anchor>
            <arglist>(GLuint shader, GLsizei bufsize, GLsizei * length, char * source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetUniformfv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetUniformfv</anchor>
            <arglist>(GLuint program, GLint location, GLfloat * params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetUniformiv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetUniformiv</anchor>
            <arglist>(GLuint program, GLint location, GLint * params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLint</type>
            <name>glGetUniformLocation</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetUniformLocation</anchor>
            <arglist>(GLuint program, const char * name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetVertexAttribfv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetVertexAttribfv</anchor>
            <arglist>(GLuint index, GLenum pname, GLfloat * params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetVertexAttribiv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetVertexAttribiv</anchor>
            <arglist>(GLuint index, GLenum pname, GLint * params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glGetVertexAttribPointerv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glGetVertexAttribPointerv</anchor>
            <arglist>(GLuint index, GLenum pname, void ** pointer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsBuffer</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glIsBuffer</anchor>
            <arglist>(GLuint buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsFramebuffer</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glIsFramebuffer</anchor>
            <arglist>(GLuint framebuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsProgram</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glIsProgram</anchor>
            <arglist>(GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsRenderbuffer</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glIsRenderbuffer</anchor>
            <arglist>(GLuint renderbuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLboolean</type>
            <name>glIsShader</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glIsShader</anchor>
            <arglist>(GLuint shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glLinkProgram</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glLinkProgram</anchor>
            <arglist>(GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glReleaseShaderCompiler</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glReleaseShaderCompiler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glRenderbufferStorage</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glRenderbufferStorage</anchor>
            <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glSampleCoverage</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glSampleCoverage</anchor>
            <arglist>(GLclampf value, GLboolean invert)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glShaderBinary</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glShaderBinary</anchor>
            <arglist>(GLint n, const GLuint * shaders, GLenum binaryformat, const void * binary, GLint length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glShaderSource</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glShaderSource</anchor>
            <arglist>(GLuint shader, GLsizei count, const char ** string, const GLint * length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glStencilFuncSeparate</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glStencilFuncSeparate</anchor>
            <arglist>(GLenum face, GLenum func, GLint ref, GLuint mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glStencilMaskSeparate</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glStencilMaskSeparate</anchor>
            <arglist>(GLenum face, GLuint mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glStencilOpSeparate</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glStencilOpSeparate</anchor>
            <arglist>(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform1f</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform1f</anchor>
            <arglist>(GLint location, GLfloat x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform1fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform1fv</anchor>
            <arglist>(GLint location, GLsizei count, const GLfloat * v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform1i</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform1i</anchor>
            <arglist>(GLint location, GLint x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform1iv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform1iv</anchor>
            <arglist>(GLint location, GLsizei count, const GLint * v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform2f</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform2f</anchor>
            <arglist>(GLint location, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform2fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform2fv</anchor>
            <arglist>(GLint location, GLsizei count, const GLfloat * v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform2i</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform2i</anchor>
            <arglist>(GLint location, GLint x, GLint y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform2iv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform2iv</anchor>
            <arglist>(GLint location, GLsizei count, const GLint * v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform3f</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform3f</anchor>
            <arglist>(GLint location, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform3fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform3fv</anchor>
            <arglist>(GLint location, GLsizei count, const GLfloat * v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform3i</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform3i</anchor>
            <arglist>(GLint location, GLint x, GLint y, GLint z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform3iv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform3iv</anchor>
            <arglist>(GLint location, GLsizei count, const GLint * v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform4f</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform4f</anchor>
            <arglist>(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform4fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform4fv</anchor>
            <arglist>(GLint location, GLsizei count, const GLfloat * v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform4i</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform4i</anchor>
            <arglist>(GLint location, GLint x, GLint y, GLint z, GLint w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniform4iv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniform4iv</anchor>
            <arglist>(GLint location, GLsizei count, const GLint * v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniformMatrix2fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniformMatrix2fv</anchor>
            <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniformMatrix3fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniformMatrix3fv</anchor>
            <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUniformMatrix4fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUniformMatrix4fv</anchor>
            <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glUseProgram</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glUseProgram</anchor>
            <arglist>(GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glValidateProgram</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glValidateProgram</anchor>
            <arglist>(GLuint program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib1f</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttrib1f</anchor>
            <arglist>(GLuint indx, GLfloat x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib1fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttrib1fv</anchor>
            <arglist>(GLuint indx, const GLfloat * values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib2f</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttrib2f</anchor>
            <arglist>(GLuint indx, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib2fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttrib2fv</anchor>
            <arglist>(GLuint indx, const GLfloat * values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib3f</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttrib3f</anchor>
            <arglist>(GLuint indx, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib3fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttrib3fv</anchor>
            <arglist>(GLuint indx, const GLfloat * values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib4f</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttrib4f</anchor>
            <arglist>(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttrib4fv</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttrib4fv</anchor>
            <arglist>(GLuint indx, const GLfloat * values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>glVertexAttribPointer</name>
            <anchorfile>qopenglfunctions.html</anchorfile>
            <anchor>glVertexAttribPointer</anchor>
            <arglist>(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * ptr)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLPaintDevice</name>
        <filename>qopenglpaintdevice.html</filename>
        <base>QPaintDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLPaintDevice</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>QOpenGLPaintDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLPaintDevice</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>QOpenGLPaintDevice-2</anchor>
            <arglist>(const QSize &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLPaintDevice</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>QOpenGLPaintDevice-3</anchor>
            <arglist>(int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLPaintDevice</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>dtor.QOpenGLPaintDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QPaintEngine *</type>
            <name>paintEngine</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>paintEngine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLContext *</type>
            <name>context</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>context</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>setSize</anchor>
            <arglist>(const QSize &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dotsPerMeterX</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>dotsPerMeterX</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dotsPerMeterY</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>dotsPerMeterY</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDotsPerMeterX</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>setDotsPerMeterX</anchor>
            <arglist>(qreal dpmx)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDotsPerMeterY</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>setDotsPerMeterY</anchor>
            <arglist>(qreal dpmy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPaintFlipped</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>setPaintFlipped</anchor>
            <arglist>(bool flipped)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>paintFlipped</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>paintFlipped</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>ensureActiveTarget</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>ensureActiveTarget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>metric</name>
            <anchorfile>qopenglpaintdevice.html</anchorfile>
            <anchor>metric</anchor>
            <arglist>(QPaintDevice::PaintDeviceMetric metric) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLShader</name>
        <filename>qopenglshader.html</filename>
        <base>QObject</base>
        <member kind="enum">
            <name>ShaderTypeBit</name>
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vertex">
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Fragment">
            <anchor>ShaderTypeBit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QOpenGLShader::ShaderTypeBit">
            <name>ShaderType</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>ShaderType-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLShader</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>QOpenGLShader</anchor>
            <arglist>(QFlags&lt;QOpenGLShader::ShaderTypeBit&gt; type, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLShader</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>dtor.QOpenGLShader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOpenGLShader::ShaderType</type>
            <name>shaderType</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>shaderType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compileSourceCode</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>compileSourceCode</anchor>
            <arglist>(const char * source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compileSourceCode</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>compileSourceCode-2</anchor>
            <arglist>(const QByteArray &amp; source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compileSourceCode</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>compileSourceCode-3</anchor>
            <arglist>(const QString &amp; source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compileSourceFile</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>compileSourceFile</anchor>
            <arglist>(const QString &amp; fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>sourceCode</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>sourceCode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCompiled</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>isCompiled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>log</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>log</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>shaderId</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>shaderId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLShaders</name>
            <anchorfile>qopenglshader.html</anchorfile>
            <anchor>hasOpenGLShaders</anchor>
            <arglist>(QFlags&lt;QOpenGLShader::ShaderTypeBit&gt; type, QOpenGLContext * context)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOpenGLShaderProgram</name>
        <filename>qopenglshaderprogram.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOpenGLShaderProgram</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>QOpenGLShaderProgram</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOpenGLShaderProgram</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>dtor.QOpenGLShaderProgram</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShader</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addShader</anchor>
            <arglist>(QOpenGLShader * shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeShader</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>removeShader</anchor>
            <arglist>(QOpenGLShader * shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOpenGLShader *&gt;</type>
            <name>shaders</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>shaders</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShaderFromSourceCode</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addShaderFromSourceCode</anchor>
            <arglist>(QFlags&lt;QOpenGLShader::ShaderTypeBit&gt; type, const char * source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShaderFromSourceCode</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addShaderFromSourceCode-2</anchor>
            <arglist>(QFlags&lt;QOpenGLShader::ShaderTypeBit&gt; type, const QByteArray &amp; source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShaderFromSourceCode</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addShaderFromSourceCode-3</anchor>
            <arglist>(QFlags&lt;QOpenGLShader::ShaderTypeBit&gt; type, const QString &amp; source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addShaderFromSourceFile</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>addShaderFromSourceFile</anchor>
            <arglist>(QFlags&lt;QOpenGLShader::ShaderTypeBit&gt; type, const QString &amp; fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAllShaders</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>removeAllShaders</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>link</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>link</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLinked</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>isLinked</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>log</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>log</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bind</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GLuint</type>
            <name>programId</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>programId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindAttributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>bindAttributeLocation</anchor>
            <arglist>(const char * name, int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindAttributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>bindAttributeLocation-2</anchor>
            <arglist>(const QByteArray &amp; name, int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bindAttributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>bindAttributeLocation-3</anchor>
            <arglist>(const QString &amp; name, int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>attributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>attributeLocation</anchor>
            <arglist>(const char * name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>attributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>attributeLocation-2</anchor>
            <arglist>(const QByteArray &amp; name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>attributeLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>attributeLocation-3</anchor>
            <arglist>(const QString &amp; name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue</anchor>
            <arglist>(int location, GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-2</anchor>
            <arglist>(int location, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-3</anchor>
            <arglist>(int location, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-4</anchor>
            <arglist>(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-5</anchor>
            <arglist>(int location, const QVector2D &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-6</anchor>
            <arglist>(int location, const QVector3D &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-7</anchor>
            <arglist>(int location, const QVector4D &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-8</anchor>
            <arglist>(int location, const QColor &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-9</anchor>
            <arglist>(int location, const GLfloat * values, int columns, int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-10</anchor>
            <arglist>(const char * name, GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-11</anchor>
            <arglist>(const char * name, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-12</anchor>
            <arglist>(const char * name, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-13</anchor>
            <arglist>(const char * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-14</anchor>
            <arglist>(const char * name, const QVector2D &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-15</anchor>
            <arglist>(const char * name, const QVector3D &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-16</anchor>
            <arglist>(const char * name, const QVector4D &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-17</anchor>
            <arglist>(const char * name, const QColor &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeValue-18</anchor>
            <arglist>(const char * name, const GLfloat * values, int columns, int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray</anchor>
            <arglist>(int location, const GLfloat * values, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-2</anchor>
            <arglist>(int location, const QVector2D * values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-3</anchor>
            <arglist>(int location, const QVector3D * values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-4</anchor>
            <arglist>(int location, const QVector4D * values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-5</anchor>
            <arglist>(int location, GLenum type, const void * values, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-6</anchor>
            <arglist>(const char * name, const GLfloat * values, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-7</anchor>
            <arglist>(const char * name, const QVector2D * values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-8</anchor>
            <arglist>(const char * name, const QVector3D * values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-9</anchor>
            <arglist>(const char * name, const QVector4D * values, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeArray-10</anchor>
            <arglist>(const char * name, GLenum type, const void * values, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeBuffer</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeBuffer</anchor>
            <arglist>(int location, GLenum type, int offset, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributeBuffer</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setAttributeBuffer-2</anchor>
            <arglist>(const char * name, GLenum type, int offset, int tupleSize, int stride)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enableAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>enableAttributeArray</anchor>
            <arglist>(int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enableAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>enableAttributeArray-2</anchor>
            <arglist>(const char * name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disableAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>disableAttributeArray</anchor>
            <arglist>(int location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>disableAttributeArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>disableAttributeArray-2</anchor>
            <arglist>(const char * name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>uniformLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>uniformLocation</anchor>
            <arglist>(const char * name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>uniformLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>uniformLocation-2</anchor>
            <arglist>(const QByteArray &amp; name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>uniformLocation</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>uniformLocation-3</anchor>
            <arglist>(const QString &amp; name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue</anchor>
            <arglist>(int location, GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-2</anchor>
            <arglist>(int location, GLint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-3</anchor>
            <arglist>(int location, GLuint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-4</anchor>
            <arglist>(int location, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-5</anchor>
            <arglist>(int location, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-6</anchor>
            <arglist>(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-7</anchor>
            <arglist>(int location, const QVector2D &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-8</anchor>
            <arglist>(int location, const QVector3D &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-9</anchor>
            <arglist>(int location, const QVector4D &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-10</anchor>
            <arglist>(int location, const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-11</anchor>
            <arglist>(int location, const QPoint &amp; point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-12</anchor>
            <arglist>(int location, const QPointF &amp; point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-13</anchor>
            <arglist>(int location, const QSize &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-14</anchor>
            <arglist>(int location, const QSizeF &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-15</anchor>
            <arglist>(int location, const QMatrix2x2 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-16</anchor>
            <arglist>(int location, const QMatrix2x3 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-17</anchor>
            <arglist>(int location, const QMatrix2x4 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-18</anchor>
            <arglist>(int location, const QMatrix3x2 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-19</anchor>
            <arglist>(int location, const QMatrix3x3 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-20</anchor>
            <arglist>(int location, const QMatrix3x4 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-21</anchor>
            <arglist>(int location, const QMatrix4x2 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-22</anchor>
            <arglist>(int location, const QMatrix4x3 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-23</anchor>
            <arglist>(int location, const QMatrix4x4 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-48</anchor>
            <arglist>(int location, const GLfloat[2][2] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-49</anchor>
            <arglist>(int location, const GLfloat[3][3] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-50</anchor>
            <arglist>(int location, const GLfloat[4][4] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-24</anchor>
            <arglist>(int location, const QTransform &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-25</anchor>
            <arglist>(const char * name, GLfloat value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-26</anchor>
            <arglist>(const char * name, GLint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-27</anchor>
            <arglist>(const char * name, GLuint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-28</anchor>
            <arglist>(const char * name, GLfloat x, GLfloat y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-29</anchor>
            <arglist>(const char * name, GLfloat x, GLfloat y, GLfloat z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-30</anchor>
            <arglist>(const char * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-31</anchor>
            <arglist>(const char * name, const QVector2D &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-32</anchor>
            <arglist>(const char * name, const QVector3D &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-33</anchor>
            <arglist>(const char * name, const QVector4D &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-34</anchor>
            <arglist>(const char * name, const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-35</anchor>
            <arglist>(const char * name, const QPoint &amp; point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-36</anchor>
            <arglist>(const char * name, const QPointF &amp; point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-37</anchor>
            <arglist>(const char * name, const QSize &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-38</anchor>
            <arglist>(const char * name, const QSizeF &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-39</anchor>
            <arglist>(const char * name, const QMatrix2x2 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-40</anchor>
            <arglist>(const char * name, const QMatrix2x3 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-41</anchor>
            <arglist>(const char * name, const QMatrix2x4 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-42</anchor>
            <arglist>(const char * name, const QMatrix3x2 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-43</anchor>
            <arglist>(const char * name, const QMatrix3x3 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-44</anchor>
            <arglist>(const char * name, const QMatrix3x4 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-45</anchor>
            <arglist>(const char * name, const QMatrix4x2 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-46</anchor>
            <arglist>(const char * name, const QMatrix4x3 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-47</anchor>
            <arglist>(const char * name, const QMatrix4x4 &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-51</anchor>
            <arglist>(const char * name, const GLfloat[2][2] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-52</anchor>
            <arglist>(const char * name, const GLfloat[3][3] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-53</anchor>
            <arglist>(const char * name, const GLfloat[4][4] value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValue</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValue-54</anchor>
            <arglist>(const char * name, const QTransform &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray</anchor>
            <arglist>(int location, const GLfloat * values, int count, int tupleSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-2</anchor>
            <arglist>(int location, const GLint * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-3</anchor>
            <arglist>(int location, const GLuint * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-4</anchor>
            <arglist>(int location, const QVector2D * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-5</anchor>
            <arglist>(int location, const QVector3D * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-6</anchor>
            <arglist>(int location, const QVector4D * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-7</anchor>
            <arglist>(int location, const QMatrix2x2 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-8</anchor>
            <arglist>(int location, const QMatrix2x3 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-9</anchor>
            <arglist>(int location, const QMatrix2x4 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-10</anchor>
            <arglist>(int location, const QMatrix3x2 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-11</anchor>
            <arglist>(int location, const QMatrix3x3 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-12</anchor>
            <arglist>(int location, const QMatrix3x4 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-13</anchor>
            <arglist>(int location, const QMatrix4x2 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-14</anchor>
            <arglist>(int location, const QMatrix4x3 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-15</anchor>
            <arglist>(int location, const QMatrix4x4 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-18</anchor>
            <arglist>(const char * name, const GLfloat * values, int count, int tupleSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-16</anchor>
            <arglist>(const char * name, const GLint * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-17</anchor>
            <arglist>(const char * name, const GLuint * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-19</anchor>
            <arglist>(const char * name, const QVector2D * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-20</anchor>
            <arglist>(const char * name, const QVector3D * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-21</anchor>
            <arglist>(const char * name, const QVector4D * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-22</anchor>
            <arglist>(const char * name, const QMatrix2x2 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-23</anchor>
            <arglist>(const char * name, const QMatrix2x3 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-24</anchor>
            <arglist>(const char * name, const QMatrix2x4 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-25</anchor>
            <arglist>(const char * name, const QMatrix3x2 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-26</anchor>
            <arglist>(const char * name, const QMatrix3x3 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-27</anchor>
            <arglist>(const char * name, const QMatrix3x4 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-28</anchor>
            <arglist>(const char * name, const QMatrix4x2 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-29</anchor>
            <arglist>(const char * name, const QMatrix4x3 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUniformValueArray</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>setUniformValueArray-30</anchor>
            <arglist>(const char * name, const QMatrix4x4 * values, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasOpenGLShaderPrograms</name>
            <anchorfile>qopenglshaderprogram.html</anchorfile>
            <anchor>hasOpenGLShaderPrograms</anchor>
            <arglist>(QOpenGLContext * context)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QBackingStore</name>
        <filename>qbackingstore.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBackingStore</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>QBackingStore</anchor>
            <arglist>(QWindow * window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QBackingStore</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>dtor.QBackingStore</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWindow *</type>
            <name>window</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>window</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPaintDevice *</type>
            <name>paintDevice</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>paintDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>flush</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>flush</anchor>
            <arglist>(const QRegion &amp; region, QWindow * win, const QPoint &amp; offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(const QSize &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>scroll</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>scroll</anchor>
            <arglist>(const QRegion &amp; area, int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginPaint</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>beginPaint</anchor>
            <arglist>(const QRegion &amp; region)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endPaint</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>endPaint</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStaticContents</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>setStaticContents</anchor>
            <arglist>(const QRegion &amp; region)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>staticContents</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>staticContents</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasStaticContents</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>hasStaticContents</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPlatformBackingStore *</type>
            <name>handle</name>
            <anchorfile>qbackingstore.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QBrush</name>
        <filename>qbrush.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-2</anchor>
            <arglist>(Qt::BrushStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-3</anchor>
            <arglist>(const QColor &amp; color, Qt::BrushStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-4</anchor>
            <arglist>(Qt::GlobalColor color, Qt::BrushStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-5</anchor>
            <arglist>(const QColor &amp; color, const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-6</anchor>
            <arglist>(Qt::GlobalColor color, const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-7</anchor>
            <arglist>(const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-8</anchor>
            <arglist>(const QImage &amp; image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-9</anchor>
            <arglist>(const QBrush &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>QBrush-10</anchor>
            <arglist>(const QGradient &amp; gradient)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QBrush</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>dtor.QBrush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush &amp;</type>
            <name>operator=</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QBrush &amp; brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QBrush &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::BrushStyle</type>
            <name>style</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>style</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyle</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>setStyle</anchor>
            <arglist>(Qt::BrushStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMatrix &amp;</type>
            <name>matrix</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>matrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrix</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>setMatrix</anchor>
            <arglist>(const QMatrix &amp; matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>transform</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>transform</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransform</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>setTransform</anchor>
            <arglist>(const QTransform &amp; matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>texture</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>texture</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTexture</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>setTexture</anchor>
            <arglist>(const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>textureImage</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>textureImage</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureImage</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>setTextureImage</anchor>
            <arglist>(const QImage &amp; image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QColor &amp;</type>
            <name>color</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>color</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>setColor</anchor>
            <arglist>(const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>setColor-2</anchor>
            <arglist>(Qt::GlobalColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QGradient *</type>
            <name>gradient</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>gradient</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isOpaque</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>isOpaque</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QBrush &amp; brush) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qbrush.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QBrush &amp; brush) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGradient</name>
        <filename>qgradient.html</filename>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinearGradient">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RadialGradient">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConicalGradient">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoGradient">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Spread</name>
            <anchor>Spread-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PadSpread">
            <anchor>Spread-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReflectSpread">
            <anchor>Spread-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RepeatSpread">
            <anchor>Spread-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CoordinateMode</name>
            <anchor>CoordinateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LogicalMode">
            <anchor>CoordinateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StretchToDeviceMode">
            <anchor>CoordinateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ObjectBoundingMode">
            <anchor>CoordinateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSpread</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>setSpread</anchor>
            <arglist>(Spread method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Spread</type>
            <name>spread</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>spread</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColorAt</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>setColorAt</anchor>
            <arglist>(qreal position, const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStops</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>setStops</anchor>
            <arglist>(const QGradientStops &amp; stopPoints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGradientStops</type>
            <name>stops</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>stops</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CoordinateMode</type>
            <name>coordinateMode</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>coordinateMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCoordinateMode</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>setCoordinateMode</anchor>
            <arglist>(CoordinateMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QGradient &amp; gradient) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgradient.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QGradient &amp; gradient) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLinearGradient</name>
        <filename>qlineargradient.html</filename>
        <base>QGradient</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLinearGradient</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>QLinearGradient</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLinearGradient</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>QLinearGradient-2</anchor>
            <arglist>(const QPointF &amp; start, const QPointF &amp; finalStop)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLinearGradient</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>QLinearGradient-3</anchor>
            <arglist>(qreal x1, qreal y1, qreal x2, qreal y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>start</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>start</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStart</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>setStart</anchor>
            <arglist>(const QPointF &amp; start)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStart</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>setStart-2</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>finalStop</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>finalStop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFinalStop</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>setFinalStop</anchor>
            <arglist>(const QPointF &amp; stop)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFinalStop</name>
            <anchorfile>qlineargradient.html</anchorfile>
            <anchor>setFinalStop-2</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRadialGradient</name>
        <filename>qradialgradient.html</filename>
        <base>QGradient</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadialGradient</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>QRadialGradient</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadialGradient</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>QRadialGradient-2</anchor>
            <arglist>(const QPointF &amp; center, qreal radius, const QPointF &amp; focalPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadialGradient</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>QRadialGradient-3</anchor>
            <arglist>(qreal cx, qreal cy, qreal radius, qreal fx, qreal fy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadialGradient</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>QRadialGradient-4</anchor>
            <arglist>(const QPointF &amp; center, qreal radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadialGradient</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>QRadialGradient-5</anchor>
            <arglist>(qreal cx, qreal cy, qreal radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadialGradient</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>QRadialGradient-6</anchor>
            <arglist>(const QPointF &amp; center, qreal centerRadius, const QPointF &amp; focalPoint, qreal focalRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadialGradient</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>QRadialGradient-7</anchor>
            <arglist>(qreal cx, qreal cy, qreal centerRadius, qreal fx, qreal fy, qreal focalRadius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>center</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenter</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>setCenter</anchor>
            <arglist>(const QPointF &amp; center)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenter</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>setCenter-2</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>focalPoint</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>focalPoint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocalPoint</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>setFocalPoint</anchor>
            <arglist>(const QPointF &amp; focalPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocalPoint</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>setFocalPoint-2</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>radius</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>radius</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>setRadius</anchor>
            <arglist>(qreal radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>centerRadius</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>centerRadius</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenterRadius</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>setCenterRadius</anchor>
            <arglist>(qreal radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>focalRadius</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>focalRadius</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocalRadius</name>
            <anchorfile>qradialgradient.html</anchorfile>
            <anchor>setFocalRadius</anchor>
            <arglist>(qreal radius)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QConicalGradient</name>
        <filename>qconicalgradient.html</filename>
        <base>QGradient</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QConicalGradient</name>
            <anchorfile>qconicalgradient.html</anchorfile>
            <anchor>QConicalGradient</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QConicalGradient</name>
            <anchorfile>qconicalgradient.html</anchorfile>
            <anchor>QConicalGradient-2</anchor>
            <arglist>(const QPointF &amp; center, qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QConicalGradient</name>
            <anchorfile>qconicalgradient.html</anchorfile>
            <anchor>QConicalGradient-3</anchor>
            <arglist>(qreal cx, qreal cy, qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>center</name>
            <anchorfile>qconicalgradient.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenter</name>
            <anchorfile>qconicalgradient.html</anchorfile>
            <anchor>setCenter</anchor>
            <arglist>(const QPointF &amp; center)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenter</name>
            <anchorfile>qconicalgradient.html</anchorfile>
            <anchor>setCenter-2</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>angle</name>
            <anchorfile>qconicalgradient.html</anchorfile>
            <anchor>angle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAngle</name>
            <anchorfile>qconicalgradient.html</anchorfile>
            <anchor>setAngle</anchor>
            <arglist>(qreal angle)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QColor</name>
        <filename>qcolor.html</filename>
        <member kind="enum">
            <name>Spec</name>
            <anchor>Spec-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invalid">
            <anchor>Spec-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Rgb">
            <anchor>Spec-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Hsv">
            <anchor>Spec-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cmyk">
            <anchor>Spec-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Hsl">
            <anchor>Spec-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QColor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QColor-8</anchor>
            <arglist>(Qt::GlobalColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QColor-2</anchor>
            <arglist>(int r, int g, int b, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QColor-3</anchor>
            <arglist>(QRgb color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QColor-4</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QColor-5</anchor>
            <arglist>(const char * name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>QColor-6</anchor>
            <arglist>(const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNamedColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setNamedColor</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>colorNames</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>colorNames</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Spec</type>
            <name>spec</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>spec</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>alpha</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>alpha</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlpha</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setAlpha</anchor>
            <arglist>(int alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>alphaF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>alphaF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlphaF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setAlphaF</anchor>
            <arglist>(qreal alpha)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>red</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>red</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>green</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>green</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>blue</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>blue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRed</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setRed</anchor>
            <arglist>(int red)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGreen</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setGreen</anchor>
            <arglist>(int green)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlue</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setBlue</anchor>
            <arglist>(int blue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>redF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>redF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>greenF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>greenF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>blueF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>blueF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRedF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setRedF</anchor>
            <arglist>(qreal red)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGreenF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setGreenF</anchor>
            <arglist>(qreal green)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlueF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setBlueF</anchor>
            <arglist>(qreal blue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>getRgb</anchor>
            <arglist>(int * r, int * g, int * b, int * a) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setRgb</anchor>
            <arglist>(int r, int g, int b, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getRgbF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>getRgbF</anchor>
            <arglist>(qreal * r, qreal * g, qreal * b, qreal * a) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRgbF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setRgbF</anchor>
            <arglist>(qreal r, qreal g, qreal b, qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgb</type>
            <name>rgba</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>rgba</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRgba</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setRgba</anchor>
            <arglist>(QRgb rgba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRgb</type>
            <name>rgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>rgb</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setRgb-2</anchor>
            <arglist>(QRgb rgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>hue</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>saturation</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>saturation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>hsvHue</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hsvHue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>hsvSaturation</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hsvSaturation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>value</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>hueF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hueF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>saturationF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>saturationF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>hsvHueF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hsvHueF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>hsvSaturationF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hsvSaturationF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>valueF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>valueF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getHsv</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>getHsv</anchor>
            <arglist>(int * h, int * s, int * v, int * a) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHsv</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setHsv</anchor>
            <arglist>(int h, int s, int v, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getHsvF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>getHsvF</anchor>
            <arglist>(qreal * h, qreal * s, qreal * v, qreal * a) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHsvF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setHsvF</anchor>
            <arglist>(qreal h, qreal s, qreal v, qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>cyan</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>cyan</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>magenta</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>magenta</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>yellow</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>yellow</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>black</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>black</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>cyanF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>cyanF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>magentaF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>magentaF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>yellowF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>yellowF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>blackF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>blackF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getCmyk</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>getCmyk</anchor>
            <arglist>(int * c, int * m, int * y, int * k, int * a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCmyk</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setCmyk</anchor>
            <arglist>(int c, int m, int y, int k, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getCmykF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>getCmykF</anchor>
            <arglist>(qreal * c, qreal * m, qreal * y, qreal * k, qreal * a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCmykF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setCmykF</anchor>
            <arglist>(qreal c, qreal m, qreal y, qreal k, qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>hslHue</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hslHue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>hslSaturation</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hslSaturation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lightness</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>lightness</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>hslHueF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hslHueF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>hslSaturationF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>hslSaturationF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>lightnessF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>lightnessF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getHsl</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>getHsl</anchor>
            <arglist>(int * h, int * s, int * l, int * a) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHsl</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setHsl</anchor>
            <arglist>(int h, int s, int l, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getHslF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>getHslF</anchor>
            <arglist>(qreal * h, qreal * s, qreal * l, qreal * a) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHslF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>setHslF</anchor>
            <arglist>(qreal h, qreal s, qreal l, qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>toRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>toRgb</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>toHsv</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>toHsv</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>toCmyk</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>toCmyk</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>toHsl</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>toHsl</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>convertTo</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>convertTo</anchor>
            <arglist>(Spec colorSpec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromRgb</anchor>
            <arglist>(QRgb rgb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromRgba</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromRgba</anchor>
            <arglist>(QRgb rgba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromRgb</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromRgb-2</anchor>
            <arglist>(int r, int g, int b, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromRgbF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromRgbF</anchor>
            <arglist>(qreal r, qreal g, qreal b, qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromHsv</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromHsv</anchor>
            <arglist>(int h, int s, int v, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromHsvF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromHsvF</anchor>
            <arglist>(qreal h, qreal s, qreal v, qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromCmyk</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromCmyk</anchor>
            <arglist>(int c, int m, int y, int k, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromCmykF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromCmykF</anchor>
            <arglist>(qreal c, qreal m, qreal y, qreal k, qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromHsl</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromHsl</anchor>
            <arglist>(int h, int s, int l, int a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QColor</type>
            <name>fromHslF</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>fromHslF</anchor>
            <arglist>(qreal h, qreal s, qreal l, qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>light</name>
            <anchorfile>qcolor-obsolete.html</anchorfile>
            <anchor>light</anchor>
            <arglist>(int factor) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>lighter</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>lighter</anchor>
            <arglist>(int factor) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>dark</name>
            <anchorfile>qcolor-obsolete.html</anchorfile>
            <anchor>dark</anchor>
            <arglist>(int factor) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>darker</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>darker</anchor>
            <arglist>(int factor) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor &amp;</type>
            <name>operator=</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor &amp;</type>
            <name>operator=</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>operator=-2</anchor>
            <arglist>(Qt::GlobalColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QColor &amp; color) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QColor &amp; color) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isValidColor</name>
            <anchorfile>qcolor.html</anchorfile>
            <anchor>isValidColor</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMatrix</name>
        <filename>qmatrix.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>QMatrix</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>QMatrix-3</anchor>
            <arglist>(qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMatrix</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>QMatrix-4</anchor>
            <arglist>(const QMatrix &amp; matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrix</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>setMatrix</anchor>
            <arglist>(qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m11</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>m11</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m12</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>m12</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m21</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>m21</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m22</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>m22</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dx</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>dx</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dy</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>dy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-2</anchor>
            <arglist>(int x, int y, int * tx, int * ty) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map</anchor>
            <arglist>(qreal x, qreal y, qreal * tx, qreal * ty) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>mapRect</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>mapRect-2</anchor>
            <arglist>(const QRect &amp; rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRect</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>mapRect</anchor>
            <arglist>(const QRectF &amp; rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-4</anchor>
            <arglist>(const QPoint &amp; point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-3</anchor>
            <arglist>(const QPointF &amp; point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLine</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-6</anchor>
            <arglist>(const QLine &amp; line) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-5</anchor>
            <arglist>(const QLineF &amp; line) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-7</anchor>
            <arglist>(const QPolygonF &amp; polygon) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-8</anchor>
            <arglist>(const QPolygon &amp; polygon) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-9</anchor>
            <arglist>(const QRegion &amp; region) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>map</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>map-10</anchor>
            <arglist>(const QPainterPath &amp; path) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>mapToPolygon</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>mapToPolygon</anchor>
            <arglist>(const QRect &amp; rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isIdentity</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>isIdentity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix &amp;</type>
            <name>translate</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix &amp;</type>
            <name>scale</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>scale</anchor>
            <arglist>(qreal sx, qreal sy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix &amp;</type>
            <name>shear</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>shear</anchor>
            <arglist>(qreal sh, qreal sv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix &amp;</type>
            <name>rotate</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>rotate</anchor>
            <arglist>(qreal degrees)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInvertible</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>isInvertible</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>determinant</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>determinant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix</type>
            <name>inverted</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>inverted</anchor>
            <arglist>(bool * invertible) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QMatrix &amp; matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QMatrix &amp; matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix &amp;</type>
            <name>operator*=</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator*=</anchor>
            <arglist>(const QMatrix &amp; matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix</type>
            <name>operator*</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator*</anchor>
            <arglist>(const QMatrix &amp; matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix &amp;</type>
            <name>operator=</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QMatrix &amp; matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qmatrix.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPagedPaintDevice</name>
        <filename>qpagedpaintdevice.html</filename>
        <base>QPaintDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPagedPaintDevice</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>QPagedPaintDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPagedPaintDevice</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>dtor.QPagedPaintDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>newPage</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>newPage</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="enum">
            <name>PageSize</name>
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="A4">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="B5">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Letter">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Legal">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Executive">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="A0">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="A1">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="A2">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="A3">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="A5">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="A6">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="A7">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="A8">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="A9">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="B0">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="B1">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="B10">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="B2">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="B3">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="B4">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="B6">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="B7">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="B8">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="B9">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="C5E">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Comm10E">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DLE">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Folio">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ledger">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tabloid">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Custom">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NPageSize">
            <anchor>PageSize-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setPageSize</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>setPageSize</anchor>
            <arglist>(PageSize size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PageSize</type>
            <name>pageSize</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>pageSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setPageSizeMM</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>setPageSizeMM</anchor>
            <arglist>(const QSizeF &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>pageSizeMM</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>pageSizeMM</anchor>
            <arglist>() const</arglist>
        </member>
        <class>QPagedPaintDevice::Margins</class>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setMargins</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>setMargins</anchor>
            <arglist>(const Margins &amp; margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Margins</type>
            <name>margins</name>
            <anchorfile>qpagedpaintdevice.html</anchorfile>
            <anchor>margins</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPagedPaintDevice::Margins</name>
        <filename>qpagedpaintdevice-margins.html</filename>
    </compound>
    <compound kind="class">
        <name>QPaintDevice</name>
        <filename>qpaintdevice.html</filename>
        <member kind="enum">
            <name>PaintDeviceMetric</name>
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PdmWidth">
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PdmHeight">
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PdmWidthMM">
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PdmHeightMM">
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PdmNumColors">
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PdmDepth">
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PdmDpiX">
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PdmDpiY">
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PdmPhysicalDpiX">
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PdmPhysicalDpiY">
            <anchor>PaintDeviceMetric-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPaintDevice</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>dtor.QPaintDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>paintingActive</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>paintingActive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QPaintEngine *</type>
            <name>paintEngine</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>paintEngine</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>widthMM</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>widthMM</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>heightMM</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>heightMM</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>logicalDpiX</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>logicalDpiX</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>logicalDpiY</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>logicalDpiY</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>physicalDpiX</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>physicalDpiX</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>physicalDpiY</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>physicalDpiY</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>colorCount</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>colorCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>depth</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>depth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QPaintDevice</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>QPaintDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>metric</name>
            <anchorfile>qpaintdevice.html</anchorfile>
            <anchor>metric</anchor>
            <arglist>(PaintDeviceMetric metric) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextItem</name>
        <filename>qtextitem.html</filename>
        <member kind="enum">
            <name>RenderFlag</name>
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightToLeft">
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Overline">
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Underline">
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StrikeOut">
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dummy">
            <anchor>RenderFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTextItem::RenderFlag">
            <name>RenderFlags</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>RenderFlags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>descent</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>descent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>ascent</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>ascent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RenderFlags</type>
            <name>renderFlags</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>renderFlags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qtextitem.html</anchorfile>
            <anchor>font</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPaintEngine</name>
        <filename>qpaintengine.html</filename>
        <member kind="enum">
            <name>PaintEngineFeature</name>
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PrimitiveTransform">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PatternTransform">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PixmapTransform">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PatternBrush">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LinearGradientFill">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RadialGradientFill">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConicalGradientFill">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlphaBlend">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PorterDuff">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PainterPaths">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Antialiasing">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BrushStroke">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConstantOpacity">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MaskedBrush">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PerspectiveTransform">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlendModes">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ObjectBoundingModeGradients">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RasterOpModes">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PaintOutsidePaintEvent">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllFeatures">
            <anchor>PaintEngineFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QPaintEngine::PaintEngineFeature">
            <name>PaintEngineFeatures</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>PaintEngineFeatures-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>DirtyFlag</name>
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyPen">
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyBrush">
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyBrushOrigin">
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyFont">
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyBackground">
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyBackgroundMode">
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyTransform">
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyClipRegion">
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyClipPath">
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyHints">
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyCompositionMode">
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyClipEnabled">
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirtyOpacity">
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllDirty">
            <anchor>DirtyFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QPaintEngine::DirtyFlag">
            <name>DirtyFlags</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>DirtyFlags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PolygonDrawMode</name>
            <anchor>PolygonDrawMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OddEvenMode">
            <anchor>PolygonDrawMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WindingMode">
            <anchor>PolygonDrawMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConvexMode">
            <anchor>PolygonDrawMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PolylineMode">
            <anchor>PolygonDrawMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPaintEngine</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>QPaintEngine</anchor>
            <arglist>(QFlags&lt;QPaintEngine::PaintEngineFeature&gt; caps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPaintEngine</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>dtor.QPaintEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActive</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>setActive</anchor>
            <arglist>(bool state)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>begin</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>(QPaintDevice * pdev) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>end</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>updateState</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>updateState</anchor>
            <arglist>(const QPaintEngineState &amp; state) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawRects</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawRects-2</anchor>
            <arglist>(const QRect * rects, int rectCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawRects</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawRects</anchor>
            <arglist>(const QRectF * rects, int rectCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawLines</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawLines-2</anchor>
            <arglist>(const QLine * lines, int lineCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawLines</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawLines</anchor>
            <arglist>(const QLineF * lines, int lineCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawEllipse</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawEllipse</anchor>
            <arglist>(const QRectF &amp; rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawEllipse</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawEllipse-2</anchor>
            <arglist>(const QRect &amp; rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPath</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawPath</anchor>
            <arglist>(const QPainterPath &amp; path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPoints</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawPoints</anchor>
            <arglist>(const QPointF * points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPoints</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawPoints-2</anchor>
            <arglist>(const QPoint * points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPolygon</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawPolygon</anchor>
            <arglist>(const QPointF * points, int pointCount, PolygonDrawMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPolygon</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawPolygon-2</anchor>
            <arglist>(const QPoint * points, int pointCount, PolygonDrawMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>drawPixmap</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawPixmap</anchor>
            <arglist>(const QRectF &amp; r, const QPixmap &amp; pm, const QRectF &amp; sr) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawTextItem</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawTextItem</anchor>
            <arglist>(const QPointF &amp; p, const QTextItem &amp; textItem)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawTiledPixmap</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawTiledPixmap</anchor>
            <arglist>(const QRectF &amp; rect, const QPixmap &amp; pixmap, const QPointF &amp; p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawImage</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>drawImage</anchor>
            <arglist>(const QRectF &amp; rectangle, const QImage &amp; image, const QRectF &amp; sr, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPaintDevice *</type>
            <name>paintDevice</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>paintDevice</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="X11">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Windows">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QuickDraw">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CoreGraphics">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MacPrinter">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QWindowSystem">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PostScript">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenGL">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Picture">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SVG">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Raster">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Direct3D">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Pdf">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenVG">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenGL2">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PaintBuffer">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Blitter">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="User">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MaxUser">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual Type</type>
            <name>type</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFeature</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>hasFeature</anchor>
            <arglist>(QFlags&lt;QPaintEngine::PaintEngineFeature&gt; feature) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainter *</type>
            <name>painter</name>
            <anchorfile>qpaintengine.html</anchorfile>
            <anchor>painter</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPaintEngineState</name>
        <filename>qpaintenginestate.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPaintEngine::DirtyFlags</type>
            <name>state</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPen</type>
            <name>pen</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>pen</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>brush</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>brush</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>brushOrigin</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>brushOrigin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>backgroundBrush</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>backgroundBrush</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::BGMode</type>
            <name>backgroundMode</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>backgroundMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>font</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix</type>
            <name>matrix</name>
            <anchorfile>qpaintenginestate-obsolete.html</anchorfile>
            <anchor>matrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>transform</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>transform</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ClipOperation</type>
            <name>clipOperation</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>clipOperation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>clipRegion</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>clipRegion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>clipPath</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>clipPath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isClipEnabled</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>isClipEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainter::RenderHints</type>
            <name>renderHints</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>renderHints</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainter::CompositionMode</type>
            <name>compositionMode</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>compositionMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>opacity</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>opacity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainter *</type>
            <name>painter</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>painter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>brushNeedsResolving</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>brushNeedsResolving</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>penNeedsResolving</name>
            <anchorfile>qpaintenginestate.html</anchorfile>
            <anchor>penNeedsResolving</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRasterPaintEngine</name>
        <filename>qrasterpaintengine.html</filename>
        <base>QPaintEngine</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRasterPaintEngine</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>QRasterPaintEngine</anchor>
            <arglist>(QPaintDevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRasterPaintEngine</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>dtor.QRasterPaintEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>begin</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>(QPaintDevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>end</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPolygon</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawPolygon</anchor>
            <arglist>(const QPointF * points, int pointCount, PolygonDrawMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPolygon</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawPolygon-2</anchor>
            <arglist>(const QPoint * points, int pointCount, PolygonDrawMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawEllipse</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawEllipse</anchor>
            <arglist>(const QRectF &amp; rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fillRect</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>fillRect</anchor>
            <arglist>(const QRectF &amp; r, const QBrush &amp; brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fillRect</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>fillRect-2</anchor>
            <arglist>(const QRectF &amp; r, const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawRects</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawRects</anchor>
            <arglist>(const QRect * rects, int rectCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawRects</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawRects-2</anchor>
            <arglist>(const QRectF * rects, int rectCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPixmap</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawPixmap</anchor>
            <arglist>(const QRectF &amp; r, const QPixmap &amp; pixmap, const QRectF &amp; sr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawImage</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawImage</anchor>
            <arglist>(const QRectF &amp; r, const QImage &amp; img, const QRectF &amp; sr, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawTiledPixmap</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawTiledPixmap</anchor>
            <arglist>(const QRectF &amp; r, const QPixmap &amp; pixmap, const QPointF &amp; sr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawTextItem</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawTextItem</anchor>
            <arglist>(const QPointF &amp; p, const QTextItem &amp; textItem)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawLines</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawLines</anchor>
            <arglist>(const QLine * lines, int lineCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawLines</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawLines-2</anchor>
            <arglist>(const QLineF * lines, int lineCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPoints</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawPoints</anchor>
            <arglist>(const QPointF * points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawPoints</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawPoints-2</anchor>
            <arglist>(const QPoint * points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawStaticTextItem</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>drawStaticTextItem</anchor>
            <arglist>(QStaticTextItem * textItem)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Type</type>
            <name>type</name>
            <anchorfile>qrasterpaintengine.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPainter</name>
        <filename>qpainter.html</filename>
        <member kind="enum">
            <name>RenderHint</name>
            <anchor>RenderHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Antialiasing">
            <anchor>RenderHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextAntialiasing">
            <anchor>RenderHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SmoothPixmapTransform">
            <anchor>RenderHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HighQualityAntialiasing">
            <anchor>RenderHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NonCosmeticDefaultPen">
            <anchor>RenderHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Qt4CompatiblePainting">
            <anchor>RenderHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QPainter::RenderHint">
            <name>RenderHints</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>RenderHints-typedef</anchor>
            <arglist></arglist>
        </member>
        <class>QPainter::PixmapFragment</class>
        <member kind="enum">
            <name>PixmapFragmentHint</name>
            <anchor>PixmapFragmentHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpaqueHint">
            <anchor>PixmapFragmentHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QPainter::PixmapFragmentHint">
            <name>PixmapFragmentHints</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>PixmapFragmentHints-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPainter</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>QPainter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPainter</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>QPainter-2</anchor>
            <arglist>(QPaintDevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPainter</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>dtor.QPainter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPaintDevice *</type>
            <name>device</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>begin</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>(QPaintDevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>end</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>initFrom</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>initFrom</anchor>
            <arglist>(const QPaintDevice * device)</arglist>
        </member>
        <member kind="enum">
            <name>CompositionMode</name>
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_SourceOver">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_DestinationOver">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_Clear">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_Source">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_Destination">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_SourceIn">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_DestinationIn">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_SourceOut">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_DestinationOut">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_SourceAtop">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_DestinationAtop">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_Xor">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_Plus">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_Multiply">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_Screen">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_Overlay">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_Darken">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_Lighten">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_ColorDodge">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_ColorBurn">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_HardLight">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_SoftLight">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_Difference">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompositionMode_Exclusion">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RasterOp_SourceOrDestination">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RasterOp_SourceAndDestination">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RasterOp_SourceXorDestination">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RasterOp_NotSourceAndNotDestination">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RasterOp_NotSourceOrNotDestination">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RasterOp_NotSourceXorDestination">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RasterOp_NotSource">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RasterOp_NotSourceAndDestination">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RasterOp_SourceAndNotDestination">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RasterOp_NotSourceOrDestination">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RasterOp_SourceOrNotDestination">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RasterOp_ClearDestination">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RasterOp_SetDestination">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RasterOp_NotDestination">
            <anchor>CompositionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCompositionMode</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setCompositionMode</anchor>
            <arglist>(CompositionMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CompositionMode</type>
            <name>compositionMode</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>compositionMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QFont &amp;</type>
            <name>font</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>font</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(const QFont &amp; font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontMetrics</type>
            <name>fontMetrics</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fontMetrics</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontInfo</type>
            <name>fontInfo</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fontInfo</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPen</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setPen-2</anchor>
            <arglist>(const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPen</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setPen</anchor>
            <arglist>(const QPen &amp; pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPen</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setPen-3</anchor>
            <arglist>(Qt::PenStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPen &amp;</type>
            <name>pen</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>pen</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrush</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setBrush</anchor>
            <arglist>(const QBrush &amp; brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrush</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setBrush-2</anchor>
            <arglist>(Qt::BrushStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>brush</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>brush</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackgroundMode</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setBackgroundMode</anchor>
            <arglist>(Qt::BGMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::BGMode</type>
            <name>backgroundMode</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>backgroundMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>brushOrigin</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>brushOrigin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrushOrigin</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setBrushOrigin-3</anchor>
            <arglist>(int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrushOrigin</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setBrushOrigin-2</anchor>
            <arglist>(const QPoint &amp; position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrushOrigin</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setBrushOrigin</anchor>
            <arglist>(const QPointF &amp; position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackground</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setBackground</anchor>
            <arglist>(const QBrush &amp; brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QBrush &amp;</type>
            <name>background</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>background</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>opacity</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>opacity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOpacity</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setOpacity</anchor>
            <arglist>(qreal opacity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>clipRegion</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>clipRegion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>clipPath</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>clipPath</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setClipRect</anchor>
            <arglist>(const QRectF &amp; rectangle, Qt::ClipOperation operation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setClipRect-3</anchor>
            <arglist>(const QRect &amp; rectangle, Qt::ClipOperation operation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setClipRect-2</anchor>
            <arglist>(int x, int y, int width, int height, Qt::ClipOperation operation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipRegion</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setClipRegion</anchor>
            <arglist>(const QRegion &amp; region, Qt::ClipOperation operation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipPath</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setClipPath</anchor>
            <arglist>(const QPainterPath &amp; path, Qt::ClipOperation operation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClipping</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setClipping</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasClipping</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>hasClipping</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>clipBoundingRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>clipBoundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>save</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>save</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>restore</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>restore</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrix</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>setMatrix</anchor>
            <arglist>(const QMatrix &amp; matrix, bool combine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMatrix &amp;</type>
            <name>matrix</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>matrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMatrix &amp;</type>
            <name>deviceMatrix</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>deviceMatrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetMatrix</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>resetMatrix</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTransform</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setTransform</anchor>
            <arglist>(const QTransform &amp; transform, bool combine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QTransform &amp;</type>
            <name>transform</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>transform</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QTransform &amp;</type>
            <name>deviceTransform</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>deviceTransform</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetTransform</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>resetTransform</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorldMatrix</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>setWorldMatrix</anchor>
            <arglist>(const QMatrix &amp; matrix, bool combine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMatrix &amp;</type>
            <name>worldMatrix</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>worldMatrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorldTransform</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setWorldTransform</anchor>
            <arglist>(const QTransform &amp; matrix, bool combine)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QTransform &amp;</type>
            <name>worldTransform</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>worldTransform</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix</type>
            <name>combinedMatrix</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>combinedMatrix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>combinedTransform</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>combinedTransform</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrixEnabled</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>setMatrixEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>matrixEnabled</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>matrixEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorldMatrixEnabled</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setWorldMatrixEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>worldMatrixEnabled</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>worldMatrixEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>scale</anchor>
            <arglist>(qreal sx, qreal sy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shear</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>shear</anchor>
            <arglist>(qreal sh, qreal sv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rotate</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>rotate</anchor>
            <arglist>(qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const QPointF &amp; offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>translate-2</anchor>
            <arglist>(const QPoint &amp; offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>translate-3</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>window</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>window</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindow</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setWindow</anchor>
            <arglist>(const QRect &amp; rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindow</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setWindow-2</anchor>
            <arglist>(int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>viewport</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>viewport</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewport</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setViewport</anchor>
            <arglist>(const QRect &amp; rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewport</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setViewport-2</anchor>
            <arglist>(int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewTransformEnabled</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setViewTransformEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>viewTransformEnabled</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>viewTransformEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>strokePath</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>strokePath</anchor>
            <arglist>(const QPainterPath &amp; path, const QPen &amp; pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillPath</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillPath</anchor>
            <arglist>(const QPainterPath &amp; path, const QBrush &amp; brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPath</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPath</anchor>
            <arglist>(const QPainterPath &amp; path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPoint</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPoint</anchor>
            <arglist>(const QPointF &amp; position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPoint</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPoint-2</anchor>
            <arglist>(const QPoint &amp; position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPoint</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPoint-3</anchor>
            <arglist>(int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPoints</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPoints</anchor>
            <arglist>(const QPointF * points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPoints</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPoints-3</anchor>
            <arglist>(const QPolygonF &amp; points)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPoints</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPoints-2</anchor>
            <arglist>(const QPoint * points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPoints</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPoints-4</anchor>
            <arglist>(const QPolygon &amp; points)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLine</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLine</anchor>
            <arglist>(const QLineF &amp; line)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLine</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLine-2</anchor>
            <arglist>(const QLine &amp; line)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLine</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLine-5</anchor>
            <arglist>(int x1, int y1, int x2, int y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLine</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLine-3</anchor>
            <arglist>(const QPoint &amp; p1, const QPoint &amp; p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLine</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLine-4</anchor>
            <arglist>(const QPointF &amp; p1, const QPointF &amp; p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLines</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLines</anchor>
            <arglist>(const QLineF * lines, int lineCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLines</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLines-7</anchor>
            <arglist>(const QVector&lt;QLineF&gt; &amp; lines)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLines</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLines-3</anchor>
            <arglist>(const QPointF * pointPairs, int lineCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLines</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLines-5</anchor>
            <arglist>(const QVector&lt;QPointF&gt; &amp; pointPairs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLines</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLines-2</anchor>
            <arglist>(const QLine * lines, int lineCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLines</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLines-8</anchor>
            <arglist>(const QVector&lt;QLine&gt; &amp; lines)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLines</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLines-4</anchor>
            <arglist>(const QPoint * pointPairs, int lineCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawLines</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawLines-6</anchor>
            <arglist>(const QVector&lt;QPoint&gt; &amp; pointPairs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRect</anchor>
            <arglist>(const QRectF &amp; rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRect-3</anchor>
            <arglist>(int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRect-2</anchor>
            <arglist>(const QRect &amp; rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRects</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRects</anchor>
            <arglist>(const QRectF * rectangles, int rectCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRects</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRects-3</anchor>
            <arglist>(const QVector&lt;QRectF&gt; &amp; rectangles)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRects</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRects-2</anchor>
            <arglist>(const QRect * rectangles, int rectCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRects</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRects-4</anchor>
            <arglist>(const QVector&lt;QRect&gt; &amp; rectangles)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawEllipse</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawEllipse</anchor>
            <arglist>(const QRectF &amp; rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawEllipse</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawEllipse-2</anchor>
            <arglist>(const QRect &amp; rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawEllipse</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawEllipse-3</anchor>
            <arglist>(int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawEllipse</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawEllipse-4</anchor>
            <arglist>(const QPointF &amp; center, qreal rx, qreal ry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawEllipse</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawEllipse-5</anchor>
            <arglist>(const QPoint &amp; center, int rx, int ry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPolyline</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPolyline</anchor>
            <arglist>(const QPointF * points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPolyline</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPolyline-3</anchor>
            <arglist>(const QPolygonF &amp; points)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPolyline</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPolyline-2</anchor>
            <arglist>(const QPoint * points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPolyline</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPolyline-4</anchor>
            <arglist>(const QPolygon &amp; points)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPolygon</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPolygon</anchor>
            <arglist>(const QPointF * points, int pointCount, Qt::FillRule fillRule)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPolygon</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPolygon-3</anchor>
            <arglist>(const QPolygonF &amp; points, Qt::FillRule fillRule)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPolygon</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPolygon-2</anchor>
            <arglist>(const QPoint * points, int pointCount, Qt::FillRule fillRule)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPolygon</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPolygon-4</anchor>
            <arglist>(const QPolygon &amp; points, Qt::FillRule fillRule)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawConvexPolygon</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawConvexPolygon</anchor>
            <arglist>(const QPointF * points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawConvexPolygon</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawConvexPolygon-3</anchor>
            <arglist>(const QPolygonF &amp; polygon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawConvexPolygon</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawConvexPolygon-2</anchor>
            <arglist>(const QPoint * points, int pointCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawConvexPolygon</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawConvexPolygon-4</anchor>
            <arglist>(const QPolygon &amp; polygon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawArc</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawArc</anchor>
            <arglist>(const QRectF &amp; rectangle, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawArc</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawArc-2</anchor>
            <arglist>(const QRect &amp; rectangle, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawArc</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawArc-3</anchor>
            <arglist>(int x, int y, int width, int height, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPie</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPie</anchor>
            <arglist>(const QRectF &amp; rectangle, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPie</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPie-3</anchor>
            <arglist>(int x, int y, int width, int height, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPie</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPie-2</anchor>
            <arglist>(const QRect &amp; rectangle, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawChord</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawChord</anchor>
            <arglist>(const QRectF &amp; rectangle, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawChord</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawChord-3</anchor>
            <arglist>(int x, int y, int width, int height, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawChord</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawChord-2</anchor>
            <arglist>(const QRect &amp; rectangle, int startAngle, int spanAngle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRoundedRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRoundedRect</anchor>
            <arglist>(const QRectF &amp; rect, qreal xRadius, qreal yRadius, Qt::SizeMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRoundedRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRoundedRect-3</anchor>
            <arglist>(int x, int y, int w, int h, qreal xRadius, qreal yRadius, Qt::SizeMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRoundedRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawRoundedRect-2</anchor>
            <arglist>(const QRect &amp; rect, qreal xRadius, qreal yRadius, Qt::SizeMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRoundRect</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>drawRoundRect</anchor>
            <arglist>(const QRectF &amp; r, int xRnd, int yRnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRoundRect</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>drawRoundRect-3</anchor>
            <arglist>(int x, int y, int w, int h, int xRnd, int yRnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawRoundRect</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>drawRoundRect-2</anchor>
            <arglist>(const QRect &amp; r, int xRnd, int yRnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawTiledPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawTiledPixmap</anchor>
            <arglist>(const QRectF &amp; rectangle, const QPixmap &amp; pixmap, const QPointF &amp; position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawTiledPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawTiledPixmap-3</anchor>
            <arglist>(int x, int y, int width, int height, const QPixmap &amp; pixmap, int sx, int sy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawTiledPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawTiledPixmap-2</anchor>
            <arglist>(const QRect &amp; rectangle, const QPixmap &amp; pixmap, const QPoint &amp; position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPicture</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPicture</anchor>
            <arglist>(const QPointF &amp; point, const QPicture &amp; picture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPicture</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPicture-3</anchor>
            <arglist>(int x, int y, const QPicture &amp; picture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPicture</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPicture-2</anchor>
            <arglist>(const QPoint &amp; point, const QPicture &amp; picture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap</anchor>
            <arglist>(const QRectF &amp; target, const QPixmap &amp; pixmap, const QRectF &amp; source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-2</anchor>
            <arglist>(const QRect &amp; target, const QPixmap &amp; pixmap, const QRect &amp; source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-10</anchor>
            <arglist>(int x, int y, int w, int h, const QPixmap &amp; pixmap, int sx, int sy, int sw, int sh)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-11</anchor>
            <arglist>(int x, int y, const QPixmap &amp; pixmap, int sx, int sy, int sw, int sh)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-3</anchor>
            <arglist>(const QPointF &amp; point, const QPixmap &amp; pixmap, const QRectF &amp; source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-4</anchor>
            <arglist>(const QPoint &amp; point, const QPixmap &amp; pixmap, const QRect &amp; source)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-5</anchor>
            <arglist>(const QPointF &amp; point, const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-6</anchor>
            <arglist>(const QPoint &amp; point, const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-7</anchor>
            <arglist>(int x, int y, const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-8</anchor>
            <arglist>(const QRect &amp; rectangle, const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmap</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmap-9</anchor>
            <arglist>(int x, int y, int width, int height, const QPixmap &amp; pixmap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawPixmapFragments</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawPixmapFragments</anchor>
            <arglist>(const PixmapFragment * fragments, int fragmentCount, const QPixmap &amp; pixmap, QFlags&lt;QPainter::PixmapFragmentHint&gt; hints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage</anchor>
            <arglist>(const QRectF &amp; target, const QImage &amp; image, const QRectF &amp; source, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage-2</anchor>
            <arglist>(const QRect &amp; target, const QImage &amp; image, const QRect &amp; source, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage-5</anchor>
            <arglist>(const QPointF &amp; point, const QImage &amp; image, const QRectF &amp; source, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage-6</anchor>
            <arglist>(const QPoint &amp; point, const QImage &amp; image, const QRect &amp; source, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage-7</anchor>
            <arglist>(const QRectF &amp; rectangle, const QImage &amp; image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage-8</anchor>
            <arglist>(const QRect &amp; rectangle, const QImage &amp; image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage-3</anchor>
            <arglist>(const QPointF &amp; point, const QImage &amp; image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage-4</anchor>
            <arglist>(const QPoint &amp; point, const QImage &amp; image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawImage</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawImage-9</anchor>
            <arglist>(int x, int y, const QImage &amp; image, int sx, int sy, int sw, int sh, Qt::ImageConversionFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayoutDirection</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setLayoutDirection</anchor>
            <arglist>(Qt::LayoutDirection direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::LayoutDirection</type>
            <name>layoutDirection</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>layoutDirection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawGlyphRun</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawGlyphRun</anchor>
            <arglist>(const QPointF &amp; position, const QGlyphRun &amp; glyphs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawStaticText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawStaticText</anchor>
            <arglist>(const QPointF &amp; topLeftPosition, const QStaticText &amp; staticText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawStaticText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawStaticText-2</anchor>
            <arglist>(const QPoint &amp; topLeftPosition, const QStaticText &amp; staticText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawStaticText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawStaticText-3</anchor>
            <arglist>(int left, int top, const QStaticText &amp; staticText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawText</anchor>
            <arglist>(const QPointF &amp; position, const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawText-3</anchor>
            <arglist>(const QPoint &amp; position, const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawText-6</anchor>
            <arglist>(int x, int y, const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawText-4</anchor>
            <arglist>(const QRectF &amp; rectangle, int flags, const QString &amp; text, QRectF * boundingRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawText-5</anchor>
            <arglist>(const QRect &amp; rectangle, int flags, const QString &amp; text, QRect * boundingRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawText-7</anchor>
            <arglist>(int x, int y, int width, int height, int flags, const QString &amp; text, QRect * boundingRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawText</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>drawText-8</anchor>
            <arglist>(const QRectF &amp; rectangle, const QString &amp; text, const QTextOption &amp; option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>(const QRectF &amp; rectangle, int flags, const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>boundingRect-2</anchor>
            <arglist>(const QRect &amp; rectangle, int flags, const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>boundingRect-3</anchor>
            <arglist>(int x, int y, int w, int h, int flags, const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>boundingRect-4</anchor>
            <arglist>(const QRectF &amp; rectangle, const QString &amp; text, const QTextOption &amp; option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect</anchor>
            <arglist>(const QRectF &amp; rectangle, const QBrush &amp; brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-8</anchor>
            <arglist>(int x, int y, int width, int height, const QBrush &amp; brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-5</anchor>
            <arglist>(const QRect &amp; rectangle, const QBrush &amp; brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-7</anchor>
            <arglist>(const QRectF &amp; rectangle, const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-9</anchor>
            <arglist>(int x, int y, int width, int height, const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-6</anchor>
            <arglist>(const QRect &amp; rectangle, const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-10</anchor>
            <arglist>(int x, int y, int width, int height, Qt::GlobalColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-11</anchor>
            <arglist>(const QRect &amp; rectangle, Qt::GlobalColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-12</anchor>
            <arglist>(const QRectF &amp; rectangle, Qt::GlobalColor color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-2</anchor>
            <arglist>(int x, int y, int width, int height, Qt::BrushStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-3</anchor>
            <arglist>(const QRect &amp; rectangle, Qt::BrushStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>fillRect-4</anchor>
            <arglist>(const QRectF &amp; rectangle, Qt::BrushStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>eraseRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>eraseRect</anchor>
            <arglist>(const QRectF &amp; rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>eraseRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>eraseRect-3</anchor>
            <arglist>(int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>eraseRect</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>eraseRect-2</anchor>
            <arglist>(const QRect &amp; rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderHint</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setRenderHint</anchor>
            <arglist>(RenderHint hint, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderHints</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>setRenderHints</anchor>
            <arglist>(QFlags&lt;QPainter::RenderHint&gt; hints, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RenderHints</type>
            <name>renderHints</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>renderHints</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testRenderHint</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>testRenderHint</anchor>
            <arglist>(RenderHint hint) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPaintEngine *</type>
            <name>paintEngine</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>paintEngine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setRedirected</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>setRedirected</anchor>
            <arglist>(const QPaintDevice * device, QPaintDevice * replacement, const QPoint &amp; offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPaintDevice *</type>
            <name>redirected</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>redirected</anchor>
            <arglist>(const QPaintDevice * device, QPoint * offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>restoreRedirected</name>
            <anchorfile>qpainter-obsolete.html</anchorfile>
            <anchor>restoreRedirected</anchor>
            <arglist>(const QPaintDevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginNativePainting</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>beginNativePainting</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endNativePainting</name>
            <anchorfile>qpainter.html</anchorfile>
            <anchor>endNativePainting</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPainter::PixmapFragment</name>
        <filename>qpainter-pixmapfragment.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>PixmapFragment</type>
            <name>create</name>
            <anchorfile>qpainter-pixmapfragment.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const QPointF &amp; pos, const QRectF &amp; sourceRect, qreal scaleX, qreal scaleY, qreal rotation, qreal opacity)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPainterPath</name>
        <filename>qpainterpath.html</filename>
        <member kind="enum">
            <name>ElementType</name>
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveToElement">
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LineToElement">
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CurveToElement">
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CurveToDataElement">
            <anchor>ElementType-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QPainterPath::Element</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPainterPath</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>QPainterPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPainterPath</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>QPainterPath-2</anchor>
            <arglist>(const QPointF &amp; startPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPainterPath</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>QPainterPath-3</anchor>
            <arglist>(const QPainterPath &amp; path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath &amp;</type>
            <name>operator=</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QPainterPath &amp; path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPainterPath</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>dtor.QPainterPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPainterPath &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closeSubpath</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>closeSubpath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>moveTo</anchor>
            <arglist>(const QPointF &amp; point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>moveTo-2</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lineTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>lineTo</anchor>
            <arglist>(const QPointF &amp; endPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lineTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>lineTo-2</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>arcMoveTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>arcMoveTo</anchor>
            <arglist>(const QRectF &amp; rectangle, qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>arcMoveTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>arcMoveTo-2</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height, qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>arcTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>arcTo</anchor>
            <arglist>(const QRectF &amp; rectangle, qreal startAngle, qreal sweepLength)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>arcTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>arcTo-2</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height, qreal startAngle, qreal sweepLength)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cubicTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>cubicTo</anchor>
            <arglist>(const QPointF &amp; c1, const QPointF &amp; c2, const QPointF &amp; endPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cubicTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>cubicTo-2</anchor>
            <arglist>(qreal c1X, qreal c1Y, qreal c2X, qreal c2Y, qreal endPointX, qreal endPointY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>quadTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>quadTo</anchor>
            <arglist>(const QPointF &amp; c, const QPointF &amp; endPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>quadTo</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>quadTo-2</anchor>
            <arglist>(qreal cx, qreal cy, qreal endPointX, qreal endPointY)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>currentPosition</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>currentPosition</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRect</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addRect</anchor>
            <arglist>(const QRectF &amp; rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRect</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addRect-2</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addEllipse</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addEllipse</anchor>
            <arglist>(const QRectF &amp; boundingRectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addEllipse</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addEllipse-2</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addEllipse</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addEllipse-3</anchor>
            <arglist>(const QPointF &amp; center, qreal rx, qreal ry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addPolygon</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addPolygon</anchor>
            <arglist>(const QPolygonF &amp; polygon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addText</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addText</anchor>
            <arglist>(const QPointF &amp; point, const QFont &amp; font, const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addText</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addText-2</anchor>
            <arglist>(qreal x, qreal y, const QFont &amp; font, const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addPath</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addPath</anchor>
            <arglist>(const QPainterPath &amp; path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRegion</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addRegion</anchor>
            <arglist>(const QRegion &amp; region)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRoundedRect</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addRoundedRect</anchor>
            <arglist>(const QRectF &amp; rect, qreal xRadius, qreal yRadius, Qt::SizeMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRoundedRect</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>addRoundedRect-2</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h, qreal xRadius, qreal yRadius, Qt::SizeMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRoundRect</name>
            <anchorfile>qpainterpath-obsolete.html</anchorfile>
            <anchor>addRoundRect</anchor>
            <arglist>(const QRectF &amp; r, int xRnd, int yRnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRoundRect</name>
            <anchorfile>qpainterpath-obsolete.html</anchorfile>
            <anchor>addRoundRect-3</anchor>
            <arglist>(qreal x, qreal y, qreal w, qreal h, int xRnd, int yRnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRoundRect</name>
            <anchorfile>qpainterpath-obsolete.html</anchorfile>
            <anchor>addRoundRect-2</anchor>
            <arglist>(const QRectF &amp; rect, int roundness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addRoundRect</name>
            <anchorfile>qpainterpath-obsolete.html</anchorfile>
            <anchor>addRoundRect-4</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height, int roundness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>connectPath</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>connectPath</anchor>
            <arglist>(const QPainterPath &amp; path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPointF &amp; point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(const QRectF &amp; rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QRectF &amp; rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>translate-2</anchor>
            <arglist>(const QPointF &amp; offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>translated</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(qreal dx, qreal dy) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>translated</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>translated-2</anchor>
            <arglist>(const QPointF &amp; offset) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>controlPointRect</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>controlPointRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::FillRule</type>
            <name>fillRule</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>fillRule</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFillRule</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>setFillRule</anchor>
            <arglist>(Qt::FillRule fillRule)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>toReversed</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>toReversed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPolygonF&gt;</type>
            <name>toSubpathPolygons</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>toSubpathPolygons-2</anchor>
            <arglist>(const QMatrix &amp; matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPolygonF&gt;</type>
            <name>toFillPolygons</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>toFillPolygons-2</anchor>
            <arglist>(const QMatrix &amp; matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>toFillPolygon</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>toFillPolygon-2</anchor>
            <arglist>(const QMatrix &amp; matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPolygonF&gt;</type>
            <name>toSubpathPolygons</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>toSubpathPolygons</anchor>
            <arglist>(const QTransform &amp; matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPolygonF&gt;</type>
            <name>toFillPolygons</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>toFillPolygons</anchor>
            <arglist>(const QTransform &amp; matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>toFillPolygon</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>toFillPolygon</anchor>
            <arglist>(const QTransform &amp; matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>elementCount</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>elementCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath::Element</type>
            <name>elementAt</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>elementAt</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setElementPositionAt</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>setElementPositionAt</anchor>
            <arglist>(int index, qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>length</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>percentAtLength</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>percentAtLength</anchor>
            <arglist>(qreal len) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>pointAtPercent</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>pointAtPercent</anchor>
            <arglist>(qreal t) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>angleAtPercent</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>angleAtPercent</anchor>
            <arglist>(qreal t) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>slopeAtPercent</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>slopeAtPercent</anchor>
            <arglist>(qreal t) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>intersects-2</anchor>
            <arglist>(const QPainterPath &amp; p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>contains-3</anchor>
            <arglist>(const QPainterPath &amp; p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>united</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>united</anchor>
            <arglist>(const QPainterPath &amp; p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>intersected</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>intersected</anchor>
            <arglist>(const QPainterPath &amp; p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>subtracted</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>subtracted</anchor>
            <arglist>(const QPainterPath &amp; p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>subtractedInverted</name>
            <anchorfile>qpainterpath-obsolete.html</anchorfile>
            <anchor>subtractedInverted</anchor>
            <arglist>(const QPainterPath &amp; p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>simplified</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>simplified</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QPainterPath &amp; path) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QPainterPath &amp; path) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>operator&amp;</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator&amp;</anchor>
            <arglist>(const QPainterPath &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>operator|</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator|</anchor>
            <arglist>(const QPainterPath &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>operator+</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator+</anchor>
            <arglist>(const QPainterPath &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>operator-</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QPainterPath &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator&amp;=</anchor>
            <arglist>(const QPainterPath &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath &amp;</type>
            <name>operator|=</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator|=</anchor>
            <arglist>(const QPainterPath &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath &amp;</type>
            <name>operator+=</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator+=</anchor>
            <arglist>(const QPainterPath &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath &amp;</type>
            <name>operator-=</name>
            <anchorfile>qpainterpath.html</anchorfile>
            <anchor>operator-=</anchor>
            <arglist>(const QPainterPath &amp; other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPainterPath::Element</name>
        <filename>qpainterpath-element.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMoveTo</name>
            <anchorfile>qpainterpath-element.html</anchorfile>
            <anchor>isMoveTo</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLineTo</name>
            <anchorfile>qpainterpath-element.html</anchorfile>
            <anchor>isLineTo</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCurveTo</name>
            <anchorfile>qpainterpath-element.html</anchorfile>
            <anchor>isCurveTo</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QPointF</name>
            <anchorfile>qpainterpath-element.html</anchorfile>
            <anchor>operator QPointF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpainterpath-element.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const Element &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpainterpath-element.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const Element &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPainterPathStroker</name>
        <filename>qpainterpathstroker.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPainterPathStroker</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>QPainterPathStroker</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPainterPathStroker</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>dtor.QPainterPathStroker</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCapStyle</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>setCapStyle</anchor>
            <arglist>(Qt::PenCapStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::PenCapStyle</type>
            <name>capStyle</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>capStyle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setJoinStyle</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>setJoinStyle</anchor>
            <arglist>(Qt::PenJoinStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::PenJoinStyle</type>
            <name>joinStyle</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>joinStyle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMiterLimit</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>setMiterLimit</anchor>
            <arglist>(qreal limit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>miterLimit</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>miterLimit</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurveThreshold</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>setCurveThreshold</anchor>
            <arglist>(qreal threshold)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>curveThreshold</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>curveThreshold</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDashPattern</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>setDashPattern</anchor>
            <arglist>(Qt::PenStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDashPattern</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>setDashPattern-2</anchor>
            <arglist>(const QVector&lt;qreal&gt; &amp; dashPattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;qreal&gt;</type>
            <name>dashPattern</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>dashPattern</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDashOffset</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>setDashOffset</anchor>
            <arglist>(qreal offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dashOffset</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>dashOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>createStroke</name>
            <anchorfile>qpainterpathstroker.html</anchorfile>
            <anchor>createStroke</anchor>
            <arglist>(const QPainterPath &amp; path) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPdfWriter</name>
        <filename>qpdfwriter.html</filename>
        <base>QObject</base>
        <base>QPagedPaintDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPdfWriter</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>QPdfWriter</anchor>
            <arglist>(const QString &amp; filename)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPdfWriter</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>QPdfWriter-2</anchor>
            <arglist>(QIODevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPdfWriter</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>dtor.QPdfWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>title</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>title</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTitle</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>setTitle</anchor>
            <arglist>(const QString &amp; title)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>creator</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>creator</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCreator</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>setCreator</anchor>
            <arglist>(const QString &amp; creator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>newPage</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>newPage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setPageSize</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>setPageSize</anchor>
            <arglist>(PageSize size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setPageSizeMM</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>setPageSizeMM</anchor>
            <arglist>(const QSizeF &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setMargins</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>setMargins</anchor>
            <arglist>(const Margins &amp; m)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QPaintEngine *</type>
            <name>paintEngine</name>
            <anchorfile>qpdfwriter.html</anchorfile>
            <anchor>paintEngine</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPen</name>
        <filename>qpen.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPen</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>QPen</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPen</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>QPen-2</anchor>
            <arglist>(Qt::PenStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPen</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>QPen-3</anchor>
            <arglist>(const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPen</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>QPen-4</anchor>
            <arglist>(const QBrush &amp; brush, qreal width, Qt::PenStyle style, Qt::PenCapStyle cap, Qt::PenJoinStyle join)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPen</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>QPen-5</anchor>
            <arglist>(const QPen &amp; pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPen</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>dtor.QPen</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPen &amp;</type>
            <name>operator=</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QPen &amp; pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPen &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::PenStyle</type>
            <name>style</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>style</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyle</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setStyle</anchor>
            <arglist>(Qt::PenStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;qreal&gt;</type>
            <name>dashPattern</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>dashPattern</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDashPattern</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setDashPattern</anchor>
            <arglist>(const QVector&lt;qreal&gt; &amp; pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dashOffset</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>dashOffset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDashOffset</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setDashOffset</anchor>
            <arglist>(qreal offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>miterLimit</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>miterLimit</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMiterLimit</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setMiterLimit</anchor>
            <arglist>(qreal limit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>widthF</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>widthF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidthF</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setWidthF</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>color</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>color</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColor</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setColor</anchor>
            <arglist>(const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>brush</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>brush</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrush</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setBrush</anchor>
            <arglist>(const QBrush &amp; brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSolid</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>isSolid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::PenCapStyle</type>
            <name>capStyle</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>capStyle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCapStyle</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setCapStyle</anchor>
            <arglist>(Qt::PenCapStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::PenJoinStyle</type>
            <name>joinStyle</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>joinStyle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setJoinStyle</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setJoinStyle</anchor>
            <arglist>(Qt::PenJoinStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCosmetic</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>isCosmetic</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCosmetic</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>setCosmetic</anchor>
            <arglist>(bool cosmetic)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QPen &amp; pen) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QPen &amp; pen) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qpen.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPolygon</name>
        <filename>qpolygon.html</filename>
        <base>QVector</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygon</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>QPolygon</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPolygon</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>dtor.QPolygon</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygon</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>QPolygon-2</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygon</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>QPolygon-3</anchor>
            <arglist>(const QPolygon &amp; polygon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygon</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>QPolygon-4</anchor>
            <arglist>(const QVector&lt;QPoint&gt; &amp; points)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygon</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>QPolygon-5</anchor>
            <arglist>(const QRect &amp; rectangle, bool closed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPolygon &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>translate-2</anchor>
            <arglist>(const QPoint &amp; offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>translated</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(int dx, int dy) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>translated</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>translated-2</anchor>
            <arglist>(const QPoint &amp; offset) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>point</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>point</anchor>
            <arglist>(int index, int * x, int * y) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>point</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>point-2</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPoint</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>setPoint</anchor>
            <arglist>(int index, int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPoint</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>setPoint-2</anchor>
            <arglist>(int index, const QPoint &amp; point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPoints</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>setPoints</anchor>
            <arglist>(int nPoints, const int * points)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPoints</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>setPoints-2</anchor>
            <arglist>(int nPoints, int firstx, int firsty, ... )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>putPoints</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>putPoints</anchor>
            <arglist>(int index, int nPoints, int firstx, int firsty, ... )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>putPoints</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>putPoints-3</anchor>
            <arglist>(int index, int nPoints, const QPolygon &amp; fromPolygon, int fromIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>containsPoint</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>containsPoint</anchor>
            <arglist>(const QPoint &amp; point, Qt::FillRule fillRule) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>united</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>united</anchor>
            <arglist>(const QPolygon &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>intersected</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>intersected</anchor>
            <arglist>(const QPolygon &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>subtracted</name>
            <anchorfile>qpolygon.html</anchorfile>
            <anchor>subtracted</anchor>
            <arglist>(const QPolygon &amp; r) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPolygonF</name>
        <filename>qpolygonf.html</filename>
        <base>QVector</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygonF</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>QPolygonF</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPolygonF</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>dtor.QPolygonF</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygonF</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>QPolygonF-2</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygonF</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>QPolygonF-3</anchor>
            <arglist>(const QPolygonF &amp; polygon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygonF</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>QPolygonF-4</anchor>
            <arglist>(const QVector&lt;QPointF&gt; &amp; points)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygonF</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>QPolygonF-5</anchor>
            <arglist>(const QRectF &amp; rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPolygonF</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>QPolygonF-6</anchor>
            <arglist>(const QPolygon &amp; polygon)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPolygonF &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>translate-2</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const QPointF &amp; offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>translated</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>translated-2</anchor>
            <arglist>(qreal dx, qreal dy) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>translated</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(const QPointF &amp; offset) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>toPolygon</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>toPolygon</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isClosed</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>isClosed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>containsPoint</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>containsPoint</anchor>
            <arglist>(const QPointF &amp; point, Qt::FillRule fillRule) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>united</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>united</anchor>
            <arglist>(const QPolygonF &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>intersected</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>intersected</anchor>
            <arglist>(const QPolygonF &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>subtracted</name>
            <anchorfile>qpolygonf.html</anchorfile>
            <anchor>subtracted</anchor>
            <arglist>(const QPolygonF &amp; r) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRegion</name>
        <filename>qregion.html</filename>
        <member kind="enum">
            <name>RegionType</name>
            <anchor>RegionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Rectangle">
            <anchor>RegionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ellipse">
            <anchor>RegionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegion</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>QRegion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegion</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>QRegion-2</anchor>
            <arglist>(int x, int y, int w, int h, RegionType t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegion</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>QRegion-6</anchor>
            <arglist>(const QRect &amp; r, RegionType t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegion</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>QRegion-3</anchor>
            <arglist>(const QPolygon &amp; a, Qt::FillRule fillRule)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegion</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>QRegion-4</anchor>
            <arglist>(const QRegion &amp; r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegion</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>QRegion-5</anchor>
            <arglist>(const QBitmap &amp; bm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QRegion &amp; r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QRegion &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPoint &amp; p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(const QRect &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>translate-2</anchor>
            <arglist>(const QPoint &amp; point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>translated</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(int dx, int dy) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>translated</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>translated-2</anchor>
            <arglist>(const QPoint &amp; p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>united</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>united</anchor>
            <arglist>(const QRegion &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>united</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>united-2</anchor>
            <arglist>(const QRect &amp; rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>intersected</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>intersected</anchor>
            <arglist>(const QRegion &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>intersected</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>intersected-2</anchor>
            <arglist>(const QRect &amp; rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>subtracted</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>subtracted</anchor>
            <arglist>(const QRegion &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>xored</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>xored</anchor>
            <arglist>(const QRegion &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>unite</name>
            <anchorfile>qregion-compat.html</anchorfile>
            <anchor>unite</anchor>
            <arglist>(const QRegion &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>unite</name>
            <anchorfile>qregion-compat.html</anchorfile>
            <anchor>unite-2</anchor>
            <arglist>(const QRect &amp; rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>intersect</name>
            <anchorfile>qregion-compat.html</anchorfile>
            <anchor>intersect</anchor>
            <arglist>(const QRegion &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>intersect</name>
            <anchorfile>qregion-compat.html</anchorfile>
            <anchor>intersect-2</anchor>
            <arglist>(const QRect &amp; rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>subtract</name>
            <anchorfile>qregion-compat.html</anchorfile>
            <anchor>subtract</anchor>
            <arglist>(const QRegion &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>eor</name>
            <anchorfile>qregion-compat.html</anchorfile>
            <anchor>eor</anchor>
            <arglist>(const QRegion &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QRegion &amp; region) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>intersects-2</anchor>
            <arglist>(const QRect &amp; rect) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRect&gt;</type>
            <name>rects</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>rects</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRects</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>setRects</anchor>
            <arglist>(const QRect * rects, int number)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rectCount</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>rectCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion</type>
            <name>operator|</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator|</anchor>
            <arglist>(const QRegion &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion</type>
            <name>operator+</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator+</anchor>
            <arglist>(const QRegion &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion</type>
            <name>operator+</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator+-2</anchor>
            <arglist>(const QRect &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion</type>
            <name>operator&amp;</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator&amp;</anchor>
            <arglist>(const QRegion &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion</type>
            <name>operator&amp;</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator&amp;-2</anchor>
            <arglist>(const QRect &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion</type>
            <name>operator-</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QRegion &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegion</type>
            <name>operator^</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator^</anchor>
            <arglist>(const QRegion &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator|=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator|=</anchor>
            <arglist>(const QRegion &amp; r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator+=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator+=</anchor>
            <arglist>(const QRegion &amp; r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator+=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator+=-2</anchor>
            <arglist>(const QRect &amp; rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator&amp;=</anchor>
            <arglist>(const QRegion &amp; r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator&amp;=-2</anchor>
            <arglist>(const QRect &amp; r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator-=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator-=</anchor>
            <arglist>(const QRegion &amp; r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion &amp;</type>
            <name>operator^=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator^=</anchor>
            <arglist>(const QRegion &amp; r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QRegion &amp; r) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QRegion &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qregion.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTransform</name>
        <filename>qtransform.html</filename>
        <member kind="enum">
            <name>TransformationType</name>
            <anchor>TransformationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TxNone">
            <anchor>TransformationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TxTranslate">
            <anchor>TransformationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TxScale">
            <anchor>TransformationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TxRotate">
            <anchor>TransformationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TxShear">
            <anchor>TransformationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TxProject">
            <anchor>TransformationType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTransform</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>QTransform</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTransform</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>QTransform-3</anchor>
            <arglist>(qreal m11, qreal m12, qreal m13, qreal m21, qreal m22, qreal m23, qreal m31, qreal m32, qreal m33)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTransform</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>QTransform-4</anchor>
            <arglist>(qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTransform</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>QTransform-5</anchor>
            <arglist>(const QMatrix &amp; matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAffine</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>isAffine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isIdentity</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>isIdentity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInvertible</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>isInvertible</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isScaling</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>isScaling</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRotating</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>isRotating</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTranslating</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>isTranslating</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TransformationType</type>
            <name>type</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>determinant</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>determinant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>det</name>
            <anchorfile>qtransform-obsolete.html</anchorfile>
            <anchor>det</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m11</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m11</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m12</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m12</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m13</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m13</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m21</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m21</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m22</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m22</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m23</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m23</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m31</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m31</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m32</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m32</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>m33</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>m33</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dx</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>dx</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dy</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>dy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatrix</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>setMatrix</anchor>
            <arglist>(qreal m11, qreal m12, qreal m13, qreal m21, qreal m22, qreal m23, qreal m31, qreal m32, qreal m33)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>inverted</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>inverted</anchor>
            <arglist>(bool * invertible) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>adjoint</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>adjoint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>transposed</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>transposed</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>translate</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>scale</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>scale</anchor>
            <arglist>(qreal sx, qreal sy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>shear</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>shear</anchor>
            <arglist>(qreal sh, qreal sv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>rotate</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>rotate</anchor>
            <arglist>(qreal angle, Qt::Axis axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>rotateRadians</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>rotateRadians</anchor>
            <arglist>(qreal angle, Qt::Axis axis)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>squareToQuad</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>squareToQuad</anchor>
            <arglist>(const QPolygonF &amp; quad, QTransform &amp; trans)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>quadToSquare</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>quadToSquare</anchor>
            <arglist>(const QPolygonF &amp; quad, QTransform &amp; trans)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>quadToQuad</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>quadToQuad</anchor>
            <arglist>(const QPolygonF &amp; one, const QPolygonF &amp; two, QTransform &amp; trans)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QTransform &amp; matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QTransform &amp; matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>operator*=</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator*=</anchor>
            <arglist>(const QTransform &amp; matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform</type>
            <name>operator*</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator*</anchor>
            <arglist>(const QTransform &amp; matrix) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>operator=</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QTransform &amp; matrix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-3</anchor>
            <arglist>(const QPoint &amp; point) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-2</anchor>
            <arglist>(const QPointF &amp; p) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLine</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-4</anchor>
            <arglist>(const QLine &amp; l) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-5</anchor>
            <arglist>(const QLineF &amp; line) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygonF</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-6</anchor>
            <arglist>(const QPolygonF &amp; polygon) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-7</anchor>
            <arglist>(const QPolygon &amp; polygon) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegion</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-8</anchor>
            <arglist>(const QRegion &amp; region) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-9</anchor>
            <arglist>(const QPainterPath &amp; path) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPolygon</type>
            <name>mapToPolygon</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>mapToPolygon</anchor>
            <arglist>(const QRect &amp; rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>mapRect</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>mapRect-2</anchor>
            <arglist>(const QRect &amp; rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>mapRect</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>mapRect</anchor>
            <arglist>(const QRectF &amp; rectangle) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map-10</anchor>
            <arglist>(int x, int y, int * tx, int * ty) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>map</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>map</anchor>
            <arglist>(qreal x, qreal y, qreal * tx, qreal * ty) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMatrix &amp;</type>
            <name>toAffine</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>toAffine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>operator*=</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator*=-2</anchor>
            <arglist>(qreal scalar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>operator/=</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator/=</anchor>
            <arglist>(qreal scalar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>operator+=</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator+=</anchor>
            <arglist>(qreal scalar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTransform &amp;</type>
            <name>operator-=</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>operator-=</anchor>
            <arglist>(qreal scalar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTransform</type>
            <name>fromTranslate</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>fromTranslate</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTransform</type>
            <name>fromScale</name>
            <anchorfile>qtransform.html</anchorfile>
            <anchor>fromScale</anchor>
            <arglist>(qreal sx, qreal sy)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractTextDocumentLayout</name>
        <filename>qabstracttextdocumentlayout.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTextDocumentLayout</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>QAbstractTextDocumentLayout</anchor>
            <arglist>(QTextDocument * document)</arglist>
        </member>
        <class>QAbstractTextDocumentLayout::Selection</class>
        <class>QAbstractTextDocumentLayout::PaintContext</class>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>draw</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>draw</anchor>
            <arglist>(QPainter * painter, const PaintContext &amp; context) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>hitTest</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>hitTest</anchor>
            <arglist>(const QPointF &amp; point, Qt::HitTestAccuracy accuracy) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>anchorAt</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>anchorAt</anchor>
            <arglist>(const QPointF &amp; position) const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>pageCount</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>pageCount</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSizeF</type>
            <name>documentSize</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>documentSize</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QRectF</type>
            <name>frameBoundingRect</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>frameBoundingRect</anchor>
            <arglist>(QTextFrame * frame) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QRectF</type>
            <name>blockBoundingRect</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>blockBoundingRect</anchor>
            <arglist>(const QTextBlock &amp; block) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPaintDevice</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>setPaintDevice</anchor>
            <arglist>(QPaintDevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPaintDevice *</type>
            <name>paintDevice</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>paintDevice</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocument *</type>
            <name>document</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>document</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerHandler</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>registerHandler</anchor>
            <arglist>(int objectType, QObject * component)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextObjectInterface *</type>
            <name>handlerForObject</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>handlerForObject</anchor>
            <arglist>(int objectType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>update</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>update</anchor>
            <arglist>(const QRectF &amp; rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateBlock</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>updateBlock</anchor>
            <arglist>(const QTextBlock &amp; block)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>documentSizeChanged</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>documentSizeChanged</anchor>
            <arglist>(const QSizeF &amp; newSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pageCountChanged</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>pageCountChanged</anchor>
            <arglist>(int newPages)</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual void</type>
            <name>documentChanged</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>documentChanged</anchor>
            <arglist>(int position, int charsRemoved, int charsAdded) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resizeInlineObject</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>resizeInlineObject</anchor>
            <arglist>(QTextInlineObject item, int posInDocument, const QTextFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>positionInlineObject</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>positionInlineObject</anchor>
            <arglist>(QTextInlineObject item, int posInDocument, const QTextFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>drawInlineObject</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>drawInlineObject</anchor>
            <arglist>(QPainter * painter, const QRectF &amp; rect, QTextInlineObject object, int posInDocument, const QTextFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>format</name>
            <anchorfile>qabstracttextdocumentlayout.html</anchorfile>
            <anchor>format</anchor>
            <arglist>(int position)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractTextDocumentLayout::Selection</name>
        <filename>qabstracttextdocumentlayout-selection.html</filename>
    </compound>
    <compound kind="class">
        <name>QAbstractTextDocumentLayout::PaintContext</name>
        <filename>qabstracttextdocumentlayout-paintcontext.html</filename>
    </compound>
    <compound kind="class">
        <name>QTextObjectInterface</name>
        <filename>qtextobjectinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextObjectInterface</name>
            <anchorfile>qtextobjectinterface.html</anchorfile>
            <anchor>dtor.QTextObjectInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSizeF</type>
            <name>intrinsicSize</name>
            <anchorfile>qtextobjectinterface.html</anchorfile>
            <anchor>intrinsicSize</anchor>
            <arglist>(QTextDocument * doc, int posInDocument, const QTextFormat &amp; format) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>drawObject</name>
            <anchorfile>qtextobjectinterface.html</anchorfile>
            <anchor>drawObject</anchor>
            <arglist>(QPainter * painter, const QRectF &amp; rect, QTextDocument * doc, int posInDocument, const QTextFormat &amp; format) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFont</name>
        <filename>qfont.html</filename>
        <member kind="enum">
            <name>StyleHint</name>
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Helvetica">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SansSerif">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Times">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Serif">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Courier">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TypeWriter">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OldEnglish">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Decorative">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="System">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnyStyle">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cursive">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Monospace">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Fantasy">
            <anchor>StyleHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StyleStrategy</name>
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferDefault">
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferBitmap">
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferDevice">
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferOutline">
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForceOutline">
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferMatch">
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferQuality">
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferAntialias">
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoAntialias">
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenGLCompatible">
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForceIntegerMetrics">
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoFontMerging">
            <anchor>StyleStrategy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>HintingPreference</name>
            <anchor>HintingPreference-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferDefaultHinting">
            <anchor>HintingPreference-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferNoHinting">
            <anchor>HintingPreference-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferVerticalHinting">
            <anchor>HintingPreference-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferFullHinting">
            <anchor>HintingPreference-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Weight</name>
            <anchor>Weight-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Light">
            <anchor>Weight-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Normal">
            <anchor>Weight-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DemiBold">
            <anchor>Weight-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bold">
            <anchor>Weight-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Black">
            <anchor>Weight-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Style</name>
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StyleNormal">
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StyleItalic">
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StyleOblique">
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Stretch</name>
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UltraCondensed">
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraCondensed">
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Condensed">
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SemiCondensed">
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unstretched">
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SemiExpanded">
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Expanded">
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtraExpanded">
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UltraExpanded">
            <anchor>Stretch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Capitalization</name>
            <anchor>Capitalization-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MixedCase">
            <anchor>Capitalization-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllUppercase">
            <anchor>Capitalization-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllLowercase">
            <anchor>Capitalization-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SmallCaps">
            <anchor>Capitalization-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Capitalize">
            <anchor>Capitalization-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SpacingType</name>
            <anchor>SpacingType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PercentageSpacing">
            <anchor>SpacingType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AbsoluteSpacing">
            <anchor>SpacingType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFont</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>QFont</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFont</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>QFont-2</anchor>
            <arglist>(const QString &amp; family, int pointSize, int weight, bool italic)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFont</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>QFont-3</anchor>
            <arglist>(const QFont &amp; font, QPaintDevice * pd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFont</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>QFont-4</anchor>
            <arglist>(const QFont &amp; font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFont</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>dtor.QFont</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QFont &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>family</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>family</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFamily</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setFamily</anchor>
            <arglist>(const QString &amp; family)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>styleName</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>styleName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyleName</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setStyleName</anchor>
            <arglist>(const QString &amp; styleName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pointSize</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>pointSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPointSize</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setPointSize</anchor>
            <arglist>(int pointSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>pointSizeF</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>pointSizeF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPointSizeF</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setPointSizeF</anchor>
            <arglist>(qreal pointSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pixelSize</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>pixelSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixelSize</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setPixelSize</anchor>
            <arglist>(int pixelSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>weight</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>weight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWeight</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setWeight</anchor>
            <arglist>(int weight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bold</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>bold</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBold</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setBold</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyle</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setStyle</anchor>
            <arglist>(Style style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Style</type>
            <name>style</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>style</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>italic</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>italic</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItalic</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setItalic</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>underline</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>underline</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUnderline</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setUnderline</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>overline</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>overline</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOverline</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setOverline</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>strikeOut</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>strikeOut</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStrikeOut</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setStrikeOut</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fixedPitch</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>fixedPitch</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFixedPitch</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setFixedPitch</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>kerning</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>kerning</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKerning</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setKerning</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StyleHint</type>
            <name>styleHint</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>styleHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StyleStrategy</type>
            <name>styleStrategy</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>styleStrategy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyleHint</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setStyleHint</anchor>
            <arglist>(StyleHint hint, StyleStrategy strategy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyleStrategy</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setStyleStrategy</anchor>
            <arglist>(StyleStrategy s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>stretch</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>stretch</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStretch</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setStretch</anchor>
            <arglist>(int factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>letterSpacing</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>letterSpacing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SpacingType</type>
            <name>letterSpacingType</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>letterSpacingType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLetterSpacing</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setLetterSpacing</anchor>
            <arglist>(SpacingType type, qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>wordSpacing</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>wordSpacing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWordSpacing</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setWordSpacing</anchor>
            <arglist>(qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCapitalization</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setCapitalization</anchor>
            <arglist>(Capitalization caps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Capitalization</type>
            <name>capitalization</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>capitalization</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHintingPreference</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setHintingPreference</anchor>
            <arglist>(HintingPreference hintingPreference)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>HintingPreference</type>
            <name>hintingPreference</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>hintingPreference</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rawMode</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>rawMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRawMode</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setRawMode</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exactMatch</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>exactMatch</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont &amp;</type>
            <name>operator=</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QFont &amp; font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QFont &amp; f) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QFont &amp; f) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>operator&lt;</anchor>
            <arglist>(const QFont &amp; f) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCopyOf</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>isCopyOf</anchor>
            <arglist>(const QFont &amp; f) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRawName</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>setRawName</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>rawName</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>rawName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>key</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fromString</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>fromString</anchor>
            <arglist>(const QString &amp; descrip)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>substitute</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>substitute</anchor>
            <arglist>(const QString &amp; familyName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>substitutes</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>substitutes</anchor>
            <arglist>(const QString &amp; familyName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>substitutions</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>substitutions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>insertSubstitution</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>insertSubstitution</anchor>
            <arglist>(const QString &amp; familyName, const QString &amp; substituteName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>insertSubstitutions</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>insertSubstitutions</anchor>
            <arglist>(const QString &amp; familyName, const QStringList &amp; substituteNames)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>removeSubstitutions</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>removeSubstitutions</anchor>
            <arglist>(const QString &amp; familyName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>removeSubstitution</name>
            <anchorfile>qfont-compat.html</anchorfile>
            <anchor>removeSubstitution</anchor>
            <arglist>(const QString &amp; familyName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>defaultFamily</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>defaultFamily</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>lastResortFamily</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>lastResortFamily</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>lastResortFont</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>lastResortFont</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>resolve</name>
            <anchorfile>qfont.html</anchorfile>
            <anchor>resolve</anchor>
            <arglist>(const QFont &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFontDatabase</name>
        <filename>qfontdatabase.html</filename>
        <member kind="enum">
            <name>WritingSystem</name>
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Any">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Latin">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Greek">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cyrillic">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Armenian">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Hebrew">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Arabic">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Syriac">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Thaana">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Devanagari">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bengali">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Gurmukhi">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Gujarati">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Oriya">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tamil">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Telugu">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Kannada">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Malayalam">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sinhala">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Thai">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lao">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Tibetan">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Myanmar">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Georgian">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Khmer">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SimplifiedChinese">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TraditionalChinese">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Japanese">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Korean">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vietnamese">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Symbol">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Other">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ogham">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Runic">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Nko">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WritingSystemsCount">
            <anchor>WritingSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;int&gt;</type>
            <name>standardSizes</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>standardSizes</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontDatabase</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>QFontDatabase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;WritingSystem&gt;</type>
            <name>writingSystems</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>writingSystems</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;WritingSystem&gt;</type>
            <name>writingSystems</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>writingSystems-2</anchor>
            <arglist>(const QString &amp; family) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>families</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>families</anchor>
            <arglist>(WritingSystem writingSystem) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>styles</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>styles</anchor>
            <arglist>(const QString &amp; family) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>pointSizes</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>pointSizes</anchor>
            <arglist>(const QString &amp; family, const QString &amp; styleName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>smoothSizes</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>smoothSizes</anchor>
            <arglist>(const QString &amp; family, const QString &amp; styleName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>styleString</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>styleString</anchor>
            <arglist>(const QFont &amp; font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>styleString</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>styleString-2</anchor>
            <arglist>(const QFontInfo &amp; fontInfo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>font</anchor>
            <arglist>(const QString &amp; family, const QString &amp; style, int pointSize) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBitmapScalable</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>isBitmapScalable</anchor>
            <arglist>(const QString &amp; family, const QString &amp; style) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSmoothlyScalable</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>isSmoothlyScalable</anchor>
            <arglist>(const QString &amp; family, const QString &amp; style) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isScalable</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>isScalable</anchor>
            <arglist>(const QString &amp; family, const QString &amp; style) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFixedPitch</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>isFixedPitch</anchor>
            <arglist>(const QString &amp; family, const QString &amp; style) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>italic</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>italic</anchor>
            <arglist>(const QString &amp; family, const QString &amp; style) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bold</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>bold</anchor>
            <arglist>(const QString &amp; family, const QString &amp; style) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>weight</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>weight</anchor>
            <arglist>(const QString &amp; family, const QString &amp; style) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>writingSystemName</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>writingSystemName</anchor>
            <arglist>(WritingSystem writingSystem)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>writingSystemSample</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>writingSystemSample</anchor>
            <arglist>(WritingSystem writingSystem)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>addApplicationFont</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>addApplicationFont</anchor>
            <arglist>(const QString &amp; fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>addApplicationFontFromData</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>addApplicationFontFromData</anchor>
            <arglist>(const QByteArray &amp; fontData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>applicationFontFamilies</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>applicationFontFamilies</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>removeApplicationFont</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>removeApplicationFont</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>removeAllApplicationFonts</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>removeAllApplicationFonts</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>supportsThreadedFontRendering</name>
            <anchorfile>qfontdatabase.html</anchorfile>
            <anchor>supportsThreadedFontRendering</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFontInfo</name>
        <filename>qfontinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontInfo</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>QFontInfo</anchor>
            <arglist>(const QFont &amp; font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontInfo</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>QFontInfo-2</anchor>
            <arglist>(const QFontInfo &amp; fi)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFontInfo</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>dtor.QFontInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QFontInfo &amp; fi)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QFontInfo &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>family</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>family</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>styleName</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>styleName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pixelSize</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>pixelSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pointSize</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>pointSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>pointSizeF</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>pointSizeF</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>italic</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>italic</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::Style</type>
            <name>style</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>style</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>weight</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>weight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bold</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>bold</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fixedPitch</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>fixedPitch</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::StyleHint</type>
            <name>styleHint</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>styleHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rawMode</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>rawMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exactMatch</name>
            <anchorfile>qfontinfo.html</anchorfile>
            <anchor>exactMatch</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFontMetrics</name>
        <filename>qfontmetrics.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontMetrics</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>QFontMetrics</anchor>
            <arglist>(const QFont &amp; font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontMetrics</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>QFontMetrics-2</anchor>
            <arglist>(const QFont &amp; font, QPaintDevice * paintdevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontMetrics</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>QFontMetrics-3</anchor>
            <arglist>(const QFontMetrics &amp; fm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFontMetrics</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>dtor.QFontMetrics</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontMetrics &amp;</type>
            <name>operator=</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QFontMetrics &amp; fm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QFontMetrics &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>ascent</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>ascent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>descent</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>descent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>leading</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>leading</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineSpacing</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>lineSpacing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minLeftBearing</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>minLeftBearing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minRightBearing</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>minRightBearing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxWidth</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>maxWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>xHeight</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>xHeight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>averageCharWidth</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>averageCharWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>inFont</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>inFont</anchor>
            <arglist>(QChar ch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>inFontUcs4</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>inFontUcs4</anchor>
            <arglist>(uint ucs4) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>leftBearing</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>leftBearing</anchor>
            <arglist>(QChar ch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rightBearing</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>rightBearing</anchor>
            <arglist>(QChar ch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>width</anchor>
            <arglist>(const QString &amp; text, int len) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>width-3</anchor>
            <arglist>(QChar ch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>charWidth</name>
            <anchorfile>qfontmetrics-obsolete.html</anchorfile>
            <anchor>charWidth</anchor>
            <arglist>(const QString &amp; text, int pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>(QChar ch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>boundingRect-2</anchor>
            <arglist>(const QString &amp; text) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>boundingRect-4</anchor>
            <arglist>(const QRect &amp; rect, int flags, const QString &amp; text, int tabStops, int * tabArray) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>boundingRect</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>boundingRect-3</anchor>
            <arglist>(int x, int y, int width, int height, int flags, const QString &amp; text, int tabStops, int * tabArray) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>size</anchor>
            <arglist>(int flags, const QString &amp; text, int tabStops, int * tabArray) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>tightBoundingRect</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>tightBoundingRect</anchor>
            <arglist>(const QString &amp; text) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>elidedText</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>elidedText</anchor>
            <arglist>(const QString &amp; text, Qt::TextElideMode mode, int width, int flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>underlinePos</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>underlinePos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>overlinePos</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>overlinePos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>strikeOutPos</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>strikeOutPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineWidth</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>lineWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QFontMetrics &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qfontmetrics.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QFontMetrics &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFontMetricsF</name>
        <filename>qfontmetricsf.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontMetricsF</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>QFontMetricsF</anchor>
            <arglist>(const QFont &amp; font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontMetricsF</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>QFontMetricsF-2</anchor>
            <arglist>(const QFont &amp; font, QPaintDevice * paintdevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontMetricsF</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>QFontMetricsF-3</anchor>
            <arglist>(const QFontMetrics &amp; fontMetrics)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFontMetricsF</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>QFontMetricsF-4</anchor>
            <arglist>(const QFontMetricsF &amp; fm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFontMetricsF</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>dtor.QFontMetricsF</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontMetricsF &amp;</type>
            <name>operator=</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QFontMetricsF &amp; fm)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFontMetricsF &amp;</type>
            <name>operator=</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>operator=-2</anchor>
            <arglist>(const QFontMetrics &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QFontMetricsF &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>ascent</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>ascent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>descent</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>descent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>height</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>leading</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>leading</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>lineSpacing</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>lineSpacing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>minLeftBearing</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>minLeftBearing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>minRightBearing</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>minRightBearing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>maxWidth</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>maxWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>xHeight</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>xHeight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>averageCharWidth</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>averageCharWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>inFont</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>inFont</anchor>
            <arglist>(QChar ch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>inFontUcs4</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>inFontUcs4</anchor>
            <arglist>(uint ch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>leftBearing</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>leftBearing</anchor>
            <arglist>(QChar ch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rightBearing</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>rightBearing</anchor>
            <arglist>(QChar ch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>width</anchor>
            <arglist>(const QString &amp; text) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>width-2</anchor>
            <arglist>(QChar ch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>(const QString &amp; text) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>boundingRect-2</anchor>
            <arglist>(QChar ch) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>boundingRect-3</anchor>
            <arglist>(const QRectF &amp; rect, int flags, const QString &amp; text, int tabStops, int * tabArray) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>size</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>size</anchor>
            <arglist>(int flags, const QString &amp; text, int tabStops, int * tabArray) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>tightBoundingRect</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>tightBoundingRect</anchor>
            <arglist>(const QString &amp; text) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>elidedText</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>elidedText</anchor>
            <arglist>(const QString &amp; text, Qt::TextElideMode mode, qreal width, int flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>underlinePos</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>underlinePos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>overlinePos</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>overlinePos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>strikeOutPos</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>strikeOutPos</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>lineWidth</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>lineWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QFontMetricsF &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qfontmetricsf.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QFontMetricsF &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGlyphRun</name>
        <filename>qglyphrun.html</filename>
        <member kind="enum">
            <name>GlyphRunFlag</name>
            <anchor>GlyphRunFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Overline">
            <anchor>GlyphRunFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Underline">
            <anchor>GlyphRunFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StrikeOut">
            <anchor>GlyphRunFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightToLeft">
            <anchor>GlyphRunFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SplitLigature">
            <anchor>GlyphRunFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGlyphRun::GlyphRunFlag">
            <name>GlyphRunFlags</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>GlyphRunFlags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGlyphRun</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>QGlyphRun</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGlyphRun</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>QGlyphRun-2</anchor>
            <arglist>(const QGlyphRun &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGlyphRun</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>dtor.QGlyphRun</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QGlyphRun &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRawFont</type>
            <name>rawFont</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>rawFont</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRawFont</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setRawFont</anchor>
            <arglist>(const QRawFont &amp; rawFont)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRawData</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setRawData</anchor>
            <arglist>(const quint32 * glyphIndexArray, const QPointF * glyphPositionArray, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;quint32&gt;</type>
            <name>glyphIndexes</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>glyphIndexes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGlyphIndexes</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setGlyphIndexes</anchor>
            <arglist>(const QVector&lt;quint32&gt; &amp; glyphIndexes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QPointF&gt;</type>
            <name>positions</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>positions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPositions</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setPositions</anchor>
            <arglist>(const QVector&lt;QPointF&gt; &amp; positions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGlyphRun &amp;</type>
            <name>operator=</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QGlyphRun &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QGlyphRun &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QGlyphRun &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOverline</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setOverline</anchor>
            <arglist>(bool overline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>overline</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>overline</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUnderline</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setUnderline</anchor>
            <arglist>(bool underline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>underline</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>underline</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStrikeOut</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setStrikeOut</anchor>
            <arglist>(bool strikeOut)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>strikeOut</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>strikeOut</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRightToLeft</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setRightToLeft</anchor>
            <arglist>(bool rightToLeft)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRightToLeft</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>isRightToLeft</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlag</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setFlag</anchor>
            <arglist>(GlyphRunFlag flag, bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(QFlags&lt;QGlyphRun::GlyphRunFlag&gt; flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GlyphRunFlags</type>
            <name>flags</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBoundingRect</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>setBoundingRect</anchor>
            <arglist>(const QRectF &amp; boundingRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qglyphrun.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSupportedWritingSystems</name>
        <filename>qsupportedwritingsystems.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSupportedWritingSystems</name>
            <anchorfile>qsupportedwritingsystems.html</anchorfile>
            <anchor>QSupportedWritingSystems</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSupportedWritingSystems</name>
            <anchorfile>qsupportedwritingsystems.html</anchorfile>
            <anchor>QSupportedWritingSystems-2</anchor>
            <arglist>(const QSupportedWritingSystems &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSupportedWritingSystems &amp;</type>
            <name>operator=</name>
            <anchorfile>qsupportedwritingsystems.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QSupportedWritingSystems &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSupportedWritingSystems</name>
            <anchorfile>qsupportedwritingsystems.html</anchorfile>
            <anchor>dtor.QSupportedWritingSystems</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSupported</name>
            <anchorfile>qsupportedwritingsystems.html</anchorfile>
            <anchor>setSupported</anchor>
            <arglist>(QFontDatabase::WritingSystem writingSystem, bool support)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supported</name>
            <anchorfile>qsupportedwritingsystems.html</anchorfile>
            <anchor>supported</anchor>
            <arglist>(QFontDatabase::WritingSystem writingSystem) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRawFont</name>
        <filename>qrawfont.html</filename>
        <member kind="enum">
            <name>AntialiasingType</name>
            <anchor>AntialiasingType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PixelAntialiasing">
            <anchor>AntialiasingType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SubPixelAntialiasing">
            <anchor>AntialiasingType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRawFont</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>QRawFont</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRawFont</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>QRawFont-2</anchor>
            <arglist>(const QString &amp; fileName, qreal pixelSize, QFont::HintingPreference hintingPreference)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRawFont</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>QRawFont-3</anchor>
            <arglist>(const QByteArray &amp; fontData, qreal pixelSize, QFont::HintingPreference hintingPreference)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRawFont</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>QRawFont-4</anchor>
            <arglist>(const QRawFont &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRawFont</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>dtor.QRawFont</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRawFont &amp;</type>
            <name>operator=</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QRawFont &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QRawFont &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QRawFont &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QRawFont &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>familyName</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>familyName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>styleName</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>styleName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::Style</type>
            <name>style</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>style</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>weight</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>weight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;quint32&gt;</type>
            <name>glyphIndexesForString</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>glyphIndexesForString</anchor>
            <arglist>(const QString &amp; text) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QPointF&gt;</type>
            <name>advancesForGlyphIndexes</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>advancesForGlyphIndexes</anchor>
            <arglist>(const QVector&lt;quint32&gt; &amp; glyphIndexes) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>glyphIndexesForChars</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>glyphIndexesForChars</anchor>
            <arglist>(const QChar * chars, int numChars, quint32 * glyphIndexes, int * numGlyphs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>advancesForGlyphIndexes</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>advancesForGlyphIndexes-2</anchor>
            <arglist>(const quint32 * glyphIndexes, QPointF * advances, int numGlyphs) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>alphaMapForGlyph</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>alphaMapForGlyph</anchor>
            <arglist>(quint32 glyphIndex, AntialiasingType antialiasingType, const QTransform &amp; transform) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>pathForGlyph</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>pathForGlyph</anchor>
            <arglist>(quint32 glyphIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>(quint32 glyphIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixelSize</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>setPixelSize</anchor>
            <arglist>(qreal pixelSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>pixelSize</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>pixelSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::HintingPreference</type>
            <name>hintingPreference</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>hintingPreference</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>ascent</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>ascent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>descent</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>descent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>leading</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>leading</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>xHeight</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>xHeight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>averageCharWidth</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>averageCharWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>maxCharWidth</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>maxCharWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>lineThickness</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>lineThickness</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>underlinePosition</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>underlinePosition</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>unitsPerEm</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>unitsPerEm</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>loadFromFile</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>loadFromFile</anchor>
            <arglist>(const QString &amp; fileName, qreal pixelSize, QFont::HintingPreference hintingPreference)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>loadFromData</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>loadFromData</anchor>
            <arglist>(const QByteArray &amp; fontData, qreal pixelSize, QFont::HintingPreference hintingPreference)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsCharacter</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>supportsCharacter-2</anchor>
            <arglist>(uint ucs4) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsCharacter</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>supportsCharacter</anchor>
            <arglist>(QChar character) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QFontDatabase::WritingSystem&gt;</type>
            <name>supportedWritingSystems</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>supportedWritingSystems</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>fontTable</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>fontTable</anchor>
            <arglist>(const char * tagName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRawFont</type>
            <name>fromFont</name>
            <anchorfile>qrawfont.html</anchorfile>
            <anchor>fromFont</anchor>
            <arglist>(const QFont &amp; font, QFontDatabase::WritingSystem writingSystem)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStaticText</name>
        <filename>qstatictext.html</filename>
        <member kind="enum">
            <name>PerformanceHint</name>
            <anchor>PerformanceHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ModerateCaching">
            <anchor>PerformanceHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AggressiveCaching">
            <anchor>PerformanceHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStaticText</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>QStaticText</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStaticText</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>QStaticText-2</anchor>
            <arglist>(const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStaticText</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>QStaticText-3</anchor>
            <arglist>(const QStaticText &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStaticText</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>dtor.QStaticText</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QStaticText &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextFormat</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>setTextFormat</anchor>
            <arglist>(Qt::TextFormat textFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TextFormat</type>
            <name>textFormat</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>textFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextWidth</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>setTextWidth</anchor>
            <arglist>(qreal textWidth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>textWidth</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>textWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextOption</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>setTextOption</anchor>
            <arglist>(const QTextOption &amp; textOption)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextOption</type>
            <name>textOption</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>textOption</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>size</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepare</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>prepare</anchor>
            <arglist>(const QTransform &amp; matrix, const QFont &amp; font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPerformanceHint</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>setPerformanceHint</anchor>
            <arglist>(PerformanceHint performanceHint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PerformanceHint</type>
            <name>performanceHint</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>performanceHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStaticText &amp;</type>
            <name>operator=</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QStaticText &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QStaticText &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qstatictext.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QStaticText &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSyntaxHighlighter</name>
        <filename>qsyntaxhighlighter.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSyntaxHighlighter</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>QSyntaxHighlighter</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSyntaxHighlighter</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>QSyntaxHighlighter-2</anchor>
            <arglist>(QTextDocument * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSyntaxHighlighter</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>dtor.QSyntaxHighlighter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDocument</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>setDocument</anchor>
            <arglist>(QTextDocument * doc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocument *</type>
            <name>document</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>document</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rehighlight</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>rehighlight</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rehighlightBlock</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>rehighlightBlock</anchor>
            <arglist>(const QTextBlock &amp; block)</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual void</type>
            <name>highlightBlock</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>highlightBlock</anchor>
            <arglist>(const QString &amp; text) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(int start, int count, const QTextCharFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>setFormat-2</anchor>
            <arglist>(int start, int count, const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>setFormat-3</anchor>
            <arglist>(int start, int count, const QFont &amp; font)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>format</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>format</anchor>
            <arglist>(int position) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>previousBlockState</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>previousBlockState</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>currentBlockState</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>currentBlockState</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentBlockState</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>setCurrentBlockState</anchor>
            <arglist>(int newState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentBlockUserData</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>setCurrentBlockUserData</anchor>
            <arglist>(QTextBlockUserData * data)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QTextBlockUserData *</type>
            <name>currentBlockUserData</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>currentBlockUserData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>currentBlock</name>
            <anchorfile>qsyntaxhighlighter.html</anchorfile>
            <anchor>currentBlock</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextCursor</name>
        <filename>qtextcursor.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextCursor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>QTextCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextCursor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>QTextCursor-2</anchor>
            <arglist>(QTextDocument * document)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextCursor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>QTextCursor-4</anchor>
            <arglist>(QTextFrame * frame)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextCursor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>QTextCursor-5</anchor>
            <arglist>(const QTextBlock &amp; block)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextCursor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>QTextCursor-7</anchor>
            <arglist>(const QTextCursor &amp; cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor &amp;</type>
            <name>operator=</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QTextCursor &amp; cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextCursor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>dtor.QTextCursor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QTextCursor &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>MoveMode</name>
            <anchor>MoveMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoveAnchor">
            <anchor>MoveMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="KeepAnchor">
            <anchor>MoveMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(int pos, MoveMode m)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>position</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>positionInBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>positionInBlock</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>anchor</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>anchor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertText</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertText</anchor>
            <arglist>(const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertText</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertText-2</anchor>
            <arglist>(const QString &amp; text, const QTextCharFormat &amp; format)</arglist>
        </member>
        <member kind="enum">
            <name>MoveOperation</name>
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoMove">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Start">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Up">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StartOfLine">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StartOfBlock">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StartOfWord">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreviousBlock">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreviousCharacter">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreviousWord">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Left">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WordLeft">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="End">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Down">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EndOfLine">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EndOfWord">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EndOfBlock">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NextBlock">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NextCharacter">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NextWord">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Right">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WordRight">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NextCell">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreviousCell">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NextRow">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreviousRow">
            <anchor>MoveOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>movePosition</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>movePosition</anchor>
            <arglist>(MoveOperation operation, MoveMode mode, int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>visualNavigation</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>visualNavigation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisualNavigation</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>setVisualNavigation</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalMovementX</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>setVerticalMovementX</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>verticalMovementX</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>verticalMovementX</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeepPositionOnInsert</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>setKeepPositionOnInsert</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>keepPositionOnInsert</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>keepPositionOnInsert</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deleteChar</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>deleteChar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deletePreviousChar</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>deletePreviousChar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>SelectionType</name>
            <anchor>SelectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WordUnderCursor">
            <anchor>SelectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LineUnderCursor">
            <anchor>SelectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlockUnderCursor">
            <anchor>SelectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Document">
            <anchor>SelectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>select</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>select</anchor>
            <arglist>(SelectionType selection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasSelection</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>hasSelection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasComplexSelection</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>hasComplexSelection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeSelectedText</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>removeSelectedText</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearSelection</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>clearSelection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>selectionStart</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>selectionStart</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>selectionEnd</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>selectionEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>selectedText</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>selectedText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocumentFragment</type>
            <name>selection</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>selection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectedTableCells</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>selectedTableCells</anchor>
            <arglist>(int * firstRow, int * numRows, int * firstColumn, int * numColumns) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>block</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>block</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>charFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>charFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCharFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>setCharFormat</anchor>
            <arglist>(const QTextCharFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mergeCharFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>mergeCharFormat</anchor>
            <arglist>(const QTextCharFormat &amp; modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlockFormat</type>
            <name>blockFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>blockFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlockFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>setBlockFormat</anchor>
            <arglist>(const QTextBlockFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mergeBlockFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>mergeBlockFormat</anchor>
            <arglist>(const QTextBlockFormat &amp; modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>blockCharFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>blockCharFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlockCharFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>setBlockCharFormat</anchor>
            <arglist>(const QTextCharFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mergeBlockCharFormat</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>mergeBlockCharFormat</anchor>
            <arglist>(const QTextCharFormat &amp; modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atBlockStart</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>atBlockStart</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atBlockEnd</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>atBlockEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atStart</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>atStart</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atEnd</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertBlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertBlock-2</anchor>
            <arglist>(const QTextBlockFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertBlock-3</anchor>
            <arglist>(const QTextBlockFormat &amp; format, const QTextCharFormat &amp; charFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextList *</type>
            <name>insertList</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertList</anchor>
            <arglist>(const QTextListFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextList *</type>
            <name>insertList</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertList-2</anchor>
            <arglist>(QTextListFormat::Style style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextList *</type>
            <name>createList</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>createList</anchor>
            <arglist>(const QTextListFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextList *</type>
            <name>createList</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>createList-2</anchor>
            <arglist>(QTextListFormat::Style style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextList *</type>
            <name>currentList</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>currentList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTable *</type>
            <name>insertTable</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertTable</anchor>
            <arglist>(int rows, int columns, const QTextTableFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTable *</type>
            <name>insertTable</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertTable-2</anchor>
            <arglist>(int rows, int columns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTable *</type>
            <name>currentTable</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>currentTable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame *</type>
            <name>insertFrame</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertFrame</anchor>
            <arglist>(const QTextFrameFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame *</type>
            <name>currentFrame</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>currentFrame</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertFragment</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertFragment</anchor>
            <arglist>(const QTextDocumentFragment &amp; fragment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertHtml</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertHtml</anchor>
            <arglist>(const QString &amp; html)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertImage</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertImage-2</anchor>
            <arglist>(const QTextImageFormat &amp; format, QTextFrameFormat::Position alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertImage</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertImage</anchor>
            <arglist>(const QTextImageFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertImage</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertImage-3</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertImage</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>insertImage-4</anchor>
            <arglist>(const QImage &amp; image, const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginEditBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>beginEditBlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>joinPreviousEditBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>joinPreviousEditBlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endEditBlock</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>endEditBlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QTextCursor &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>operator&lt;</anchor>
            <arglist>(const QTextCursor &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>operator&lt;=</anchor>
            <arglist>(const QTextCursor &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QTextCursor &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>operator&gt;=</anchor>
            <arglist>(const QTextCursor &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>operator&gt;</anchor>
            <arglist>(const QTextCursor &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCopyOf</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>isCopyOf</anchor>
            <arglist>(const QTextCursor &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>blockNumber</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>blockNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnNumber</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>columnNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocument *</type>
            <name>document</name>
            <anchorfile>qtextcursor.html</anchorfile>
            <anchor>document</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextDocument</name>
        <filename>qtextdocument.html</filename>
        <base>QObject</base>
        <member kind="property" type="bool">
            <name>undoRedoEnabled</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>undoRedoEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>modified</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>modified-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSizeF">
            <name>pageSize</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>pageSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QFont">
            <name>defaultFont</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultFont-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>useDesignMetrics</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>useDesignMetrics-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSizeF">
            <name>size</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>textWidth</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>textWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>blockCount</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>blockCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>indentWidth</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>indentWidth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>defaultStyleSheet</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultStyleSheet-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maximumBlockCount</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>maximumBlockCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>documentMargin</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>documentMargin-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QTextOption">
            <name>defaultTextOption</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultTextOption-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocument</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>QTextDocument</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocument</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>QTextDocument-2</anchor>
            <arglist>(const QString &amp; text, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextDocument</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>dtor.QTextDocument</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocument *</type>
            <name>clone</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>(QObject * parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>clear</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUndoRedoEnabled</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>undoRedoEnabled-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUndoRedoEnabled</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>undoRedoEnabled-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUndoAvailable</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>isUndoAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRedoAvailable</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>isRedoAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>availableUndoSteps</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>availableUndoSteps</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>availableRedoSteps</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>availableRedoSteps</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>revision</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>revision</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDocumentLayout</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>setDocumentLayout</anchor>
            <arglist>(QAbstractTextDocumentLayout * layout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractTextDocumentLayout *</type>
            <name>documentLayout</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>documentLayout</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>MetaInformation</name>
            <anchor>MetaInformation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DocumentTitle">
            <anchor>MetaInformation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DocumentUrl">
            <anchor>MetaInformation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMetaInformation</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>setMetaInformation</anchor>
            <arglist>(MetaInformation info, const QString &amp; string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>metaInformation</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>metaInformation</anchor>
            <arglist>(MetaInformation info) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toHtml</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>toHtml</anchor>
            <arglist>(const QByteArray &amp; encoding) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHtml</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>setHtml</anchor>
            <arglist>(const QString &amp; html)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toPlainText</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>toPlainText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlainText</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>setPlainText</anchor>
            <arglist>(const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>characterAt</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>characterAt</anchor>
            <arglist>(int pos) const</arglist>
        </member>
        <member kind="enum">
            <name>FindFlag</name>
            <anchor>FindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FindBackward">
            <anchor>FindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FindCaseSensitively">
            <anchor>FindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FindWholeWords">
            <anchor>FindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTextDocument::FindFlag">
            <name>FindFlags</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>FindFlags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>find</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>find-3</anchor>
            <arglist>(const QString &amp; subString, int position, QFlags&lt;QTextDocument::FindFlag&gt; options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>find</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const QString &amp; subString, const QTextCursor &amp; cursor, QFlags&lt;QTextDocument::FindFlag&gt; options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>find</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>find-4</anchor>
            <arglist>(const QRegExp &amp; expr, int position, QFlags&lt;QTextDocument::FindFlag&gt; options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>find</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>find-2</anchor>
            <arglist>(const QRegExp &amp; expr, const QTextCursor &amp; cursor, QFlags&lt;QTextDocument::FindFlag&gt; options) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame *</type>
            <name>rootFrame</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>rootFrame</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextObject *</type>
            <name>object</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>object</anchor>
            <arglist>(int objectIndex) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextObject *</type>
            <name>objectForFormat</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>objectForFormat</anchor>
            <arglist>(const QTextFormat &amp; f) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>findBlock</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>findBlock</anchor>
            <arglist>(int pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>findBlockByNumber</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>findBlockByNumber</anchor>
            <arglist>(int blockNumber) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>findBlockByLineNumber</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>findBlockByLineNumber</anchor>
            <arglist>(int lineNumber) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>begin</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>end</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>firstBlock</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>firstBlock</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>lastBlock</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>lastBlock</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPageSize</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>pageSize-prop</anchor>
            <arglist>(const QSizeF &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>pageSize</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>pageSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultFont</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultFont-prop</anchor>
            <arglist>(const QFont &amp; font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>defaultFont</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultFont-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>pageCount</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>pageCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isModified</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>modified-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>print</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>print</anchor>
            <arglist>(QPagedPaintDevice * printer) const</arglist>
        </member>
        <member kind="enum">
            <name>ResourceType</name>
            <anchor>ResourceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HtmlResource">
            <anchor>ResourceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageResource">
            <anchor>ResourceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StyleSheetResource">
            <anchor>ResourceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserResource">
            <anchor>ResourceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>resource</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>resource</anchor>
            <arglist>(int type, const QUrl &amp; name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addResource</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>addResource</anchor>
            <arglist>(int type, const QUrl &amp; name, const QVariant &amp; resource)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QTextFormat&gt;</type>
            <name>allFormats</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>allFormats</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>markContentsDirty</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>markContentsDirty</anchor>
            <arglist>(int position, int length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUseDesignMetrics</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>useDesignMetrics-prop</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>useDesignMetrics</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>useDesignMetrics-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawContents</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>drawContents</anchor>
            <arglist>(QPainter * p, const QRectF &amp; rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextWidth</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>textWidth-prop</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>textWidth</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>textWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>idealWidth</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>idealWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>indentWidth</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>indentWidth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIndentWidth</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>indentWidth-prop</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>documentMargin</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>documentMargin-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDocumentMargin</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>documentMargin-prop</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>adjustSize</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>adjustSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>size</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>blockCount</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>blockCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineCount</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>lineCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>characterCount</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>characterCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultStyleSheet</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultStyleSheet-prop</anchor>
            <arglist>(const QString &amp; sheet)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>defaultStyleSheet</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultStyleSheet-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undo</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>undo</anchor>
            <arglist>(QTextCursor * cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redo</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>redo</anchor>
            <arglist>(QTextCursor * cursor)</arglist>
        </member>
        <member kind="enum">
            <name>Stacks</name>
            <anchor>Stacks-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UndoStack">
            <anchor>Stacks-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RedoStack">
            <anchor>Stacks-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UndoAndRedoStacks">
            <anchor>Stacks-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearUndoRedoStacks</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>clearUndoRedoStacks</anchor>
            <arglist>(Stacks stacksToClear)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumBlockCount</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>maximumBlockCount-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumBlockCount</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>maximumBlockCount-prop</anchor>
            <arglist>(int maximum)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextOption</type>
            <name>defaultTextOption</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultTextOption-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultTextOption</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultTextOption-prop</anchor>
            <arglist>(const QTextOption &amp; option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CursorMoveStyle</type>
            <name>defaultCursorMoveStyle</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>defaultCursorMoveStyle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultCursorMoveStyle</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>setDefaultCursorMoveStyle</anchor>
            <arglist>(Qt::CursorMoveStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contentsChange</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>contentsChange</anchor>
            <arglist>(int position, int charsRemoved, int charsAdded)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contentsChanged</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>contentsChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undoAvailable</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>undoAvailable</anchor>
            <arglist>(bool available)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redoAvailable</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>redoAvailable</anchor>
            <arglist>(bool available)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undoCommandAdded</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>undoCommandAdded</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modificationChanged</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>modificationChanged</anchor>
            <arglist>(bool changed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cursorPositionChanged</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>cursorPositionChanged</anchor>
            <arglist>(const QTextCursor &amp; cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>blockCountChanged</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>blockCountChanged</anchor>
            <arglist>(int newBlockCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>documentLayoutChanged</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>documentLayoutChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>undo</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>undo-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>redo</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>redo-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModified</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>modified-prop</anchor>
            <arglist>(bool m)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QTextObject *</type>
            <name>createObject</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>createObject</anchor>
            <arglist>(const QTextFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>loadResource</name>
            <anchorfile>qtextdocument.html</anchorfile>
            <anchor>loadResource</anchor>
            <arglist>(int type, const QUrl &amp; name)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextDocumentFragment</name>
        <filename>qtextdocumentfragment.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocumentFragment</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>QTextDocumentFragment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocumentFragment</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>QTextDocumentFragment-2</anchor>
            <arglist>(const QTextDocument * document)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocumentFragment</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>QTextDocumentFragment-3</anchor>
            <arglist>(const QTextCursor &amp; cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocumentFragment</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>QTextDocumentFragment-4</anchor>
            <arglist>(const QTextDocumentFragment &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocumentFragment &amp;</type>
            <name>operator=</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QTextDocumentFragment &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextDocumentFragment</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>dtor.QTextDocumentFragment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toPlainText</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>toPlainText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toHtml</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>toHtml</anchor>
            <arglist>(const QByteArray &amp; encoding) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTextDocumentFragment</type>
            <name>fromPlainText</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>fromPlainText</anchor>
            <arglist>(const QString &amp; plainText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTextDocumentFragment</type>
            <name>fromHtml</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>fromHtml</anchor>
            <arglist>(const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTextDocumentFragment</type>
            <name>fromHtml</name>
            <anchorfile>qtextdocumentfragment.html</anchorfile>
            <anchor>fromHtml-2</anchor>
            <arglist>(const QString &amp; text, const QTextDocument * resourceProvider)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextDocumentWriter</name>
        <filename>qtextdocumentwriter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocumentWriter</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>QTextDocumentWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocumentWriter</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>QTextDocumentWriter-2</anchor>
            <arglist>(QIODevice * device, const QByteArray &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextDocumentWriter</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>QTextDocumentWriter-3</anchor>
            <arglist>(const QString &amp; fileName, const QByteArray &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextDocumentWriter</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>dtor.QTextDocumentWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QByteArray &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>format</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp; fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>write</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(const QTextDocument * document)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>write</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>write-2</anchor>
            <arglist>(const QTextDocumentFragment &amp; fragment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCodec</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>setCodec</anchor>
            <arglist>(QTextCodec * codec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCodec *</type>
            <name>codec</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>codec</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>supportedDocumentFormats</name>
            <anchorfile>qtextdocumentwriter.html</anchorfile>
            <anchor>supportedDocumentFormats</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextLength</name>
        <filename>qtextlength.html</filename>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VariableLength">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FixedLength">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PercentageLength">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextLength</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>QTextLength</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextLength</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>QTextLength-2</anchor>
            <arglist>(Type type, qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>value</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(qreal maximumLength) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rawValue</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>rawValue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QTextLength &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QTextLength &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qtextlength.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextFormat</name>
        <filename>qtextformat.html</filename>
        <member kind="enum">
            <name>FormatType</name>
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidFormat">
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlockFormat">
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CharFormat">
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListFormat">
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TableFormat">
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameFormat">
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserFormat">
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Property</name>
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ObjectIndex">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CssFloat">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LayoutDirection">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutlinePen">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackgroundBrush">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForegroundBrush">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BackgroundImageUrl">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlockAlignment">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlockTopMargin">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlockBottomMargin">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlockLeftMargin">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlockRightMargin">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextIndent">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TabPositions">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlockIndent">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LineHeight">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LineHeightType">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlockNonBreakableLines">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlockTrailingHorizontalRulerWidth">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FirstFontProperty">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontCapitalization">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontLetterSpacingType">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontLetterSpacing">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontWordSpacing">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontStretch">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontStyleHint">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontStyleStrategy">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontKerning">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontHintingPreference">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontFamily">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontPointSize">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontSizeAdjustment">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontSizeIncrement">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontWeight">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontItalic">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontUnderline">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontOverline">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontStrikeOut">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontFixedPitch">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontPixelSize">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LastFontProperty">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextUnderlineColor">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextVerticalAlignment">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextOutline">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextUnderlineStyle">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextToolTip">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IsAnchor">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnchorHref">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnchorName">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ObjectType">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListStyle">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListIndent">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListNumberPrefix">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListNumberSuffix">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameBorder">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameMargin">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FramePadding">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameWidth">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameHeight">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameTopMargin">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameBottomMargin">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameLeftMargin">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameRightMargin">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameBorderBrush">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameBorderStyle">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TableColumns">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TableColumnWidthConstraints">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TableCellSpacing">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TableCellPadding">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TableHeaderRowCount">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TableCellRowSpan">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TableCellColumnSpan">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TableCellTopPadding">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TableCellBottomPadding">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TableCellLeftPadding">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TableCellRightPadding">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageName">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageWidth">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageHeight">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FullWidthSelection">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PageBreakPolicy">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserProperty">
            <anchor>Property-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ObjectTypes</name>
            <anchor>ObjectTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoObject">
            <anchor>ObjectTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageObject">
            <anchor>ObjectTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TableObject">
            <anchor>ObjectTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TableCellObject">
            <anchor>ObjectTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserObject">
            <anchor>ObjectTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PageBreakFlag</name>
            <anchor>PageBreakFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PageBreak_Auto">
            <anchor>PageBreakFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PageBreak_AlwaysBefore">
            <anchor>PageBreakFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PageBreak_AlwaysAfter">
            <anchor>PageBreakFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTextFormat::PageBreakFlag">
            <name>PageBreakFlags</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>PageBreakFlags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>QTextFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>QTextFormat-2</anchor>
            <arglist>(int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>QTextFormat-3</anchor>
            <arglist>(const QTextFormat &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFormat &amp;</type>
            <name>operator=</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QTextFormat &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>dtor.QTextFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QTextFormat &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>merge</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>merge</anchor>
            <arglist>(const QTextFormat &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>type</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>objectIndex</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>objectIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setObjectIndex</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>setObjectIndex</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>property</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>property</anchor>
            <arglist>(int propertyId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>setProperty</anchor>
            <arglist>(int propertyId, const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>clearProperty</anchor>
            <arglist>(int propertyId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>hasProperty</anchor>
            <arglist>(int propertyId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>boolProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>boolProperty</anchor>
            <arglist>(int propertyId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>intProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>intProperty</anchor>
            <arglist>(int propertyId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>doubleProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>doubleProperty</anchor>
            <arglist>(int propertyId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>stringProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>stringProperty</anchor>
            <arglist>(int propertyId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>colorProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>colorProperty</anchor>
            <arglist>(int propertyId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPen</type>
            <name>penProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>penProperty</anchor>
            <arglist>(int propertyId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>brushProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>brushProperty</anchor>
            <arglist>(int propertyId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextLength</type>
            <name>lengthProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>lengthProperty</anchor>
            <arglist>(int propertyId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QTextLength&gt;</type>
            <name>lengthVectorProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>lengthVectorProperty</anchor>
            <arglist>(int propertyId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProperty</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>setProperty-2</anchor>
            <arglist>(int propertyId, const QVector&lt;QTextLength&gt; &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QVariant&gt;</type>
            <name>properties</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>properties</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>propertyCount</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>propertyCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setObjectType</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>setObjectType</anchor>
            <arglist>(int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>objectType</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>objectType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCharFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isCharFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBlockFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isBlockFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isListFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isListFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFrameFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isFrameFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isImageFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isImageFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTableFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isTableFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTableCellFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>isTableCellFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlockFormat</type>
            <name>toBlockFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>toBlockFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>toCharFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>toCharFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextListFormat</type>
            <name>toListFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>toListFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTableFormat</type>
            <name>toTableFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>toTableFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrameFormat</type>
            <name>toFrameFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>toFrameFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextImageFormat</type>
            <name>toImageFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>toImageFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTableCellFormat</type>
            <name>toTableCellFormat</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>toTableCellFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QTextFormat &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QTextFormat &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QVariant</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>operator QVariant</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayoutDirection</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>setLayoutDirection</anchor>
            <arglist>(Qt::LayoutDirection direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::LayoutDirection</type>
            <name>layoutDirection</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>layoutDirection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBackground</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>setBackground</anchor>
            <arglist>(const QBrush &amp; brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>background</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>background</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearBackground</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>clearBackground</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setForeground</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>setForeground</anchor>
            <arglist>(const QBrush &amp; brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>foreground</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>foreground</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearForeground</name>
            <anchorfile>qtextformat.html</anchorfile>
            <anchor>clearForeground</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextCharFormat</name>
        <filename>qtextcharformat.html</filename>
        <base>QTextFormat</base>
        <member kind="enum">
            <name>VerticalAlignment</name>
            <anchor>VerticalAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignNormal">
            <anchor>VerticalAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignSuperScript">
            <anchor>VerticalAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignSubScript">
            <anchor>VerticalAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignMiddle">
            <anchor>VerticalAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignTop">
            <anchor>VerticalAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignBottom">
            <anchor>VerticalAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlignBaseline">
            <anchor>VerticalAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>UnderlineStyle</name>
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoUnderline">
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SingleUnderline">
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DashUnderline">
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DotLine">
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DashDotLine">
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DashDotDotLine">
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WaveUnderline">
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SpellCheckUnderline">
            <anchor>UnderlineStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextCharFormat</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>QTextCharFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(const QFont &amp; font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>font</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontFamily</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontFamily</anchor>
            <arglist>(const QString &amp; family)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fontFamily</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontFamily</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontPointSize</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontPointSize</anchor>
            <arglist>(qreal size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>fontPointSize</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontPointSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontWeight</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontWeight</anchor>
            <arglist>(int weight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>fontWeight</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontWeight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontItalic</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontItalic</anchor>
            <arglist>(bool italic)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fontItalic</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontItalic</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontCapitalization</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontCapitalization</anchor>
            <arglist>(QFont::Capitalization capitalization)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::Capitalization</type>
            <name>fontCapitalization</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontCapitalization</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontLetterSpacingType</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontLetterSpacingType</anchor>
            <arglist>(QFont::SpacingType letterSpacingType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::SpacingType</type>
            <name>fontLetterSpacingType</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontLetterSpacingType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontLetterSpacing</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontLetterSpacing</anchor>
            <arglist>(qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>fontLetterSpacing</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontLetterSpacing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontWordSpacing</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontWordSpacing</anchor>
            <arglist>(qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>fontWordSpacing</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontWordSpacing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontUnderline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontUnderline</anchor>
            <arglist>(bool underline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fontUnderline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontUnderline</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontOverline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontOverline</anchor>
            <arglist>(bool overline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fontOverline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontOverline</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontStrikeOut</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontStrikeOut</anchor>
            <arglist>(bool strikeOut)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fontStrikeOut</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontStrikeOut</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUnderlineColor</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setUnderlineColor</anchor>
            <arglist>(const QColor &amp; color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QColor</type>
            <name>underlineColor</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>underlineColor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontFixedPitch</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontFixedPitch</anchor>
            <arglist>(bool fixedPitch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fontFixedPitch</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontFixedPitch</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontStretch</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontStretch</anchor>
            <arglist>(int factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>fontStretch</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontStretch</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontStyleHint</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontStyleHint</anchor>
            <arglist>(QFont::StyleHint hint, QFont::StyleStrategy strategy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontStyleStrategy</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontStyleStrategy</anchor>
            <arglist>(QFont::StyleStrategy strategy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::StyleHint</type>
            <name>fontStyleHint</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontStyleHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::StyleStrategy</type>
            <name>fontStyleStrategy</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontStyleStrategy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontHintingPreference</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontHintingPreference</anchor>
            <arglist>(QFont::HintingPreference hintingPreference)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont::HintingPreference</type>
            <name>fontHintingPreference</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontHintingPreference</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFontKerning</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setFontKerning</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fontKerning</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>fontKerning</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUnderlineStyle</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setUnderlineStyle</anchor>
            <arglist>(UnderlineStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>UnderlineStyle</type>
            <name>underlineStyle</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>underlineStyle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerticalAlignment</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setVerticalAlignment</anchor>
            <arglist>(VerticalAlignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>VerticalAlignment</type>
            <name>verticalAlignment</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>verticalAlignment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextOutline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setTextOutline</anchor>
            <arglist>(const QPen &amp; pen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPen</type>
            <name>textOutline</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>textOutline</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setToolTip</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setToolTip</anchor>
            <arglist>(const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toolTip</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>toolTip</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnchor</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setAnchor</anchor>
            <arglist>(bool anchor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAnchor</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>isAnchor</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnchorHref</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setAnchorHref</anchor>
            <arglist>(const QString &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>anchorHref</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>anchorHref</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnchorName</name>
            <anchorfile>qtextcharformat-obsolete.html</anchorfile>
            <anchor>setAnchorName</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>anchorName</name>
            <anchorfile>qtextcharformat-obsolete.html</anchorfile>
            <anchor>anchorName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAnchorNames</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>setAnchorNames</anchor>
            <arglist>(const QStringList &amp; names)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>anchorNames</name>
            <anchorfile>qtextcharformat.html</anchorfile>
            <anchor>anchorNames</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextBlockFormat</name>
        <filename>qtextblockformat.html</filename>
        <base>QTextFormat</base>
        <member kind="enum">
            <name>LineHeightTypes</name>
            <anchor>LineHeightTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SingleHeight">
            <anchor>LineHeightTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProportionalHeight">
            <anchor>LineHeightTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FixedHeight">
            <anchor>LineHeightTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MinimumHeight">
            <anchor>LineHeightTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LineDistanceHeight">
            <anchor>LineHeightTypes-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextBlockFormat</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>QTextBlockFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setAlignment</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>alignment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopMargin</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setTopMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>topMargin</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>topMargin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomMargin</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setBottomMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>bottomMargin</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>bottomMargin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeftMargin</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setLeftMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>leftMargin</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>leftMargin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRightMargin</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setRightMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rightMargin</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>rightMargin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextIndent</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setTextIndent</anchor>
            <arglist>(qreal indent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>textIndent</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>textIndent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIndent</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setIndent</anchor>
            <arglist>(int indentation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indent</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>indent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLineHeight</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setLineHeight</anchor>
            <arglist>(qreal height, int heightType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>lineHeight</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>lineHeight</anchor>
            <arglist>(qreal scriptLineHeight, qreal scaling) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>lineHeight</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>lineHeight-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineHeightType</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>lineHeightType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNonBreakableLines</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setNonBreakableLines</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>nonBreakableLines</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>nonBreakableLines</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPageBreakPolicy</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setPageBreakPolicy</anchor>
            <arglist>(QFlags&lt;QTextFormat::PageBreakFlag&gt; policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PageBreakFlags</type>
            <name>pageBreakPolicy</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>pageBreakPolicy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabPositions</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>setTabPositions</anchor>
            <arglist>(const QList&lt;QTextOption::Tab&gt; &amp; tabs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QTextOption::Tab&gt;</type>
            <name>tabPositions</name>
            <anchorfile>qtextblockformat.html</anchorfile>
            <anchor>tabPositions</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextListFormat</name>
        <filename>qtextlistformat.html</filename>
        <base>QTextFormat</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextListFormat</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>QTextListFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>Style</name>
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListDisc">
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListCircle">
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListSquare">
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListDecimal">
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListLowerAlpha">
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListUpperAlpha">
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListLowerRoman">
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListUpperRoman">
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListStyleUndefined">
            <anchor>Style-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStyle</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>setStyle</anchor>
            <arglist>(Style style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Style</type>
            <name>style</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>style</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIndent</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>setIndent</anchor>
            <arglist>(int indentation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indent</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>indent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumberPrefix</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>setNumberPrefix</anchor>
            <arglist>(const QString &amp; numberPrefix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>numberPrefix</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>numberPrefix</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumberSuffix</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>setNumberSuffix</anchor>
            <arglist>(const QString &amp; numberSuffix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>numberSuffix</name>
            <anchorfile>qtextlistformat.html</anchorfile>
            <anchor>numberSuffix</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextImageFormat</name>
        <filename>qtextimageformat.html</filename>
        <base>QTextCharFormat</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextImageFormat</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>QTextImageFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>height</name>
            <anchorfile>qtextimageformat.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextFrameFormat</name>
        <filename>qtextframeformat.html</filename>
        <base>QTextFormat</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextFrameFormat</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>QTextFrameFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>Position</name>
            <anchor>Position-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InFlow">
            <anchor>Position-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FloatLeft">
            <anchor>Position-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FloatRight">
            <anchor>Position-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>BorderStyle</name>
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BorderStyle_None">
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BorderStyle_Dotted">
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BorderStyle_Dashed">
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BorderStyle_Solid">
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BorderStyle_Double">
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BorderStyle_DotDash">
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BorderStyle_DotDotDash">
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BorderStyle_Groove">
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BorderStyle_Ridge">
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BorderStyle_Inset">
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BorderStyle_Outset">
            <anchor>BorderStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(Position policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Position</type>
            <name>position</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorder</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setBorder</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>border</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>border</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorderBrush</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setBorderBrush</anchor>
            <arglist>(const QBrush &amp; brush)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBrush</type>
            <name>borderBrush</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>borderBrush</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBorderStyle</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setBorderStyle</anchor>
            <arglist>(BorderStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>BorderStyle</type>
            <name>borderStyle</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>borderStyle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>margin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>margin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setTopMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>topMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>topMargin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setBottomMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>bottomMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>bottomMargin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeftMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setLeftMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>leftMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>leftMargin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRightMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setRightMargin</anchor>
            <arglist>(qreal margin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rightMargin</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>rightMargin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPadding</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setPadding</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>padding</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>padding</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setWidth-2</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(const QTextLength &amp; width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextLength</type>
            <name>width</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setHeight-2</anchor>
            <arglist>(qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(const QTextLength &amp; height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextLength</type>
            <name>height</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPageBreakPolicy</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>setPageBreakPolicy</anchor>
            <arglist>(QFlags&lt;QTextFormat::PageBreakFlag&gt; policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PageBreakFlags</type>
            <name>pageBreakPolicy</name>
            <anchorfile>qtextframeformat.html</anchorfile>
            <anchor>pageBreakPolicy</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextTableFormat</name>
        <filename>qtexttableformat.html</filename>
        <base>QTextFrameFormat</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextTableFormat</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>QTextTableFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columns</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>columns</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColumnWidthConstraints</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>setColumnWidthConstraints</anchor>
            <arglist>(const QVector&lt;QTextLength&gt; &amp; constraints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QTextLength&gt;</type>
            <name>columnWidthConstraints</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>columnWidthConstraints</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearColumnWidthConstraints</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>clearColumnWidthConstraints</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>cellSpacing</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>cellSpacing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCellSpacing</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>setCellSpacing</anchor>
            <arglist>(qreal spacing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>cellPadding</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>cellPadding</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCellPadding</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>setCellPadding</anchor>
            <arglist>(qreal padding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>setAlignment</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>alignment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeaderRowCount</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>setHeaderRowCount</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>headerRowCount</name>
            <anchorfile>qtexttableformat.html</anchorfile>
            <anchor>headerRowCount</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextTableCellFormat</name>
        <filename>qtexttablecellformat.html</filename>
        <base>QTextCharFormat</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextTableCellFormat</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>QTextTableCellFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setTopPadding</anchor>
            <arglist>(qreal padding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>topPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>topPadding</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setBottomPadding</anchor>
            <arglist>(qreal padding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>bottomPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>bottomPadding</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeftPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setLeftPadding</anchor>
            <arglist>(qreal padding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>leftPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>leftPadding</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRightPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setRightPadding</anchor>
            <arglist>(qreal padding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>rightPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>rightPadding</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPadding</name>
            <anchorfile>qtexttablecellformat.html</anchorfile>
            <anchor>setPadding</anchor>
            <arglist>(qreal padding)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextInlineObject</name>
        <filename>qtextinlineobject.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextInlineObject</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>QTextInlineObject</anchor>
            <arglist>(int i, QTextEngine * e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>rect</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>ascent</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>ascent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>descent</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>descent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>height</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::LayoutDirection</type>
            <name>textDirection</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>textDirection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(qreal w)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAscent</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>setAscent</anchor>
            <arglist>(qreal a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescent</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>setDescent</anchor>
            <arglist>(qreal d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>textPosition</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>textPosition</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>formatIndex</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>formatIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFormat</type>
            <name>format</name>
            <anchorfile>qtextinlineobject.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextLayout</name>
        <filename>qtextlayout.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextLayout</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>QTextLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextLayout</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>QTextLayout-2</anchor>
            <arglist>(const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextLayout</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>QTextLayout-3</anchor>
            <arglist>(const QString &amp; text, const QFont &amp; font, QPaintDevice * paintdevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextLayout</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>dtor.QTextLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFont</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>setFont</anchor>
            <arglist>(const QFont &amp; font)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFont</type>
            <name>font</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>font</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp; string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextOption</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>setTextOption</anchor>
            <arglist>(const QTextOption &amp; option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QTextOption &amp;</type>
            <name>textOption</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>textOption</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPreeditArea</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>setPreeditArea</anchor>
            <arglist>(int position, const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>preeditAreaPosition</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>preeditAreaPosition</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>preeditAreaText</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>preeditAreaText</anchor>
            <arglist>() const</arglist>
        </member>
        <class>QTextLayout::FormatRange</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAdditionalFormats</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>setAdditionalFormats</anchor>
            <arglist>(const QList&lt;FormatRange&gt; &amp; formatList)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;FormatRange&gt;</type>
            <name>additionalFormats</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>additionalFormats</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearAdditionalFormats</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>clearAdditionalFormats</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCacheEnabled</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>setCacheEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>cacheEnabled</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>cacheEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCursorMoveStyle</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>setCursorMoveStyle</anchor>
            <arglist>(Qt::CursorMoveStyle style)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CursorMoveStyle</type>
            <name>cursorMoveStyle</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>cursorMoveStyle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginLayout</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>beginLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endLayout</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>endLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearLayout</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>clearLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextLine</type>
            <name>createLine</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>createLine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineCount</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>lineCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextLine</type>
            <name>lineAt</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>lineAt</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextLine</type>
            <name>lineForTextPosition</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>lineForTextPosition</anchor>
            <arglist>(int pos) const</arglist>
        </member>
        <member kind="enum">
            <name>CursorMode</name>
            <anchor>CursorMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SkipCharacters">
            <anchor>CursorMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SkipWords">
            <anchor>CursorMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValidCursorPosition</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>isValidCursorPosition</anchor>
            <arglist>(int pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>nextCursorPosition</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>nextCursorPosition</anchor>
            <arglist>(int oldPos, CursorMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>previousCursorPosition</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>previousCursorPosition</anchor>
            <arglist>(int oldPos, CursorMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>leftCursorPosition</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>leftCursorPosition</anchor>
            <arglist>(int oldPos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rightCursorPosition</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>rightCursorPosition</anchor>
            <arglist>(int oldPos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>draw</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>draw</anchor>
            <arglist>(QPainter * p, const QPointF &amp; pos, const QVector&lt;FormatRange&gt; &amp; selections, const QRectF &amp; clip) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawCursor</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>drawCursor-2</anchor>
            <arglist>(QPainter * painter, const QPointF &amp; position, int cursorPosition) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawCursor</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>drawCursor</anchor>
            <arglist>(QPainter * painter, const QPointF &amp; position, int cursorPosition, int width) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>position</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(const QPointF &amp; p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>minimumWidth</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>minimumWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>maximumWidth</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>maximumWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGlyphRun&gt;</type>
            <name>glyphRuns</name>
            <anchorfile>qtextlayout.html</anchorfile>
            <anchor>glyphRuns</anchor>
            <arglist>(int from, int length) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextLayout::FormatRange</name>
        <filename>qtextlayout-formatrange.html</filename>
    </compound>
    <compound kind="class">
        <name>QTextLine</name>
        <filename>qtextline.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextLine</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>QTextLine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>rect</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>rect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>ascent</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>ascent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>descent</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>descent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>height</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>leading</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>leading</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeadingIncluded</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>setLeadingIncluded</anchor>
            <arglist>(bool included)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>leadingIncluded</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>leadingIncluded</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>naturalTextWidth</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>naturalTextWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>horizontalAdvance</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>horizontalAdvance</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>naturalTextRect</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>naturalTextRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>Edge</name>
            <anchor>Edge-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Leading">
            <anchor>Edge-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Trailing">
            <anchor>Edge-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CursorPosition</name>
            <anchor>CursorPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CursorBetweenCharacters">
            <anchor>CursorPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CursorOnCharacter">
            <anchor>CursorPosition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>cursorToX</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>cursorToX</anchor>
            <arglist>(int * cursorPos, Edge edge) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>cursorToX</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>cursorToX-2</anchor>
            <arglist>(int cursorPos, Edge edge) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>xToCursor</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>xToCursor</anchor>
            <arglist>(qreal x, CursorPosition cpos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLineWidth</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>setLineWidth</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumColumns</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>setNumColumns</anchor>
            <arglist>(int numColumns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumColumns</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>setNumColumns-2</anchor>
            <arglist>(int numColumns, qreal alignmentWidth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(const QPointF &amp; pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>position</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>textStart</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>textStart</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>textLength</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>textLength</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineNumber</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>lineNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>draw</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>draw</anchor>
            <arglist>(QPainter * painter, const QPointF &amp; position, const QTextLayout::FormatRange * selection) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGlyphRun&gt;</type>
            <name>glyphRuns</name>
            <anchorfile>qtextline.html</anchorfile>
            <anchor>glyphRuns</anchor>
            <arglist>(int from, int length) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextList</name>
        <filename>qtextlist.html</filename>
        <base>QTextBlockGroup</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qtextlist-obsolete.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>item</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>item</anchor>
            <arglist>(int i) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>itemNumber</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>itemNumber</anchor>
            <arglist>(const QTextBlock &amp; block) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>itemText</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>itemText</anchor>
            <arglist>(const QTextBlock &amp; block) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeItem</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>removeItem</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QTextBlock &amp; block)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>add</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>add</anchor>
            <arglist>(const QTextBlock &amp; block)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QTextListFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextListFormat</type>
            <name>format</name>
            <anchorfile>qtextlist.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextObject</name>
        <filename>qtextobject.html</filename>
        <base>QObject</base>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QTextObject</name>
            <anchorfile>qtextobject.html</anchorfile>
            <anchor>QTextObject</anchor>
            <arglist>(QTextDocument * document)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>~QTextObject</name>
            <anchorfile>qtextobject.html</anchorfile>
            <anchor>dtor.QTextObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qtextobject.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QTextFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFormat</type>
            <name>format</name>
            <anchorfile>qtextobject.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>formatIndex</name>
            <anchorfile>qtextobject.html</anchorfile>
            <anchor>formatIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextDocument *</type>
            <name>document</name>
            <anchorfile>qtextobject.html</anchorfile>
            <anchor>document</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>objectIndex</name>
            <anchorfile>qtextobject.html</anchorfile>
            <anchor>objectIndex</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextBlockGroup</name>
        <filename>qtextblockgroup.html</filename>
        <base>QTextObject</base>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QTextBlockGroup</name>
            <anchorfile>qtextblockgroup.html</anchorfile>
            <anchor>QTextBlockGroup</anchor>
            <arglist>(QTextDocument * document)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>~QTextBlockGroup</name>
            <anchorfile>qtextblockgroup.html</anchorfile>
            <anchor>dtor.QTextBlockGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>blockInserted</name>
            <anchorfile>qtextblockgroup.html</anchorfile>
            <anchor>blockInserted</anchor>
            <arglist>(const QTextBlock &amp; block)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>blockRemoved</name>
            <anchorfile>qtextblockgroup.html</anchorfile>
            <anchor>blockRemoved</anchor>
            <arglist>(const QTextBlock &amp; block)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>blockFormatChanged</name>
            <anchorfile>qtextblockgroup.html</anchorfile>
            <anchor>blockFormatChanged</anchor>
            <arglist>(const QTextBlock &amp; block)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QList&lt;QTextBlock&gt;</type>
            <name>blockList</name>
            <anchorfile>qtextblockgroup.html</anchorfile>
            <anchor>blockList</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextFrame</name>
        <filename>qtextframe.html</filename>
        <base>QTextObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextFrame</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>QTextFrame</anchor>
            <arglist>(QTextDocument * document)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextFrame</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>dtor.QTextFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameFormat</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>setFrameFormat</anchor>
            <arglist>(const QTextFrameFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrameFormat</type>
            <name>frameFormat</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>frameFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>firstCursorPosition</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>firstCursorPosition</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>lastCursorPosition</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>lastCursorPosition</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>firstPosition</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>firstPosition</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastPosition</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>lastPosition</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QTextFrame *&gt;</type>
            <name>childFrames</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>childFrames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame *</type>
            <name>parentFrame</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>parentFrame</anchor>
            <arglist>() const</arglist>
        </member>
        <class>QTextFrame::iterator</class>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>qtextframe.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextFrame::iterator</name>
        <filename>qtextframe-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>iterator-3</anchor>
            <arglist>(const iterator &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const iterator &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame *</type>
            <name>parentFrame</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>parentFrame</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame *</type>
            <name>currentFrame</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>currentFrame</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>currentBlock</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>currentBlock</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atEnd</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const iterator &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const iterator &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>operator++</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator++</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>operator++-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator--</name>
            <anchorfile>qtextframe-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextBlockUserData</name>
        <filename>qtextblockuserdata.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextBlockUserData</name>
            <anchorfile>qtextblockuserdata.html</anchorfile>
            <anchor>dtor.QTextBlockUserData</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextBlock</name>
        <filename>qtextblock.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextBlock</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>QTextBlock</anchor>
            <arglist>(const QTextBlock &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock &amp;</type>
            <name>operator=</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QTextBlock &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QTextBlock &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QTextBlock &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>operator&lt;</anchor>
            <arglist>(const QTextBlock &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>position</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>length</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(int position) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextLayout *</type>
            <name>layout</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>layout</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearLayout</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>clearLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlockFormat</type>
            <name>blockFormat</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>blockFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>blockFormatIndex</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>blockFormatIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>charFormat</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>charFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>charFormatIndex</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>charFormatIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::LayoutDirection</type>
            <name>textDirection</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>textDirection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QTextDocument *</type>
            <name>document</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>document</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextList *</type>
            <name>textList</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>textList</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlockUserData *</type>
            <name>userData</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>userData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUserData</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>setUserData</anchor>
            <arglist>(QTextBlockUserData * data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>userState</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>userState</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUserState</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>setUserState</anchor>
            <arglist>(int state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>revision</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>revision</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRevision</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>setRevision</anchor>
            <arglist>(int rev)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVisible</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>isVisible</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisible</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>setVisible</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>blockNumber</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>blockNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>firstLineNumber</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>firstLineNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLineCount</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>setLineCount</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lineCount</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>lineCount</anchor>
            <arglist>() const</arglist>
        </member>
        <class>QTextBlock::iterator</class>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>begin</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>end</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>next</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>next</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBlock</type>
            <name>previous</name>
            <anchorfile>qtextblock.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextBlock::iterator</name>
        <filename>qtextblock-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>iterator-3</anchor>
            <arglist>(const iterator &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFragment</type>
            <name>fragment</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>fragment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atEnd</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const iterator &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const iterator &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>operator++</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator++</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>operator++-2</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>iterator</type>
            <name>operator--</name>
            <anchorfile>qtextblock-iterator.html</anchorfile>
            <anchor>operator---2</anchor>
            <arglist>(int )</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextFragment</name>
        <filename>qtextfragment.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextFragment</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>QTextFragment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextFragment</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>QTextFragment-3</anchor>
            <arglist>(const QTextFragment &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFragment &amp;</type>
            <name>operator=</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QTextFragment &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QTextFragment &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QTextFragment &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>operator&lt;</anchor>
            <arglist>(const QTextFragment &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>position</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>length</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(int position) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>charFormat</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>charFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>charFormatIndex</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>charFormatIndex</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGlyphRun&gt;</type>
            <name>glyphRuns</name>
            <anchorfile>qtextfragment.html</anchorfile>
            <anchor>glyphRuns</anchor>
            <arglist>(int pos, int len) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextOption</name>
        <filename>qtextoption.html</filename>
        <member kind="enum">
            <name>TabType</name>
            <anchor>TabType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftTab">
            <anchor>TabType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightTab">
            <anchor>TabType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CenterTab">
            <anchor>TabType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DelimiterTab">
            <anchor>TabType-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QTextOption::Tab</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextOption</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>QTextOption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextOption</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>QTextOption-2</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextOption</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>dtor.QTextOption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextOption</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>QTextOption-3</anchor>
            <arglist>(const QTextOption &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextOption &amp;</type>
            <name>operator=</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QTextOption &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAlignment</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>setAlignment</anchor>
            <arglist>(Qt::Alignment alignment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Alignment</type>
            <name>alignment</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>alignment</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextDirection</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>setTextDirection</anchor>
            <arglist>(Qt::LayoutDirection direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::LayoutDirection</type>
            <name>textDirection</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>textDirection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>WrapMode</name>
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoWrap">
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WordWrap">
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ManualWrap">
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WrapAnywhere">
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WrapAtWordBoundaryOrAnywhere">
            <anchor>WrapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWrapMode</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>setWrapMode</anchor>
            <arglist>(WrapMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>WrapMode</type>
            <name>wrapMode</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>wrapMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>Flag</name>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShowTabsAndSpaces">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShowLineAndParagraphSeparators">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AddSpaceForLineAndParagraphSeparators">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SuppressColors">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IncludeTrailingSpaces">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QTextOption::Flag">
            <name>Flags</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>Flags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(QFlags&lt;QTextOption::Flag&gt; flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Flags</type>
            <name>flags</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabStop</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>setTabStop</anchor>
            <arglist>(qreal tabStop)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>tabStop</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>tabStop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabArray</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>setTabArray</anchor>
            <arglist>(const QList&lt;qreal&gt; &amp; tabStops)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;qreal&gt;</type>
            <name>tabArray</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>tabArray</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTabs</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>setTabs</anchor>
            <arglist>(const QList&lt;Tab&gt; &amp; tabStops)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Tab&gt;</type>
            <name>tabs</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>tabs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUseDesignMetrics</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>setUseDesignMetrics</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>useDesignMetrics</name>
            <anchorfile>qtextoption.html</anchorfile>
            <anchor>useDesignMetrics</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextOption::Tab</name>
        <filename>qtextoption-tab.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Tab</name>
            <anchorfile>qtextoption-tab.html</anchorfile>
            <anchor>Tab</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Tab</name>
            <anchorfile>qtextoption-tab.html</anchorfile>
            <anchor>Tab-2</anchor>
            <arglist>(qreal pos, TabType tabType, QChar delim)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtextoption-tab.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const Tab &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtextoption-tab.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const Tab &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextTableCell</name>
        <filename>qtexttablecell.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextTableCell</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>QTextTableCell</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextTableCell</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>dtor.QTextTableCell</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextTableCell</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>QTextTableCell-2</anchor>
            <arglist>(const QTextTableCell &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTableCell &amp;</type>
            <name>operator=</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QTextTableCell &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QTextCharFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCharFormat</type>
            <name>format</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>row</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>row</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>column</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>column</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowSpan</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>rowSpan</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnSpan</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>columnSpan</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>firstCursorPosition</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>firstCursorPosition</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>lastCursorPosition</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>lastCursorPosition</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QTextTableCell &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QTextTableCell &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame::iterator</type>
            <name>begin</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextFrame::iterator</type>
            <name>end</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>tableCellFormatIndex</name>
            <anchorfile>qtexttablecell.html</anchorfile>
            <anchor>tableCellFormatIndex</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextTable</name>
        <filename>qtexttable.html</filename>
        <base>QTextFrame</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(int rows, int columns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRows</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>insertRows</anchor>
            <arglist>(int index, int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertColumns</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>insertColumns</anchor>
            <arglist>(int index, int columns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendRows</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>appendRows</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendColumns</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>appendColumns</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeRows</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>removeRows</anchor>
            <arglist>(int index, int rows)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeColumns</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>removeColumns</anchor>
            <arglist>(int index, int columns)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mergeCells</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>mergeCells</anchor>
            <arglist>(int row, int column, int numRows, int numCols)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mergeCells</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>mergeCells-2</anchor>
            <arglist>(const QTextCursor &amp; cursor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>splitCell</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>splitCell</anchor>
            <arglist>(int row, int column, int numRows, int numCols)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rows</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>rows</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columns</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>columns</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTableCell</type>
            <name>cellAt</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>cellAt</anchor>
            <arglist>(int row, int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTableCell</type>
            <name>cellAt</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>cellAt-2</anchor>
            <arglist>(int position) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTableCell</type>
            <name>cellAt</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>cellAt-3</anchor>
            <arglist>(const QTextCursor &amp; cursor) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>rowStart</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>rowStart</anchor>
            <arglist>(const QTextCursor &amp; cursor) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCursor</type>
            <name>rowEnd</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>rowEnd</anchor>
            <arglist>(const QTextCursor &amp; cursor) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QTextTableFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextTableFormat</type>
            <name>format</name>
            <anchorfile>qtexttable.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDesktopServices</name>
        <filename>qdesktopservices.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>openUrl</name>
            <anchorfile>qdesktopservices.html</anchorfile>
            <anchor>openUrl</anchor>
            <arglist>(const QUrl &amp; url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setUrlHandler</name>
            <anchorfile>qdesktopservices.html</anchorfile>
            <anchor>setUrlHandler</anchor>
            <arglist>(const QString &amp; scheme, QObject * receiver, const char * method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>unsetUrlHandler</name>
            <anchorfile>qdesktopservices.html</anchorfile>
            <anchor>unsetUrlHandler</anchor>
            <arglist>(const QString &amp; scheme)</arglist>
        </member>
        <member kind="enum">
            <name>StandardLocation</name>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DesktopLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DocumentsLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FontsLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationsLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MusicLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MoviesLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PicturesLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TempLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HomeLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DataLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CacheLocation">
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>storageLocation</name>
            <anchorfile>qdesktopservices-compat.html</anchorfile>
            <anchor>storageLocation</anchor>
            <arglist>(StandardLocation type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>displayName</name>
            <anchorfile>qdesktopservices-compat.html</anchorfile>
            <anchor>displayName</anchor>
            <arglist>(StandardLocation type)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QValidator</name>
        <filename>qvalidator.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QValidator</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>QValidator</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QValidator</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>dtor.QValidator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invalid">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Intermediate">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Acceptable">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocale</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>setLocale</anchor>
            <arglist>(const QLocale &amp; locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>locale</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>locale</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual State</type>
            <name>validate</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>validate</anchor>
            <arglist>(QString &amp; input, int &amp; pos) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fixup</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>fixup</anchor>
            <arglist>(QString &amp; input) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>changed</name>
            <anchorfile>qvalidator.html</anchorfile>
            <anchor>changed</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIntValidator</name>
        <filename>qintvalidator.html</filename>
        <base>QValidator</base>
        <member kind="property" type="int">
            <name>bottom</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>top</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIntValidator</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>QIntValidator</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIntValidator</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>QIntValidator-2</anchor>
            <arglist>(int minimum, int maximum, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QIntValidator</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>dtor.QIntValidator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QValidator::State</type>
            <name>validate</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>validate</anchor>
            <arglist>(QString &amp; input, int &amp; pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fixup</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>fixup</anchor>
            <arglist>(QString &amp; input) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setRange</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>setRange</anchor>
            <arglist>(int bottom, int top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bottom</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>top</name>
            <anchorfile>qintvalidator.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDoubleValidator</name>
        <filename>qdoublevalidator.html</filename>
        <base>QValidator</base>
        <member kind="property" type="double">
            <name>bottom</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="double">
            <name>top</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>decimals</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>decimals-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Notation">
            <name>notation</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>notation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDoubleValidator</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>QDoubleValidator</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDoubleValidator</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>QDoubleValidator-2</anchor>
            <arglist>(double bottom, double top, int decimals, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDoubleValidator</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>dtor.QDoubleValidator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>Notation</name>
            <anchor>Notation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StandardNotation">
            <anchor>Notation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ScientificNotation">
            <anchor>Notation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QValidator::State</type>
            <name>validate</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>validate</anchor>
            <arglist>(QString &amp; input, int &amp; pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setRange</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>setRange</anchor>
            <arglist>(double minimum, double maximum, int decimals)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>(double )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>(double )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDecimals</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>decimals-prop</anchor>
            <arglist>(int )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNotation</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>notation-prop</anchor>
            <arglist>(Notation )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>bottom</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>bottom-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>top</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>top-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>decimals</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>decimals-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Notation</type>
            <name>notation</name>
            <anchorfile>qdoublevalidator.html</anchorfile>
            <anchor>notation-prop</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRegExpValidator</name>
        <filename>qregexpvalidator.html</filename>
        <base>QValidator</base>
        <member kind="property" type="QRegExp">
            <name>regExp</name>
            <anchorfile>qregexpvalidator.html</anchorfile>
            <anchor>regExp-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegExpValidator</name>
            <anchorfile>qregexpvalidator.html</anchorfile>
            <anchor>QRegExpValidator</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegExpValidator</name>
            <anchorfile>qregexpvalidator.html</anchorfile>
            <anchor>QRegExpValidator-2</anchor>
            <arglist>(const QRegExp &amp; rx, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRegExpValidator</name>
            <anchorfile>qregexpvalidator.html</anchorfile>
            <anchor>dtor.QRegExpValidator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QValidator::State</type>
            <name>validate</name>
            <anchorfile>qregexpvalidator.html</anchorfile>
            <anchor>validate</anchor>
            <arglist>(QString &amp; input, int &amp; pos) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRegExp</name>
            <anchorfile>qregexpvalidator.html</anchorfile>
            <anchor>regExp-prop</anchor>
            <arglist>(const QRegExp &amp; rx)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRegExp &amp;</type>
            <name>regExp</name>
            <anchorfile>qregexpvalidator.html</anchorfile>
            <anchor>regExp-prop</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
</tagfile>
